/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner{}

// ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner struct for ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner
type ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner struct {
	// Enable of this IPv6 Prefix List
	Enable *bool `json:"enable,omitempty"`
	// Action upon match of Community Strings.
	PermitDeny *string `json:"permit_deny,omitempty"`
	// IPv6 address and subnet to match against 
	Ipv6Prefix *string `json:"ipv6_prefix,omitempty"`
	// Match IP routes with a subnet mask greater than or equal to the value indicated 
	GreaterThanEqualValue NullableInt32 `json:"greater_than_equal_value,omitempty"`
	// Match IP routes with a subnet mask less than or equal to the value indicated
	LessThanEqualValue NullableInt32 `json:"less_than_equal_value,omitempty"`
}

// NewConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner instantiates a new ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner() *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner {
	this := ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner{}
	var enable bool = false
	this.Enable = &enable
	var permitDeny string = "permit"
	this.PermitDeny = &permitDeny
	var ipv6Prefix string = ""
	this.Ipv6Prefix = &ipv6Prefix
	return &this
}

// NewConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInnerWithDefaults instantiates a new ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInnerWithDefaults() *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner {
	this := ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner{}
	var enable bool = false
	this.Enable = &enable
	var permitDeny string = "permit"
	this.PermitDeny = &permitDeny
	var ipv6Prefix string = ""
	this.Ipv6Prefix = &ipv6Prefix
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) SetEnable(v bool) {
	o.Enable = &v
}

// GetPermitDeny returns the PermitDeny field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetPermitDeny() string {
	if o == nil || IsNil(o.PermitDeny) {
		var ret string
		return ret
	}
	return *o.PermitDeny
}

// GetPermitDenyOk returns a tuple with the PermitDeny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetPermitDenyOk() (*string, bool) {
	if o == nil || IsNil(o.PermitDeny) {
		return nil, false
	}
	return o.PermitDeny, true
}

// HasPermitDeny returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) HasPermitDeny() bool {
	if o != nil && !IsNil(o.PermitDeny) {
		return true
	}

	return false
}

// SetPermitDeny gets a reference to the given string and assigns it to the PermitDeny field.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) SetPermitDeny(v string) {
	o.PermitDeny = &v
}

// GetIpv6Prefix returns the Ipv6Prefix field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetIpv6Prefix() string {
	if o == nil || IsNil(o.Ipv6Prefix) {
		var ret string
		return ret
	}
	return *o.Ipv6Prefix
}

// GetIpv6PrefixOk returns a tuple with the Ipv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetIpv6PrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Prefix) {
		return nil, false
	}
	return o.Ipv6Prefix, true
}

// HasIpv6Prefix returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) HasIpv6Prefix() bool {
	if o != nil && !IsNil(o.Ipv6Prefix) {
		return true
	}

	return false
}

// SetIpv6Prefix gets a reference to the given string and assigns it to the Ipv6Prefix field.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) SetIpv6Prefix(v string) {
	o.Ipv6Prefix = &v
}

// GetGreaterThanEqualValue returns the GreaterThanEqualValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetGreaterThanEqualValue() int32 {
	if o == nil || IsNil(o.GreaterThanEqualValue.Get()) {
		var ret int32
		return ret
	}
	return *o.GreaterThanEqualValue.Get()
}

// GetGreaterThanEqualValueOk returns a tuple with the GreaterThanEqualValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetGreaterThanEqualValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GreaterThanEqualValue.Get(), o.GreaterThanEqualValue.IsSet()
}

// HasGreaterThanEqualValue returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) HasGreaterThanEqualValue() bool {
	if o != nil && o.GreaterThanEqualValue.IsSet() {
		return true
	}

	return false
}

// SetGreaterThanEqualValue gets a reference to the given NullableInt32 and assigns it to the GreaterThanEqualValue field.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) SetGreaterThanEqualValue(v int32) {
	o.GreaterThanEqualValue.Set(&v)
}
// SetGreaterThanEqualValueNil sets the value for GreaterThanEqualValue to be an explicit nil
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) SetGreaterThanEqualValueNil() {
	o.GreaterThanEqualValue.Set(nil)
}

// UnsetGreaterThanEqualValue ensures that no value is present for GreaterThanEqualValue, not even an explicit nil
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) UnsetGreaterThanEqualValue() {
	o.GreaterThanEqualValue.Unset()
}

// GetLessThanEqualValue returns the LessThanEqualValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetLessThanEqualValue() int32 {
	if o == nil || IsNil(o.LessThanEqualValue.Get()) {
		var ret int32
		return ret
	}
	return *o.LessThanEqualValue.Get()
}

// GetLessThanEqualValueOk returns a tuple with the LessThanEqualValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) GetLessThanEqualValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LessThanEqualValue.Get(), o.LessThanEqualValue.IsSet()
}

// HasLessThanEqualValue returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) HasLessThanEqualValue() bool {
	if o != nil && o.LessThanEqualValue.IsSet() {
		return true
	}

	return false
}

// SetLessThanEqualValue gets a reference to the given NullableInt32 and assigns it to the LessThanEqualValue field.
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) SetLessThanEqualValue(v int32) {
	o.LessThanEqualValue.Set(&v)
}
// SetLessThanEqualValueNil sets the value for LessThanEqualValue to be an explicit nil
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) SetLessThanEqualValueNil() {
	o.LessThanEqualValue.Set(nil)
}

// UnsetLessThanEqualValue ensures that no value is present for LessThanEqualValue, not even an explicit nil
func (o *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) UnsetLessThanEqualValue() {
	o.LessThanEqualValue.Unset()
}

func (o ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.PermitDeny) {
		toSerialize["permit_deny"] = o.PermitDeny
	}
	if !IsNil(o.Ipv6Prefix) {
		toSerialize["ipv6_prefix"] = o.Ipv6Prefix
	}
	if o.GreaterThanEqualValue.IsSet() {
		toSerialize["greater_than_equal_value"] = o.GreaterThanEqualValue.Get()
	}
	if o.LessThanEqualValue.IsSet() {
		toSerialize["less_than_equal_value"] = o.LessThanEqualValue.Get()
	}
	return toSerialize, nil
}

type NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner struct {
	value *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner
	isSet bool
}

func (v NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) Get() *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner {
	return v.value
}

func (v *NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) Set(val *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner(val *ConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) *NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner {
	return &NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner{value: val, isSet: true}
}

func (v NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestIpv6PrefixListIpv6PrefixListNameListsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


