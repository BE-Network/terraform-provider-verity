/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestMacFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestMacFilter{}

// ConfigPutRequestMacFilter struct for ConfigPutRequestMacFilter
type ConfigPutRequestMacFilter struct {
	MacFilterName *ConfigPutRequestMacFilterMacFilterName `json:"mac_filter_name,omitempty"`
}

// NewConfigPutRequestMacFilter instantiates a new ConfigPutRequestMacFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestMacFilter() *ConfigPutRequestMacFilter {
	this := ConfigPutRequestMacFilter{}
	return &this
}

// NewConfigPutRequestMacFilterWithDefaults instantiates a new ConfigPutRequestMacFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestMacFilterWithDefaults() *ConfigPutRequestMacFilter {
	this := ConfigPutRequestMacFilter{}
	return &this
}

// GetMacFilterName returns the MacFilterName field value if set, zero value otherwise.
func (o *ConfigPutRequestMacFilter) GetMacFilterName() ConfigPutRequestMacFilterMacFilterName {
	if o == nil || IsNil(o.MacFilterName) {
		var ret ConfigPutRequestMacFilterMacFilterName
		return ret
	}
	return *o.MacFilterName
}

// GetMacFilterNameOk returns a tuple with the MacFilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestMacFilter) GetMacFilterNameOk() (*ConfigPutRequestMacFilterMacFilterName, bool) {
	if o == nil || IsNil(o.MacFilterName) {
		return nil, false
	}
	return o.MacFilterName, true
}

// HasMacFilterName returns a boolean if a field has been set.
func (o *ConfigPutRequestMacFilter) HasMacFilterName() bool {
	if o != nil && !IsNil(o.MacFilterName) {
		return true
	}

	return false
}

// SetMacFilterName gets a reference to the given ConfigPutRequestMacFilterMacFilterName and assigns it to the MacFilterName field.
func (o *ConfigPutRequestMacFilter) SetMacFilterName(v ConfigPutRequestMacFilterMacFilterName) {
	o.MacFilterName = &v
}

func (o ConfigPutRequestMacFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestMacFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MacFilterName) {
		toSerialize["mac_filter_name"] = o.MacFilterName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestMacFilter struct {
	value *ConfigPutRequestMacFilter
	isSet bool
}

func (v NullableConfigPutRequestMacFilter) Get() *ConfigPutRequestMacFilter {
	return v.value
}

func (v *NullableConfigPutRequestMacFilter) Set(val *ConfigPutRequestMacFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestMacFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestMacFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestMacFilter(val *ConfigPutRequestMacFilter) *NullableConfigPutRequestMacFilter {
	return &NullableConfigPutRequestMacFilter{value: val, isSet: true}
}

func (v NullableConfigPutRequestMacFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestMacFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


