/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestIpv4ListFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestIpv4ListFilter{}

// ConfigPutRequestIpv4ListFilter struct for ConfigPutRequestIpv4ListFilter
type ConfigPutRequestIpv4ListFilter struct {
	Ipv4ListFilterName *ConfigPutRequestIpv4ListFilterIpv4ListFilterName `json:"ipv4_list_filter_name,omitempty"`
}

// NewConfigPutRequestIpv4ListFilter instantiates a new ConfigPutRequestIpv4ListFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestIpv4ListFilter() *ConfigPutRequestIpv4ListFilter {
	this := ConfigPutRequestIpv4ListFilter{}
	return &this
}

// NewConfigPutRequestIpv4ListFilterWithDefaults instantiates a new ConfigPutRequestIpv4ListFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestIpv4ListFilterWithDefaults() *ConfigPutRequestIpv4ListFilter {
	this := ConfigPutRequestIpv4ListFilter{}
	return &this
}

// GetIpv4ListFilterName returns the Ipv4ListFilterName field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4ListFilter) GetIpv4ListFilterName() ConfigPutRequestIpv4ListFilterIpv4ListFilterName {
	if o == nil || IsNil(o.Ipv4ListFilterName) {
		var ret ConfigPutRequestIpv4ListFilterIpv4ListFilterName
		return ret
	}
	return *o.Ipv4ListFilterName
}

// GetIpv4ListFilterNameOk returns a tuple with the Ipv4ListFilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4ListFilter) GetIpv4ListFilterNameOk() (*ConfigPutRequestIpv4ListFilterIpv4ListFilterName, bool) {
	if o == nil || IsNil(o.Ipv4ListFilterName) {
		return nil, false
	}
	return o.Ipv4ListFilterName, true
}

// HasIpv4ListFilterName returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4ListFilter) HasIpv4ListFilterName() bool {
	if o != nil && !IsNil(o.Ipv4ListFilterName) {
		return true
	}

	return false
}

// SetIpv4ListFilterName gets a reference to the given ConfigPutRequestIpv4ListFilterIpv4ListFilterName and assigns it to the Ipv4ListFilterName field.
func (o *ConfigPutRequestIpv4ListFilter) SetIpv4ListFilterName(v ConfigPutRequestIpv4ListFilterIpv4ListFilterName) {
	o.Ipv4ListFilterName = &v
}

func (o ConfigPutRequestIpv4ListFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestIpv4ListFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4ListFilterName) {
		toSerialize["ipv4_list_filter_name"] = o.Ipv4ListFilterName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestIpv4ListFilter struct {
	value *ConfigPutRequestIpv4ListFilter
	isSet bool
}

func (v NullableConfigPutRequestIpv4ListFilter) Get() *ConfigPutRequestIpv4ListFilter {
	return v.value
}

func (v *NullableConfigPutRequestIpv4ListFilter) Set(val *ConfigPutRequestIpv4ListFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestIpv4ListFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestIpv4ListFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestIpv4ListFilter(val *ConfigPutRequestIpv4ListFilter) *NullableConfigPutRequestIpv4ListFilter {
	return &NullableConfigPutRequestIpv4ListFilter{value: val, isSet: true}
}

func (v NullableConfigPutRequestIpv4ListFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestIpv4ListFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


