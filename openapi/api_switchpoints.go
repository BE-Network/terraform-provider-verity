/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// SwitchpointsAPIService SwitchpointsAPI service
type SwitchpointsAPIService service

type ApiSwitchpointsCurrentconfigGetRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	switchpointName *string
}

func (r ApiSwitchpointsCurrentconfigGetRequest) SwitchpointName(switchpointName string) ApiSwitchpointsCurrentconfigGetRequest {
	r.switchpointName = &switchpointName
	return r
}

func (r ApiSwitchpointsCurrentconfigGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsCurrentconfigGetExecute(r)
}

/*
SwitchpointsCurrentconfigGet Get all Switchpoint current configs

Retrieves all Switchpoint current configs from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsCurrentconfigGetRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsCurrentconfigGet(ctx context.Context) ApiSwitchpointsCurrentconfigGetRequest {
	return ApiSwitchpointsCurrentconfigGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsCurrentconfigGetExecute(r ApiSwitchpointsCurrentconfigGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsCurrentconfigGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints/currentconfig"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.switchpointName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "switchpoint_name", r.switchpointName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwitchpointsDeleteRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	switchpointName *[]string
	changesetName *string
}

func (r ApiSwitchpointsDeleteRequest) SwitchpointName(switchpointName []string) ApiSwitchpointsDeleteRequest {
	r.switchpointName = &switchpointName
	return r
}

func (r ApiSwitchpointsDeleteRequest) ChangesetName(changesetName string) ApiSwitchpointsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSwitchpointsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsDeleteExecute(r)
}

/*
SwitchpointsDelete Delete Switchpoint

Deletes an existing Switchpoint from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsDeleteRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsDelete(ctx context.Context) ApiSwitchpointsDeleteRequest {
	return ApiSwitchpointsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsDeleteExecute(r ApiSwitchpointsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.switchpointName == nil {
		return nil, reportError("switchpointName is required and must be specified")
	}

	{
		t := *r.switchpointName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "switchpoint_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "switchpoint_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwitchpointsGetRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	switchpointName *string
	includeData *bool
	changesetName *string
}

func (r ApiSwitchpointsGetRequest) SwitchpointName(switchpointName string) ApiSwitchpointsGetRequest {
	r.switchpointName = &switchpointName
	return r
}

func (r ApiSwitchpointsGetRequest) IncludeData(includeData bool) ApiSwitchpointsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiSwitchpointsGetRequest) ChangesetName(changesetName string) ApiSwitchpointsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSwitchpointsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsGetExecute(r)
}

/*
SwitchpointsGet Get all Switchpoints

Retrieves all Switchpoints from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsGetRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsGet(ctx context.Context) ApiSwitchpointsGetRequest {
	return ApiSwitchpointsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsGetExecute(r ApiSwitchpointsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.switchpointName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "switchpoint_name", r.switchpointName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwitchpointsMarkoutofserviceGetRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	mos *bool
}

func (r ApiSwitchpointsMarkoutofserviceGetRequest) Mos(mos bool) ApiSwitchpointsMarkoutofserviceGetRequest {
	r.mos = &mos
	return r
}

func (r ApiSwitchpointsMarkoutofserviceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsMarkoutofserviceGetExecute(r)
}

/*
SwitchpointsMarkoutofserviceGet Get all marked out of service Switchpoint names

Retrieves all marked out of service Switchpoint names from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsMarkoutofserviceGetRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsMarkoutofserviceGet(ctx context.Context) ApiSwitchpointsMarkoutofserviceGetRequest {
	return ApiSwitchpointsMarkoutofserviceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsMarkoutofserviceGetExecute(r ApiSwitchpointsMarkoutofserviceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsMarkoutofserviceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints/markoutofservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mos != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mos", r.mos, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwitchpointsMarkoutofservicePutRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	switchpointsMarkoutofservicePutRequest *SwitchpointsMarkoutofservicePutRequest
}

func (r ApiSwitchpointsMarkoutofservicePutRequest) SwitchpointsMarkoutofservicePutRequest(switchpointsMarkoutofservicePutRequest SwitchpointsMarkoutofservicePutRequest) ApiSwitchpointsMarkoutofservicePutRequest {
	r.switchpointsMarkoutofservicePutRequest = &switchpointsMarkoutofservicePutRequest
	return r
}

func (r ApiSwitchpointsMarkoutofservicePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsMarkoutofservicePutExecute(r)
}

/*
SwitchpointsMarkoutofservicePut Mark switchpoints out of service or back in service

Mark switchpoints out of service or back in service.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsMarkoutofservicePutRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsMarkoutofservicePut(ctx context.Context) ApiSwitchpointsMarkoutofservicePutRequest {
	return ApiSwitchpointsMarkoutofservicePutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsMarkoutofservicePutExecute(r ApiSwitchpointsMarkoutofservicePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsMarkoutofservicePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints/markoutofservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.switchpointsMarkoutofservicePutRequest == nil {
		return nil, reportError("switchpointsMarkoutofservicePutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.switchpointsMarkoutofservicePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwitchpointsPatchRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	changesetName *string
	switchpointsPutRequest *SwitchpointsPutRequest
}

func (r ApiSwitchpointsPatchRequest) ChangesetName(changesetName string) ApiSwitchpointsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSwitchpointsPatchRequest) SwitchpointsPutRequest(switchpointsPutRequest SwitchpointsPutRequest) ApiSwitchpointsPatchRequest {
	r.switchpointsPutRequest = &switchpointsPutRequest
	return r
}

func (r ApiSwitchpointsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsPatchExecute(r)
}

/*
SwitchpointsPatch Update Switchpoint

Update Switchpoint into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsPatchRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsPatch(ctx context.Context) ApiSwitchpointsPatchRequest {
	return ApiSwitchpointsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsPatchExecute(r ApiSwitchpointsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.switchpointsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwitchpointsPutRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	changesetName *string
	switchpointsPutRequest *SwitchpointsPutRequest
}

func (r ApiSwitchpointsPutRequest) ChangesetName(changesetName string) ApiSwitchpointsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSwitchpointsPutRequest) SwitchpointsPutRequest(switchpointsPutRequest SwitchpointsPutRequest) ApiSwitchpointsPutRequest {
	r.switchpointsPutRequest = &switchpointsPutRequest
	return r
}

func (r ApiSwitchpointsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsPutExecute(r)
}

/*
SwitchpointsPut Create Switchpoint

Create Switchpoint into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsPutRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsPut(ctx context.Context) ApiSwitchpointsPutRequest {
	return ApiSwitchpointsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsPutExecute(r ApiSwitchpointsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.switchpointsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwitchpointsUpgradePatchRequest struct {
	ctx context.Context
	ApiService *SwitchpointsAPIService
	switchpointsUpgradePatchRequest *SwitchpointsUpgradePatchRequest
}

func (r ApiSwitchpointsUpgradePatchRequest) SwitchpointsUpgradePatchRequest(switchpointsUpgradePatchRequest SwitchpointsUpgradePatchRequest) ApiSwitchpointsUpgradePatchRequest {
	r.switchpointsUpgradePatchRequest = &switchpointsUpgradePatchRequest
	return r
}

func (r ApiSwitchpointsUpgradePatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchpointsUpgradePatchExecute(r)
}

/*
SwitchpointsUpgradePatch Update Switchpoint firmware version

Update Switchpoint firmware to a specific version.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchpointsUpgradePatchRequest
*/
func (a *SwitchpointsAPIService) SwitchpointsUpgradePatch(ctx context.Context) ApiSwitchpointsUpgradePatchRequest {
	return ApiSwitchpointsUpgradePatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SwitchpointsAPIService) SwitchpointsUpgradePatchExecute(r ApiSwitchpointsUpgradePatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchpointsAPIService.SwitchpointsUpgradePatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchpoints/upgrade"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.switchpointsUpgradePatchRequest == nil {
		return nil, reportError("switchpointsUpgradePatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.switchpointsUpgradePatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
