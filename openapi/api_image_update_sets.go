/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ImageUpdateSetsAPIService ImageUpdateSetsAPI service
type ImageUpdateSetsAPIService service

type ApiImageupdatesetsDeleteRequest struct {
	ctx context.Context
	ApiService *ImageUpdateSetsAPIService
	imageUpdateSetName *[]string
	changesetName *string
}

func (r ApiImageupdatesetsDeleteRequest) ImageUpdateSetName(imageUpdateSetName []string) ApiImageupdatesetsDeleteRequest {
	r.imageUpdateSetName = &imageUpdateSetName
	return r
}

func (r ApiImageupdatesetsDeleteRequest) ChangesetName(changesetName string) ApiImageupdatesetsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiImageupdatesetsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ImageupdatesetsDeleteExecute(r)
}

/*
ImageupdatesetsDelete Delete Image Update Set

Deletes an existing Image Update Set from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImageupdatesetsDeleteRequest
*/
func (a *ImageUpdateSetsAPIService) ImageupdatesetsDelete(ctx context.Context) ApiImageupdatesetsDeleteRequest {
	return ApiImageupdatesetsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ImageUpdateSetsAPIService) ImageupdatesetsDeleteExecute(r ApiImageupdatesetsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageUpdateSetsAPIService.ImageupdatesetsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/imageupdatesets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageUpdateSetName == nil {
		return nil, reportError("imageUpdateSetName is required and must be specified")
	}

	{
		t := *r.imageUpdateSetName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_update_set_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_update_set_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiImageupdatesetsGetRequest struct {
	ctx context.Context
	ApiService *ImageUpdateSetsAPIService
	imageUpdateSetName *string
	includeData *bool
	changesetName *string
}

func (r ApiImageupdatesetsGetRequest) ImageUpdateSetName(imageUpdateSetName string) ApiImageupdatesetsGetRequest {
	r.imageUpdateSetName = &imageUpdateSetName
	return r
}

func (r ApiImageupdatesetsGetRequest) IncludeData(includeData bool) ApiImageupdatesetsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiImageupdatesetsGetRequest) ChangesetName(changesetName string) ApiImageupdatesetsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiImageupdatesetsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ImageupdatesetsGetExecute(r)
}

/*
ImageupdatesetsGet Get all Image Update Sets

Retrieves all Image Update Sets from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImageupdatesetsGetRequest
*/
func (a *ImageUpdateSetsAPIService) ImageupdatesetsGet(ctx context.Context) ApiImageupdatesetsGetRequest {
	return ApiImageupdatesetsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ImageUpdateSetsAPIService) ImageupdatesetsGetExecute(r ApiImageupdatesetsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageUpdateSetsAPIService.ImageupdatesetsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/imageupdatesets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.imageUpdateSetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image_update_set_name", r.imageUpdateSetName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiImageupdatesetsPatchRequest struct {
	ctx context.Context
	ApiService *ImageUpdateSetsAPIService
	changesetName *string
	imageupdatesetsPutRequest *ImageupdatesetsPutRequest
}

func (r ApiImageupdatesetsPatchRequest) ChangesetName(changesetName string) ApiImageupdatesetsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiImageupdatesetsPatchRequest) ImageupdatesetsPutRequest(imageupdatesetsPutRequest ImageupdatesetsPutRequest) ApiImageupdatesetsPatchRequest {
	r.imageupdatesetsPutRequest = &imageupdatesetsPutRequest
	return r
}

func (r ApiImageupdatesetsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ImageupdatesetsPatchExecute(r)
}

/*
ImageupdatesetsPatch Update Image Update Set

Update Image Update Set into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImageupdatesetsPatchRequest
*/
func (a *ImageUpdateSetsAPIService) ImageupdatesetsPatch(ctx context.Context) ApiImageupdatesetsPatchRequest {
	return ApiImageupdatesetsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ImageUpdateSetsAPIService) ImageupdatesetsPatchExecute(r ApiImageupdatesetsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageUpdateSetsAPIService.ImageupdatesetsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/imageupdatesets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageupdatesetsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiImageupdatesetsPutRequest struct {
	ctx context.Context
	ApiService *ImageUpdateSetsAPIService
	changesetName *string
	imageupdatesetsPutRequest *ImageupdatesetsPutRequest
}

func (r ApiImageupdatesetsPutRequest) ChangesetName(changesetName string) ApiImageupdatesetsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiImageupdatesetsPutRequest) ImageupdatesetsPutRequest(imageupdatesetsPutRequest ImageupdatesetsPutRequest) ApiImageupdatesetsPutRequest {
	r.imageupdatesetsPutRequest = &imageupdatesetsPutRequest
	return r
}

func (r ApiImageupdatesetsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ImageupdatesetsPutExecute(r)
}

/*
ImageupdatesetsPut Create Image Update Set

Create Image Update Set into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImageupdatesetsPutRequest
*/
func (a *ImageUpdateSetsAPIService) ImageupdatesetsPut(ctx context.Context) ApiImageupdatesetsPutRequest {
	return ApiImageupdatesetsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ImageUpdateSetsAPIService) ImageupdatesetsPutExecute(r ApiImageupdatesetsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageUpdateSetsAPIService.ImageupdatesetsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/imageupdatesets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageupdatesetsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
