/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestDeviceController type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestDeviceController{}

// ConfigPutRequestDeviceController struct for ConfigPutRequestDeviceController
type ConfigPutRequestDeviceController struct {
	DeviceControllerName *ConfigPutRequestDeviceControllerDeviceControllerName `json:"device_controller_name,omitempty"`
}

// NewConfigPutRequestDeviceController instantiates a new ConfigPutRequestDeviceController object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestDeviceController() *ConfigPutRequestDeviceController {
	this := ConfigPutRequestDeviceController{}
	return &this
}

// NewConfigPutRequestDeviceControllerWithDefaults instantiates a new ConfigPutRequestDeviceController object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestDeviceControllerWithDefaults() *ConfigPutRequestDeviceController {
	this := ConfigPutRequestDeviceController{}
	return &this
}

// GetDeviceControllerName returns the DeviceControllerName field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceController) GetDeviceControllerName() ConfigPutRequestDeviceControllerDeviceControllerName {
	if o == nil || IsNil(o.DeviceControllerName) {
		var ret ConfigPutRequestDeviceControllerDeviceControllerName
		return ret
	}
	return *o.DeviceControllerName
}

// GetDeviceControllerNameOk returns a tuple with the DeviceControllerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceController) GetDeviceControllerNameOk() (*ConfigPutRequestDeviceControllerDeviceControllerName, bool) {
	if o == nil || IsNil(o.DeviceControllerName) {
		return nil, false
	}
	return o.DeviceControllerName, true
}

// HasDeviceControllerName returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceController) HasDeviceControllerName() bool {
	if o != nil && !IsNil(o.DeviceControllerName) {
		return true
	}

	return false
}

// SetDeviceControllerName gets a reference to the given ConfigPutRequestDeviceControllerDeviceControllerName and assigns it to the DeviceControllerName field.
func (o *ConfigPutRequestDeviceController) SetDeviceControllerName(v ConfigPutRequestDeviceControllerDeviceControllerName) {
	o.DeviceControllerName = &v
}

func (o ConfigPutRequestDeviceController) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestDeviceController) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceControllerName) {
		toSerialize["device_controller_name"] = o.DeviceControllerName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestDeviceController struct {
	value *ConfigPutRequestDeviceController
	isSet bool
}

func (v NullableConfigPutRequestDeviceController) Get() *ConfigPutRequestDeviceController {
	return v.value
}

func (v *NullableConfigPutRequestDeviceController) Set(val *ConfigPutRequestDeviceController) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestDeviceController) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestDeviceController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestDeviceController(val *ConfigPutRequestDeviceController) *NullableConfigPutRequestDeviceController {
	return &NullableConfigPutRequestDeviceController{value: val, isSet: true}
}

func (v NullableConfigPutRequestDeviceController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestDeviceController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


