/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName{}

// ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName struct for ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName
type ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName struct {
	// Object Name. Must be unique.
	Name *string `json:"name,omitempty"`
	// Enable object.
	Enable *bool `json:"enable,omitempty"`
	// Mode
	Mode *string `json:"mode,omitempty"`
	// Usage Threshold
	UsageThreshold *float32 `json:"usage_threshold,omitempty"`
	// External Battery Power Available
	ExternalBatteryPowerAvailable *int32 `json:"external_battery_power_available,omitempty"`
	// External Power Available
	ExternalPowerAvailable *int32 `json:"external_power_available,omitempty"`
	// Frequency in minutes of rereading this Switch running configuration and comparing it to expected values.                                                 <br>if the value is blank, audit will use default switch settings.                                                 <br>if the value is 0, audit will be turned off.                                                 
	SecurityAuditInterval NullableInt32 `json:"security_audit_interval,omitempty"`
	// Frequency in minutes to write the Switch configuration to flash.                                                 <br>if the value is blank, commit will use default switch settings.                                                 <br>if the value is 0, commit will be turned off.
	CommitToFlashInterval NullableInt32 `json:"commit_to_flash_interval,omitempty"`
	// Enable RDMA over Converged Ethernet version 2 network protocol. Switches that are set to ROCE mode should already have their port breakouts set up and should not have any ports configured with LAGs.
	Rocev2 *bool `json:"rocev2,omitempty"`
	// Enable Cut-through Switching on all Switches
	CutThroughSwitching *bool `json:"cut_through_switching,omitempty"`
	ObjectProperties *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties `json:"object_properties,omitempty"`
}

// NewConfigPutRequestEthDeviceProfilesEthDeviceProfilesName instantiates a new ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestEthDeviceProfilesEthDeviceProfilesName() *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName {
	this := ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var mode string = "IEEE 802.3af"
	this.Mode = &mode
	var externalBatteryPowerAvailable int32 = 40
	this.ExternalBatteryPowerAvailable = &externalBatteryPowerAvailable
	var externalPowerAvailable int32 = 75
	this.ExternalPowerAvailable = &externalPowerAvailable
	var securityAuditInterval int32 = 60
	this.SecurityAuditInterval = *NewNullableInt32(&securityAuditInterval)
	var commitToFlashInterval int32 = 60
	this.CommitToFlashInterval = *NewNullableInt32(&commitToFlashInterval)
	var rocev2 bool = false
	this.Rocev2 = &rocev2
	var cutThroughSwitching bool = false
	this.CutThroughSwitching = &cutThroughSwitching
	return &this
}

// NewConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameWithDefaults instantiates a new ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameWithDefaults() *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName {
	this := ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var mode string = "IEEE 802.3af"
	this.Mode = &mode
	var externalBatteryPowerAvailable int32 = 40
	this.ExternalBatteryPowerAvailable = &externalBatteryPowerAvailable
	var externalPowerAvailable int32 = 75
	this.ExternalPowerAvailable = &externalPowerAvailable
	var securityAuditInterval int32 = 60
	this.SecurityAuditInterval = *NewNullableInt32(&securityAuditInterval)
	var commitToFlashInterval int32 = 60
	this.CommitToFlashInterval = *NewNullableInt32(&commitToFlashInterval)
	var rocev2 bool = false
	this.Rocev2 = &rocev2
	var cutThroughSwitching bool = false
	this.CutThroughSwitching = &cutThroughSwitching
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetName(v string) {
	o.Name = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetEnable(v bool) {
	o.Enable = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetMode(v string) {
	o.Mode = &v
}

// GetUsageThreshold returns the UsageThreshold field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetUsageThreshold() float32 {
	if o == nil || IsNil(o.UsageThreshold) {
		var ret float32
		return ret
	}
	return *o.UsageThreshold
}

// GetUsageThresholdOk returns a tuple with the UsageThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetUsageThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.UsageThreshold) {
		return nil, false
	}
	return o.UsageThreshold, true
}

// HasUsageThreshold returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasUsageThreshold() bool {
	if o != nil && !IsNil(o.UsageThreshold) {
		return true
	}

	return false
}

// SetUsageThreshold gets a reference to the given float32 and assigns it to the UsageThreshold field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetUsageThreshold(v float32) {
	o.UsageThreshold = &v
}

// GetExternalBatteryPowerAvailable returns the ExternalBatteryPowerAvailable field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetExternalBatteryPowerAvailable() int32 {
	if o == nil || IsNil(o.ExternalBatteryPowerAvailable) {
		var ret int32
		return ret
	}
	return *o.ExternalBatteryPowerAvailable
}

// GetExternalBatteryPowerAvailableOk returns a tuple with the ExternalBatteryPowerAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetExternalBatteryPowerAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.ExternalBatteryPowerAvailable) {
		return nil, false
	}
	return o.ExternalBatteryPowerAvailable, true
}

// HasExternalBatteryPowerAvailable returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasExternalBatteryPowerAvailable() bool {
	if o != nil && !IsNil(o.ExternalBatteryPowerAvailable) {
		return true
	}

	return false
}

// SetExternalBatteryPowerAvailable gets a reference to the given int32 and assigns it to the ExternalBatteryPowerAvailable field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetExternalBatteryPowerAvailable(v int32) {
	o.ExternalBatteryPowerAvailable = &v
}

// GetExternalPowerAvailable returns the ExternalPowerAvailable field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetExternalPowerAvailable() int32 {
	if o == nil || IsNil(o.ExternalPowerAvailable) {
		var ret int32
		return ret
	}
	return *o.ExternalPowerAvailable
}

// GetExternalPowerAvailableOk returns a tuple with the ExternalPowerAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetExternalPowerAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.ExternalPowerAvailable) {
		return nil, false
	}
	return o.ExternalPowerAvailable, true
}

// HasExternalPowerAvailable returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasExternalPowerAvailable() bool {
	if o != nil && !IsNil(o.ExternalPowerAvailable) {
		return true
	}

	return false
}

// SetExternalPowerAvailable gets a reference to the given int32 and assigns it to the ExternalPowerAvailable field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetExternalPowerAvailable(v int32) {
	o.ExternalPowerAvailable = &v
}

// GetSecurityAuditInterval returns the SecurityAuditInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetSecurityAuditInterval() int32 {
	if o == nil || IsNil(o.SecurityAuditInterval.Get()) {
		var ret int32
		return ret
	}
	return *o.SecurityAuditInterval.Get()
}

// GetSecurityAuditIntervalOk returns a tuple with the SecurityAuditInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetSecurityAuditIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityAuditInterval.Get(), o.SecurityAuditInterval.IsSet()
}

// HasSecurityAuditInterval returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasSecurityAuditInterval() bool {
	if o != nil && o.SecurityAuditInterval.IsSet() {
		return true
	}

	return false
}

// SetSecurityAuditInterval gets a reference to the given NullableInt32 and assigns it to the SecurityAuditInterval field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetSecurityAuditInterval(v int32) {
	o.SecurityAuditInterval.Set(&v)
}
// SetSecurityAuditIntervalNil sets the value for SecurityAuditInterval to be an explicit nil
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetSecurityAuditIntervalNil() {
	o.SecurityAuditInterval.Set(nil)
}

// UnsetSecurityAuditInterval ensures that no value is present for SecurityAuditInterval, not even an explicit nil
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) UnsetSecurityAuditInterval() {
	o.SecurityAuditInterval.Unset()
}

// GetCommitToFlashInterval returns the CommitToFlashInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetCommitToFlashInterval() int32 {
	if o == nil || IsNil(o.CommitToFlashInterval.Get()) {
		var ret int32
		return ret
	}
	return *o.CommitToFlashInterval.Get()
}

// GetCommitToFlashIntervalOk returns a tuple with the CommitToFlashInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetCommitToFlashIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitToFlashInterval.Get(), o.CommitToFlashInterval.IsSet()
}

// HasCommitToFlashInterval returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasCommitToFlashInterval() bool {
	if o != nil && o.CommitToFlashInterval.IsSet() {
		return true
	}

	return false
}

// SetCommitToFlashInterval gets a reference to the given NullableInt32 and assigns it to the CommitToFlashInterval field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetCommitToFlashInterval(v int32) {
	o.CommitToFlashInterval.Set(&v)
}
// SetCommitToFlashIntervalNil sets the value for CommitToFlashInterval to be an explicit nil
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetCommitToFlashIntervalNil() {
	o.CommitToFlashInterval.Set(nil)
}

// UnsetCommitToFlashInterval ensures that no value is present for CommitToFlashInterval, not even an explicit nil
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) UnsetCommitToFlashInterval() {
	o.CommitToFlashInterval.Unset()
}

// GetRocev2 returns the Rocev2 field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetRocev2() bool {
	if o == nil || IsNil(o.Rocev2) {
		var ret bool
		return ret
	}
	return *o.Rocev2
}

// GetRocev2Ok returns a tuple with the Rocev2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetRocev2Ok() (*bool, bool) {
	if o == nil || IsNil(o.Rocev2) {
		return nil, false
	}
	return o.Rocev2, true
}

// HasRocev2 returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasRocev2() bool {
	if o != nil && !IsNil(o.Rocev2) {
		return true
	}

	return false
}

// SetRocev2 gets a reference to the given bool and assigns it to the Rocev2 field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetRocev2(v bool) {
	o.Rocev2 = &v
}

// GetCutThroughSwitching returns the CutThroughSwitching field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetCutThroughSwitching() bool {
	if o == nil || IsNil(o.CutThroughSwitching) {
		var ret bool
		return ret
	}
	return *o.CutThroughSwitching
}

// GetCutThroughSwitchingOk returns a tuple with the CutThroughSwitching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetCutThroughSwitchingOk() (*bool, bool) {
	if o == nil || IsNil(o.CutThroughSwitching) {
		return nil, false
	}
	return o.CutThroughSwitching, true
}

// HasCutThroughSwitching returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasCutThroughSwitching() bool {
	if o != nil && !IsNil(o.CutThroughSwitching) {
		return true
	}

	return false
}

// SetCutThroughSwitching gets a reference to the given bool and assigns it to the CutThroughSwitching field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetCutThroughSwitching(v bool) {
	o.CutThroughSwitching = &v
}

// GetObjectProperties returns the ObjectProperties field value if set, zero value otherwise.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetObjectProperties() ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties {
	if o == nil || IsNil(o.ObjectProperties) {
		var ret ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties
		return ret
	}
	return *o.ObjectProperties
}

// GetObjectPropertiesOk returns a tuple with the ObjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) GetObjectPropertiesOk() (*ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties, bool) {
	if o == nil || IsNil(o.ObjectProperties) {
		return nil, false
	}
	return o.ObjectProperties, true
}

// HasObjectProperties returns a boolean if a field has been set.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) HasObjectProperties() bool {
	if o != nil && !IsNil(o.ObjectProperties) {
		return true
	}

	return false
}

// SetObjectProperties gets a reference to the given ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties and assigns it to the ObjectProperties field.
func (o *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) SetObjectProperties(v ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties) {
	o.ObjectProperties = &v
}

func (o ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.UsageThreshold) {
		toSerialize["usage_threshold"] = o.UsageThreshold
	}
	if !IsNil(o.ExternalBatteryPowerAvailable) {
		toSerialize["external_battery_power_available"] = o.ExternalBatteryPowerAvailable
	}
	if !IsNil(o.ExternalPowerAvailable) {
		toSerialize["external_power_available"] = o.ExternalPowerAvailable
	}
	if o.SecurityAuditInterval.IsSet() {
		toSerialize["security_audit_interval"] = o.SecurityAuditInterval.Get()
	}
	if o.CommitToFlashInterval.IsSet() {
		toSerialize["commit_to_flash_interval"] = o.CommitToFlashInterval.Get()
	}
	if !IsNil(o.Rocev2) {
		toSerialize["rocev2"] = o.Rocev2
	}
	if !IsNil(o.CutThroughSwitching) {
		toSerialize["cut_through_switching"] = o.CutThroughSwitching
	}
	if !IsNil(o.ObjectProperties) {
		toSerialize["object_properties"] = o.ObjectProperties
	}
	return toSerialize, nil
}

type NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName struct {
	value *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName
	isSet bool
}

func (v NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) Get() *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName {
	return v.value
}

func (v *NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) Set(val *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName(val *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) *NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName {
	return &NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName{value: val, isSet: true}
}

func (v NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestEthDeviceProfilesEthDeviceProfilesName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


