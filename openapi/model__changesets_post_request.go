/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangesetsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangesetsPostRequest{}

// ChangesetsPostRequest struct for ChangesetsPostRequest
type ChangesetsPostRequest struct {
	// Create or commit the changeset
	Commit *bool `json:"commit,omitempty"`
	// Changeset name to create or commit
	ChangesetName string `json:"changeset_name"`
}

type _ChangesetsPostRequest ChangesetsPostRequest

// NewChangesetsPostRequest instantiates a new ChangesetsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangesetsPostRequest(changesetName string) *ChangesetsPostRequest {
	this := ChangesetsPostRequest{}
	var commit bool = false
	this.Commit = &commit
	this.ChangesetName = changesetName
	return &this
}

// NewChangesetsPostRequestWithDefaults instantiates a new ChangesetsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangesetsPostRequestWithDefaults() *ChangesetsPostRequest {
	this := ChangesetsPostRequest{}
	var commit bool = false
	this.Commit = &commit
	return &this
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *ChangesetsPostRequest) GetCommit() bool {
	if o == nil || IsNil(o.Commit) {
		var ret bool
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangesetsPostRequest) GetCommitOk() (*bool, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *ChangesetsPostRequest) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given bool and assigns it to the Commit field.
func (o *ChangesetsPostRequest) SetCommit(v bool) {
	o.Commit = &v
}

// GetChangesetName returns the ChangesetName field value
func (o *ChangesetsPostRequest) GetChangesetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangesetName
}

// GetChangesetNameOk returns a tuple with the ChangesetName field value
// and a boolean to check if the value has been set.
func (o *ChangesetsPostRequest) GetChangesetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangesetName, true
}

// SetChangesetName sets field value
func (o *ChangesetsPostRequest) SetChangesetName(v string) {
	o.ChangesetName = v
}

func (o ChangesetsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangesetsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	toSerialize["changeset_name"] = o.ChangesetName
	return toSerialize, nil
}

func (o *ChangesetsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"changeset_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangesetsPostRequest := _ChangesetsPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangesetsPostRequest)

	if err != nil {
		return err
	}

	*o = ChangesetsPostRequest(varChangesetsPostRequest)

	return err
}

type NullableChangesetsPostRequest struct {
	value *ChangesetsPostRequest
	isSet bool
}

func (v NullableChangesetsPostRequest) Get() *ChangesetsPostRequest {
	return v.value
}

func (v *NullableChangesetsPostRequest) Set(val *ChangesetsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangesetsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangesetsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangesetsPostRequest(val *ChangesetsPostRequest) *NullableChangesetsPostRequest {
	return &NullableChangesetsPostRequest{value: val, isSet: true}
}

func (v NullableChangesetsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangesetsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


