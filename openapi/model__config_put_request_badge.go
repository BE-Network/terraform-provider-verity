/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestBadge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestBadge{}

// ConfigPutRequestBadge struct for ConfigPutRequestBadge
type ConfigPutRequestBadge struct {
	BadgeName *ConfigPutRequestBadgeBadgeName `json:"badge_name,omitempty"`
}

// NewConfigPutRequestBadge instantiates a new ConfigPutRequestBadge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestBadge() *ConfigPutRequestBadge {
	this := ConfigPutRequestBadge{}
	return &this
}

// NewConfigPutRequestBadgeWithDefaults instantiates a new ConfigPutRequestBadge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestBadgeWithDefaults() *ConfigPutRequestBadge {
	this := ConfigPutRequestBadge{}
	return &this
}

// GetBadgeName returns the BadgeName field value if set, zero value otherwise.
func (o *ConfigPutRequestBadge) GetBadgeName() ConfigPutRequestBadgeBadgeName {
	if o == nil || IsNil(o.BadgeName) {
		var ret ConfigPutRequestBadgeBadgeName
		return ret
	}
	return *o.BadgeName
}

// GetBadgeNameOk returns a tuple with the BadgeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestBadge) GetBadgeNameOk() (*ConfigPutRequestBadgeBadgeName, bool) {
	if o == nil || IsNil(o.BadgeName) {
		return nil, false
	}
	return o.BadgeName, true
}

// HasBadgeName returns a boolean if a field has been set.
func (o *ConfigPutRequestBadge) HasBadgeName() bool {
	if o != nil && !IsNil(o.BadgeName) {
		return true
	}

	return false
}

// SetBadgeName gets a reference to the given ConfigPutRequestBadgeBadgeName and assigns it to the BadgeName field.
func (o *ConfigPutRequestBadge) SetBadgeName(v ConfigPutRequestBadgeBadgeName) {
	o.BadgeName = &v
}

func (o ConfigPutRequestBadge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestBadge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BadgeName) {
		toSerialize["badge_name"] = o.BadgeName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestBadge struct {
	value *ConfigPutRequestBadge
	isSet bool
}

func (v NullableConfigPutRequestBadge) Get() *ConfigPutRequestBadge {
	return v.value
}

func (v *NullableConfigPutRequestBadge) Set(val *ConfigPutRequestBadge) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestBadge) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestBadge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestBadge(val *ConfigPutRequestBadge) *NullableConfigPutRequestBadge {
	return &NullableConfigPutRequestBadge{value: val, isSet: true}
}

func (v NullableConfigPutRequestBadge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestBadge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


