/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BadgesPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BadgesPutRequest{}

// BadgesPutRequest struct for BadgesPutRequest
type BadgesPutRequest struct {
	Badge *map[string]ConfigPutRequestBadgeBadgeName `json:"badge,omitempty"`
}

// NewBadgesPutRequest instantiates a new BadgesPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadgesPutRequest() *BadgesPutRequest {
	this := BadgesPutRequest{}
	return &this
}

// NewBadgesPutRequestWithDefaults instantiates a new BadgesPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadgesPutRequestWithDefaults() *BadgesPutRequest {
	this := BadgesPutRequest{}
	return &this
}

// GetBadge returns the Badge field value if set, zero value otherwise.
func (o *BadgesPutRequest) GetBadge() map[string]ConfigPutRequestBadgeBadgeName {
	if o == nil || IsNil(o.Badge) {
		var ret map[string]ConfigPutRequestBadgeBadgeName
		return ret
	}
	return *o.Badge
}

// GetBadgeOk returns a tuple with the Badge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadgesPutRequest) GetBadgeOk() (*map[string]ConfigPutRequestBadgeBadgeName, bool) {
	if o == nil || IsNil(o.Badge) {
		return nil, false
	}
	return o.Badge, true
}

// HasBadge returns a boolean if a field has been set.
func (o *BadgesPutRequest) HasBadge() bool {
	if o != nil && !IsNil(o.Badge) {
		return true
	}

	return false
}

// SetBadge gets a reference to the given map[string]ConfigPutRequestBadgeBadgeName and assigns it to the Badge field.
func (o *BadgesPutRequest) SetBadge(v map[string]ConfigPutRequestBadgeBadgeName) {
	o.Badge = &v
}

func (o BadgesPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BadgesPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Badge) {
		toSerialize["badge"] = o.Badge
	}
	return toSerialize, nil
}

type NullableBadgesPutRequest struct {
	value *BadgesPutRequest
	isSet bool
}

func (v NullableBadgesPutRequest) Get() *BadgesPutRequest {
	return v.value
}

func (v *NullableBadgesPutRequest) Set(val *BadgesPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBadgesPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBadgesPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadgesPutRequest(val *BadgesPutRequest) *NullableBadgesPutRequest {
	return &NullableBadgesPutRequest{value: val, isSet: true}
}

func (v NullableBadgesPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadgesPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


