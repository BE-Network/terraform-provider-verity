/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestIpv4PrefixList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestIpv4PrefixList{}

// ConfigPutRequestIpv4PrefixList struct for ConfigPutRequestIpv4PrefixList
type ConfigPutRequestIpv4PrefixList struct {
	Ipv4PrefixListName *ConfigPutRequestIpv4PrefixListIpv4PrefixListName `json:"ipv4_prefix_list_name,omitempty"`
}

// NewConfigPutRequestIpv4PrefixList instantiates a new ConfigPutRequestIpv4PrefixList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestIpv4PrefixList() *ConfigPutRequestIpv4PrefixList {
	this := ConfigPutRequestIpv4PrefixList{}
	return &this
}

// NewConfigPutRequestIpv4PrefixListWithDefaults instantiates a new ConfigPutRequestIpv4PrefixList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestIpv4PrefixListWithDefaults() *ConfigPutRequestIpv4PrefixList {
	this := ConfigPutRequestIpv4PrefixList{}
	return &this
}

// GetIpv4PrefixListName returns the Ipv4PrefixListName field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4PrefixList) GetIpv4PrefixListName() ConfigPutRequestIpv4PrefixListIpv4PrefixListName {
	if o == nil || IsNil(o.Ipv4PrefixListName) {
		var ret ConfigPutRequestIpv4PrefixListIpv4PrefixListName
		return ret
	}
	return *o.Ipv4PrefixListName
}

// GetIpv4PrefixListNameOk returns a tuple with the Ipv4PrefixListName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4PrefixList) GetIpv4PrefixListNameOk() (*ConfigPutRequestIpv4PrefixListIpv4PrefixListName, bool) {
	if o == nil || IsNil(o.Ipv4PrefixListName) {
		return nil, false
	}
	return o.Ipv4PrefixListName, true
}

// HasIpv4PrefixListName returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4PrefixList) HasIpv4PrefixListName() bool {
	if o != nil && !IsNil(o.Ipv4PrefixListName) {
		return true
	}

	return false
}

// SetIpv4PrefixListName gets a reference to the given ConfigPutRequestIpv4PrefixListIpv4PrefixListName and assigns it to the Ipv4PrefixListName field.
func (o *ConfigPutRequestIpv4PrefixList) SetIpv4PrefixListName(v ConfigPutRequestIpv4PrefixListIpv4PrefixListName) {
	o.Ipv4PrefixListName = &v
}

func (o ConfigPutRequestIpv4PrefixList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestIpv4PrefixList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4PrefixListName) {
		toSerialize["ipv4_prefix_list_name"] = o.Ipv4PrefixListName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestIpv4PrefixList struct {
	value *ConfigPutRequestIpv4PrefixList
	isSet bool
}

func (v NullableConfigPutRequestIpv4PrefixList) Get() *ConfigPutRequestIpv4PrefixList {
	return v.value
}

func (v *NullableConfigPutRequestIpv4PrefixList) Set(val *ConfigPutRequestIpv4PrefixList) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestIpv4PrefixList) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestIpv4PrefixList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestIpv4PrefixList(val *ConfigPutRequestIpv4PrefixList) *NullableConfigPutRequestIpv4PrefixList {
	return &NullableConfigPutRequestIpv4PrefixList{value: val, isSet: true}
}

func (v NullableConfigPutRequestIpv4PrefixList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestIpv4PrefixList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


