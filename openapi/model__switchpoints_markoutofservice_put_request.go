/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwitchpointsMarkoutofservicePutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchpointsMarkoutofservicePutRequest{}

// SwitchpointsMarkoutofservicePutRequest struct for SwitchpointsMarkoutofservicePutRequest
type SwitchpointsMarkoutofservicePutRequest struct {
	// Mark all devices out of service or back in service
	Mos *bool `json:"mos,omitempty"`
	DeviceNames []string `json:"device_names"`
}

type _SwitchpointsMarkoutofservicePutRequest SwitchpointsMarkoutofservicePutRequest

// NewSwitchpointsMarkoutofservicePutRequest instantiates a new SwitchpointsMarkoutofservicePutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchpointsMarkoutofservicePutRequest(deviceNames []string) *SwitchpointsMarkoutofservicePutRequest {
	this := SwitchpointsMarkoutofservicePutRequest{}
	var mos bool = true
	this.Mos = &mos
	this.DeviceNames = deviceNames
	return &this
}

// NewSwitchpointsMarkoutofservicePutRequestWithDefaults instantiates a new SwitchpointsMarkoutofservicePutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchpointsMarkoutofservicePutRequestWithDefaults() *SwitchpointsMarkoutofservicePutRequest {
	this := SwitchpointsMarkoutofservicePutRequest{}
	var mos bool = true
	this.Mos = &mos
	return &this
}

// GetMos returns the Mos field value if set, zero value otherwise.
func (o *SwitchpointsMarkoutofservicePutRequest) GetMos() bool {
	if o == nil || IsNil(o.Mos) {
		var ret bool
		return ret
	}
	return *o.Mos
}

// GetMosOk returns a tuple with the Mos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchpointsMarkoutofservicePutRequest) GetMosOk() (*bool, bool) {
	if o == nil || IsNil(o.Mos) {
		return nil, false
	}
	return o.Mos, true
}

// HasMos returns a boolean if a field has been set.
func (o *SwitchpointsMarkoutofservicePutRequest) HasMos() bool {
	if o != nil && !IsNil(o.Mos) {
		return true
	}

	return false
}

// SetMos gets a reference to the given bool and assigns it to the Mos field.
func (o *SwitchpointsMarkoutofservicePutRequest) SetMos(v bool) {
	o.Mos = &v
}

// GetDeviceNames returns the DeviceNames field value
func (o *SwitchpointsMarkoutofservicePutRequest) GetDeviceNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DeviceNames
}

// GetDeviceNamesOk returns a tuple with the DeviceNames field value
// and a boolean to check if the value has been set.
func (o *SwitchpointsMarkoutofservicePutRequest) GetDeviceNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceNames, true
}

// SetDeviceNames sets field value
func (o *SwitchpointsMarkoutofservicePutRequest) SetDeviceNames(v []string) {
	o.DeviceNames = v
}

func (o SwitchpointsMarkoutofservicePutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchpointsMarkoutofservicePutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mos) {
		toSerialize["mos"] = o.Mos
	}
	toSerialize["device_names"] = o.DeviceNames
	return toSerialize, nil
}

func (o *SwitchpointsMarkoutofservicePutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_names",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwitchpointsMarkoutofservicePutRequest := _SwitchpointsMarkoutofservicePutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwitchpointsMarkoutofservicePutRequest)

	if err != nil {
		return err
	}

	*o = SwitchpointsMarkoutofservicePutRequest(varSwitchpointsMarkoutofservicePutRequest)

	return err
}

type NullableSwitchpointsMarkoutofservicePutRequest struct {
	value *SwitchpointsMarkoutofservicePutRequest
	isSet bool
}

func (v NullableSwitchpointsMarkoutofservicePutRequest) Get() *SwitchpointsMarkoutofservicePutRequest {
	return v.value
}

func (v *NullableSwitchpointsMarkoutofservicePutRequest) Set(val *SwitchpointsMarkoutofservicePutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchpointsMarkoutofservicePutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchpointsMarkoutofservicePutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchpointsMarkoutofservicePutRequest(val *SwitchpointsMarkoutofservicePutRequest) *NullableSwitchpointsMarkoutofservicePutRequest {
	return &NullableSwitchpointsMarkoutofservicePutRequest{value: val, isSet: true}
}

func (v NullableSwitchpointsMarkoutofservicePutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchpointsMarkoutofservicePutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


