/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SitesPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SitesPatchRequest{}

// SitesPatchRequest struct for SitesPatchRequest
type SitesPatchRequest struct {
	Site *map[string]SitesPatchRequestSiteValue `json:"site,omitempty"`
}

// NewSitesPatchRequest instantiates a new SitesPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSitesPatchRequest() *SitesPatchRequest {
	this := SitesPatchRequest{}
	return &this
}

// NewSitesPatchRequestWithDefaults instantiates a new SitesPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSitesPatchRequestWithDefaults() *SitesPatchRequest {
	this := SitesPatchRequest{}
	return &this
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *SitesPatchRequest) GetSite() map[string]SitesPatchRequestSiteValue {
	if o == nil || IsNil(o.Site) {
		var ret map[string]SitesPatchRequestSiteValue
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitesPatchRequest) GetSiteOk() (*map[string]SitesPatchRequestSiteValue, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *SitesPatchRequest) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given map[string]SitesPatchRequestSiteValue and assigns it to the Site field.
func (o *SitesPatchRequest) SetSite(v map[string]SitesPatchRequestSiteValue) {
	o.Site = &v
}

func (o SitesPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SitesPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	return toSerialize, nil
}

type NullableSitesPatchRequest struct {
	value *SitesPatchRequest
	isSet bool
}

func (v NullableSitesPatchRequest) Get() *SitesPatchRequest {
	return v.value
}

func (v *NullableSitesPatchRequest) Set(val *SitesPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSitesPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSitesPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSitesPatchRequest(val *SitesPatchRequest) *NullableSitesPatchRequest {
	return &NullableSitesPatchRequest{value: val, isSet: true}
}

func (v NullableSitesPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSitesPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


