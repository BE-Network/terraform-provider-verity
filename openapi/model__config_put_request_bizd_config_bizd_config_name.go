/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestBizdConfigBizdConfigName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestBizdConfigBizdConfigName{}

// ConfigPutRequestBizdConfigBizdConfigName struct for ConfigPutRequestBizdConfigBizdConfigName
type ConfigPutRequestBizdConfigBizdConfigName struct {
	// Object Name. Must be unique.
	Name *string `json:"name,omitempty"`
	// Enable object.
	Enable *bool `json:"enable,omitempty"`
	// when true, switches system-wide do not apply the configuration writen by bizd
	GlobalReadOnly *bool `json:"global_read_only,omitempty"`
	// when true, switches system-wide have their firmware upgrades disabled
	GlobalImageUpdatesDisable *bool `json:"global_image_updates_disable,omitempty"`
	ObjectProperties map[string]interface{} `json:"object_properties,omitempty"`
}

// NewConfigPutRequestBizdConfigBizdConfigName instantiates a new ConfigPutRequestBizdConfigBizdConfigName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestBizdConfigBizdConfigName() *ConfigPutRequestBizdConfigBizdConfigName {
	this := ConfigPutRequestBizdConfigBizdConfigName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var globalReadOnly bool = true
	this.GlobalReadOnly = &globalReadOnly
	var globalImageUpdatesDisable bool = true
	this.GlobalImageUpdatesDisable = &globalImageUpdatesDisable
	return &this
}

// NewConfigPutRequestBizdConfigBizdConfigNameWithDefaults instantiates a new ConfigPutRequestBizdConfigBizdConfigName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestBizdConfigBizdConfigNameWithDefaults() *ConfigPutRequestBizdConfigBizdConfigName {
	this := ConfigPutRequestBizdConfigBizdConfigName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var globalReadOnly bool = true
	this.GlobalReadOnly = &globalReadOnly
	var globalImageUpdatesDisable bool = true
	this.GlobalImageUpdatesDisable = &globalImageUpdatesDisable
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigPutRequestBizdConfigBizdConfigName) SetName(v string) {
	o.Name = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ConfigPutRequestBizdConfigBizdConfigName) SetEnable(v bool) {
	o.Enable = &v
}

// GetGlobalReadOnly returns the GlobalReadOnly field value if set, zero value otherwise.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetGlobalReadOnly() bool {
	if o == nil || IsNil(o.GlobalReadOnly) {
		var ret bool
		return ret
	}
	return *o.GlobalReadOnly
}

// GetGlobalReadOnlyOk returns a tuple with the GlobalReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetGlobalReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalReadOnly) {
		return nil, false
	}
	return o.GlobalReadOnly, true
}

// HasGlobalReadOnly returns a boolean if a field has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) HasGlobalReadOnly() bool {
	if o != nil && !IsNil(o.GlobalReadOnly) {
		return true
	}

	return false
}

// SetGlobalReadOnly gets a reference to the given bool and assigns it to the GlobalReadOnly field.
func (o *ConfigPutRequestBizdConfigBizdConfigName) SetGlobalReadOnly(v bool) {
	o.GlobalReadOnly = &v
}

// GetGlobalImageUpdatesDisable returns the GlobalImageUpdatesDisable field value if set, zero value otherwise.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetGlobalImageUpdatesDisable() bool {
	if o == nil || IsNil(o.GlobalImageUpdatesDisable) {
		var ret bool
		return ret
	}
	return *o.GlobalImageUpdatesDisable
}

// GetGlobalImageUpdatesDisableOk returns a tuple with the GlobalImageUpdatesDisable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetGlobalImageUpdatesDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalImageUpdatesDisable) {
		return nil, false
	}
	return o.GlobalImageUpdatesDisable, true
}

// HasGlobalImageUpdatesDisable returns a boolean if a field has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) HasGlobalImageUpdatesDisable() bool {
	if o != nil && !IsNil(o.GlobalImageUpdatesDisable) {
		return true
	}

	return false
}

// SetGlobalImageUpdatesDisable gets a reference to the given bool and assigns it to the GlobalImageUpdatesDisable field.
func (o *ConfigPutRequestBizdConfigBizdConfigName) SetGlobalImageUpdatesDisable(v bool) {
	o.GlobalImageUpdatesDisable = &v
}

// GetObjectProperties returns the ObjectProperties field value if set, zero value otherwise.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetObjectProperties() map[string]interface{} {
	if o == nil || IsNil(o.ObjectProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.ObjectProperties
}

// GetObjectPropertiesOk returns a tuple with the ObjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) GetObjectPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ObjectProperties) {
		return map[string]interface{}{}, false
	}
	return o.ObjectProperties, true
}

// HasObjectProperties returns a boolean if a field has been set.
func (o *ConfigPutRequestBizdConfigBizdConfigName) HasObjectProperties() bool {
	if o != nil && !IsNil(o.ObjectProperties) {
		return true
	}

	return false
}

// SetObjectProperties gets a reference to the given map[string]interface{} and assigns it to the ObjectProperties field.
func (o *ConfigPutRequestBizdConfigBizdConfigName) SetObjectProperties(v map[string]interface{}) {
	o.ObjectProperties = v
}

func (o ConfigPutRequestBizdConfigBizdConfigName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestBizdConfigBizdConfigName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.GlobalReadOnly) {
		toSerialize["global_read_only"] = o.GlobalReadOnly
	}
	if !IsNil(o.GlobalImageUpdatesDisable) {
		toSerialize["global_image_updates_disable"] = o.GlobalImageUpdatesDisable
	}
	if !IsNil(o.ObjectProperties) {
		toSerialize["object_properties"] = o.ObjectProperties
	}
	return toSerialize, nil
}

type NullableConfigPutRequestBizdConfigBizdConfigName struct {
	value *ConfigPutRequestBizdConfigBizdConfigName
	isSet bool
}

func (v NullableConfigPutRequestBizdConfigBizdConfigName) Get() *ConfigPutRequestBizdConfigBizdConfigName {
	return v.value
}

func (v *NullableConfigPutRequestBizdConfigBizdConfigName) Set(val *ConfigPutRequestBizdConfigBizdConfigName) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestBizdConfigBizdConfigName) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestBizdConfigBizdConfigName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestBizdConfigBizdConfigName(val *ConfigPutRequestBizdConfigBizdConfigName) *NullableConfigPutRequestBizdConfigBizdConfigName {
	return &NullableConfigPutRequestBizdConfigBizdConfigName{value: val, isSet: true}
}

func (v NullableConfigPutRequestBizdConfigBizdConfigName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestBizdConfigBizdConfigName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


