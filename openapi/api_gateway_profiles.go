/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// GatewayProfilesAPIService GatewayProfilesAPI service
type GatewayProfilesAPIService service

type ApiGatewayprofilesDeleteRequest struct {
	ctx context.Context
	ApiService *GatewayProfilesAPIService
	profileName *[]string
	changesetName *string
}

func (r ApiGatewayprofilesDeleteRequest) ProfileName(profileName []string) ApiGatewayprofilesDeleteRequest {
	r.profileName = &profileName
	return r
}

func (r ApiGatewayprofilesDeleteRequest) ChangesetName(changesetName string) ApiGatewayprofilesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiGatewayprofilesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.GatewayprofilesDeleteExecute(r)
}

/*
GatewayprofilesDelete Delete Gateway Profile

Deletes an existing Gateway Profile from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGatewayprofilesDeleteRequest
*/
func (a *GatewayProfilesAPIService) GatewayprofilesDelete(ctx context.Context) ApiGatewayprofilesDeleteRequest {
	return ApiGatewayprofilesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GatewayProfilesAPIService) GatewayprofilesDeleteExecute(r ApiGatewayprofilesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayProfilesAPIService.GatewayprofilesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gatewayprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.profileName == nil {
		return nil, reportError("profileName is required and must be specified")
	}

	{
		t := *r.profileName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profile_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profile_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGatewayprofilesGetRequest struct {
	ctx context.Context
	ApiService *GatewayProfilesAPIService
	profileName *string
	includeData *bool
}

func (r ApiGatewayprofilesGetRequest) ProfileName(profileName string) ApiGatewayprofilesGetRequest {
	r.profileName = &profileName
	return r
}

func (r ApiGatewayprofilesGetRequest) IncludeData(includeData bool) ApiGatewayprofilesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiGatewayprofilesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GatewayprofilesGetExecute(r)
}

/*
GatewayprofilesGet Get all Gateway Profiles

Downloads all Gateway Profiles from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGatewayprofilesGetRequest
*/
func (a *GatewayProfilesAPIService) GatewayprofilesGet(ctx context.Context) ApiGatewayprofilesGetRequest {
	return ApiGatewayprofilesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GatewayProfilesAPIService) GatewayprofilesGetExecute(r ApiGatewayprofilesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayProfilesAPIService.GatewayprofilesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gatewayprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile_name", r.profileName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGatewayprofilesPatchRequest struct {
	ctx context.Context
	ApiService *GatewayProfilesAPIService
	changesetName *string
	gatewayprofilesPutRequest *GatewayprofilesPutRequest
}

func (r ApiGatewayprofilesPatchRequest) ChangesetName(changesetName string) ApiGatewayprofilesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiGatewayprofilesPatchRequest) GatewayprofilesPutRequest(gatewayprofilesPutRequest GatewayprofilesPutRequest) ApiGatewayprofilesPatchRequest {
	r.gatewayprofilesPutRequest = &gatewayprofilesPutRequest
	return r
}

func (r ApiGatewayprofilesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.GatewayprofilesPatchExecute(r)
}

/*
GatewayprofilesPatch Update Gateway Profile

Update Gateway Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGatewayprofilesPatchRequest
*/
func (a *GatewayProfilesAPIService) GatewayprofilesPatch(ctx context.Context) ApiGatewayprofilesPatchRequest {
	return ApiGatewayprofilesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GatewayProfilesAPIService) GatewayprofilesPatchExecute(r ApiGatewayprofilesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayProfilesAPIService.GatewayprofilesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gatewayprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gatewayprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGatewayprofilesPutRequest struct {
	ctx context.Context
	ApiService *GatewayProfilesAPIService
	changesetName *string
	gatewayprofilesPutRequest *GatewayprofilesPutRequest
}

func (r ApiGatewayprofilesPutRequest) ChangesetName(changesetName string) ApiGatewayprofilesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiGatewayprofilesPutRequest) GatewayprofilesPutRequest(gatewayprofilesPutRequest GatewayprofilesPutRequest) ApiGatewayprofilesPutRequest {
	r.gatewayprofilesPutRequest = &gatewayprofilesPutRequest
	return r
}

func (r ApiGatewayprofilesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.GatewayprofilesPutExecute(r)
}

/*
GatewayprofilesPut Create Gateway Profile

Create Gateway Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGatewayprofilesPutRequest
*/
func (a *GatewayProfilesAPIService) GatewayprofilesPut(ctx context.Context) ApiGatewayprofilesPutRequest {
	return ApiGatewayprofilesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GatewayProfilesAPIService) GatewayprofilesPutExecute(r ApiGatewayprofilesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayProfilesAPIService.GatewayprofilesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gatewayprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gatewayprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
