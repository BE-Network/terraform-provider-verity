/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestFeatureFlag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestFeatureFlag{}

// ConfigPutRequestFeatureFlag struct for ConfigPutRequestFeatureFlag
type ConfigPutRequestFeatureFlag struct {
	FeatureFlagName *ConfigPutRequestFeatureFlagFeatureFlagName `json:"feature_flag_name,omitempty"`
}

// NewConfigPutRequestFeatureFlag instantiates a new ConfigPutRequestFeatureFlag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestFeatureFlag() *ConfigPutRequestFeatureFlag {
	this := ConfigPutRequestFeatureFlag{}
	return &this
}

// NewConfigPutRequestFeatureFlagWithDefaults instantiates a new ConfigPutRequestFeatureFlag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestFeatureFlagWithDefaults() *ConfigPutRequestFeatureFlag {
	this := ConfigPutRequestFeatureFlag{}
	return &this
}

// GetFeatureFlagName returns the FeatureFlagName field value if set, zero value otherwise.
func (o *ConfigPutRequestFeatureFlag) GetFeatureFlagName() ConfigPutRequestFeatureFlagFeatureFlagName {
	if o == nil || IsNil(o.FeatureFlagName) {
		var ret ConfigPutRequestFeatureFlagFeatureFlagName
		return ret
	}
	return *o.FeatureFlagName
}

// GetFeatureFlagNameOk returns a tuple with the FeatureFlagName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestFeatureFlag) GetFeatureFlagNameOk() (*ConfigPutRequestFeatureFlagFeatureFlagName, bool) {
	if o == nil || IsNil(o.FeatureFlagName) {
		return nil, false
	}
	return o.FeatureFlagName, true
}

// HasFeatureFlagName returns a boolean if a field has been set.
func (o *ConfigPutRequestFeatureFlag) HasFeatureFlagName() bool {
	if o != nil && !IsNil(o.FeatureFlagName) {
		return true
	}

	return false
}

// SetFeatureFlagName gets a reference to the given ConfigPutRequestFeatureFlagFeatureFlagName and assigns it to the FeatureFlagName field.
func (o *ConfigPutRequestFeatureFlag) SetFeatureFlagName(v ConfigPutRequestFeatureFlagFeatureFlagName) {
	o.FeatureFlagName = &v
}

func (o ConfigPutRequestFeatureFlag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestFeatureFlag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeatureFlagName) {
		toSerialize["feature_flag_name"] = o.FeatureFlagName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestFeatureFlag struct {
	value *ConfigPutRequestFeatureFlag
	isSet bool
}

func (v NullableConfigPutRequestFeatureFlag) Get() *ConfigPutRequestFeatureFlag {
	return v.value
}

func (v *NullableConfigPutRequestFeatureFlag) Set(val *ConfigPutRequestFeatureFlag) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestFeatureFlag) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestFeatureFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestFeatureFlag(val *ConfigPutRequestFeatureFlag) *NullableConfigPutRequestFeatureFlag {
	return &NullableConfigPutRequestFeatureFlag{value: val, isSet: true}
}

func (v NullableConfigPutRequestFeatureFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestFeatureFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


