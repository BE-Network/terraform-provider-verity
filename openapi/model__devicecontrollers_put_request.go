/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DevicecontrollersPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicecontrollersPutRequest{}

// DevicecontrollersPutRequest struct for DevicecontrollersPutRequest
type DevicecontrollersPutRequest struct {
	DeviceController *map[string]DevicecontrollersPutRequestDeviceControllerValue `json:"device_controller,omitempty"`
}

// NewDevicecontrollersPutRequest instantiates a new DevicecontrollersPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicecontrollersPutRequest() *DevicecontrollersPutRequest {
	this := DevicecontrollersPutRequest{}
	return &this
}

// NewDevicecontrollersPutRequestWithDefaults instantiates a new DevicecontrollersPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicecontrollersPutRequestWithDefaults() *DevicecontrollersPutRequest {
	this := DevicecontrollersPutRequest{}
	return &this
}

// GetDeviceController returns the DeviceController field value if set, zero value otherwise.
func (o *DevicecontrollersPutRequest) GetDeviceController() map[string]DevicecontrollersPutRequestDeviceControllerValue {
	if o == nil || IsNil(o.DeviceController) {
		var ret map[string]DevicecontrollersPutRequestDeviceControllerValue
		return ret
	}
	return *o.DeviceController
}

// GetDeviceControllerOk returns a tuple with the DeviceController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicecontrollersPutRequest) GetDeviceControllerOk() (*map[string]DevicecontrollersPutRequestDeviceControllerValue, bool) {
	if o == nil || IsNil(o.DeviceController) {
		return nil, false
	}
	return o.DeviceController, true
}

// HasDeviceController returns a boolean if a field has been set.
func (o *DevicecontrollersPutRequest) HasDeviceController() bool {
	if o != nil && !IsNil(o.DeviceController) {
		return true
	}

	return false
}

// SetDeviceController gets a reference to the given map[string]DevicecontrollersPutRequestDeviceControllerValue and assigns it to the DeviceController field.
func (o *DevicecontrollersPutRequest) SetDeviceController(v map[string]DevicecontrollersPutRequestDeviceControllerValue) {
	o.DeviceController = &v
}

func (o DevicecontrollersPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicecontrollersPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceController) {
		toSerialize["device_controller"] = o.DeviceController
	}
	return toSerialize, nil
}

type NullableDevicecontrollersPutRequest struct {
	value *DevicecontrollersPutRequest
	isSet bool
}

func (v NullableDevicecontrollersPutRequest) Get() *DevicecontrollersPutRequest {
	return v.value
}

func (v *NullableDevicecontrollersPutRequest) Set(val *DevicecontrollersPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicecontrollersPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicecontrollersPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicecontrollersPutRequest(val *DevicecontrollersPutRequest) *NullableDevicecontrollersPutRequest {
	return &NullableDevicecontrollersPutRequest{value: val, isSet: true}
}

func (v NullableDevicecontrollersPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicecontrollersPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


