/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// VoicePortProfilesAPIService VoicePortProfilesAPI service
type VoicePortProfilesAPIService service

type ApiVoiceportprofilesDeleteRequest struct {
	ctx context.Context
	ApiService *VoicePortProfilesAPIService
	voicePortProfileName *[]string
	changesetName *string
}

func (r ApiVoiceportprofilesDeleteRequest) VoicePortProfileName(voicePortProfileName []string) ApiVoiceportprofilesDeleteRequest {
	r.voicePortProfileName = &voicePortProfileName
	return r
}

func (r ApiVoiceportprofilesDeleteRequest) ChangesetName(changesetName string) ApiVoiceportprofilesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiVoiceportprofilesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.VoiceportprofilesDeleteExecute(r)
}

/*
VoiceportprofilesDelete Delete Voice-Port Profile

Deletes an existing Voice-Port Profile from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVoiceportprofilesDeleteRequest
*/
func (a *VoicePortProfilesAPIService) VoiceportprofilesDelete(ctx context.Context) ApiVoiceportprofilesDeleteRequest {
	return ApiVoiceportprofilesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VoicePortProfilesAPIService) VoiceportprofilesDeleteExecute(r ApiVoiceportprofilesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoicePortProfilesAPIService.VoiceportprofilesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/voiceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.voicePortProfileName == nil {
		return nil, reportError("voicePortProfileName is required and must be specified")
	}

	{
		t := *r.voicePortProfileName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "voice_port_profile_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "voice_port_profile_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVoiceportprofilesGetRequest struct {
	ctx context.Context
	ApiService *VoicePortProfilesAPIService
	voicePortProfileName *string
	includeData *bool
	changesetName *string
}

func (r ApiVoiceportprofilesGetRequest) VoicePortProfileName(voicePortProfileName string) ApiVoiceportprofilesGetRequest {
	r.voicePortProfileName = &voicePortProfileName
	return r
}

func (r ApiVoiceportprofilesGetRequest) IncludeData(includeData bool) ApiVoiceportprofilesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiVoiceportprofilesGetRequest) ChangesetName(changesetName string) ApiVoiceportprofilesGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiVoiceportprofilesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.VoiceportprofilesGetExecute(r)
}

/*
VoiceportprofilesGet Get all Voice-Port Profiles

Retrieves all Voice-Port Profiles from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVoiceportprofilesGetRequest
*/
func (a *VoicePortProfilesAPIService) VoiceportprofilesGet(ctx context.Context) ApiVoiceportprofilesGetRequest {
	return ApiVoiceportprofilesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VoicePortProfilesAPIService) VoiceportprofilesGetExecute(r ApiVoiceportprofilesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoicePortProfilesAPIService.VoiceportprofilesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/voiceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.voicePortProfileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "voice_port_profile_name", r.voicePortProfileName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVoiceportprofilesPatchRequest struct {
	ctx context.Context
	ApiService *VoicePortProfilesAPIService
	changesetName *string
	voiceportprofilesPutRequest *VoiceportprofilesPutRequest
}

func (r ApiVoiceportprofilesPatchRequest) ChangesetName(changesetName string) ApiVoiceportprofilesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiVoiceportprofilesPatchRequest) VoiceportprofilesPutRequest(voiceportprofilesPutRequest VoiceportprofilesPutRequest) ApiVoiceportprofilesPatchRequest {
	r.voiceportprofilesPutRequest = &voiceportprofilesPutRequest
	return r
}

func (r ApiVoiceportprofilesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.VoiceportprofilesPatchExecute(r)
}

/*
VoiceportprofilesPatch Update Voice-Port Profile

Update Voice-Port Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVoiceportprofilesPatchRequest
*/
func (a *VoicePortProfilesAPIService) VoiceportprofilesPatch(ctx context.Context) ApiVoiceportprofilesPatchRequest {
	return ApiVoiceportprofilesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VoicePortProfilesAPIService) VoiceportprofilesPatchExecute(r ApiVoiceportprofilesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoicePortProfilesAPIService.VoiceportprofilesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/voiceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.voiceportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVoiceportprofilesPutRequest struct {
	ctx context.Context
	ApiService *VoicePortProfilesAPIService
	changesetName *string
	voiceportprofilesPutRequest *VoiceportprofilesPutRequest
}

func (r ApiVoiceportprofilesPutRequest) ChangesetName(changesetName string) ApiVoiceportprofilesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiVoiceportprofilesPutRequest) VoiceportprofilesPutRequest(voiceportprofilesPutRequest VoiceportprofilesPutRequest) ApiVoiceportprofilesPutRequest {
	r.voiceportprofilesPutRequest = &voiceportprofilesPutRequest
	return r
}

func (r ApiVoiceportprofilesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.VoiceportprofilesPutExecute(r)
}

/*
VoiceportprofilesPut Create Voice-Port ProfileVoice-Port Profiles

Create Voice-Port ProfileVoice-Port Profiles into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVoiceportprofilesPutRequest
*/
func (a *VoicePortProfilesAPIService) VoiceportprofilesPut(ctx context.Context) ApiVoiceportprofilesPutRequest {
	return ApiVoiceportprofilesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VoicePortProfilesAPIService) VoiceportprofilesPutExecute(r ApiVoiceportprofilesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoicePortProfilesAPIService.VoiceportprofilesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/voiceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.voiceportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
