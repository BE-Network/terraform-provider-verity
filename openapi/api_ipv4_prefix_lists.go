/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// IPv4PrefixListsAPIService IPv4PrefixListsAPI service
type IPv4PrefixListsAPIService service

type ApiIpv4prefixlistsDeleteRequest struct {
	ctx context.Context
	ApiService *IPv4PrefixListsAPIService
	ipv4PrefixListName *[]string
	changesetName *string
}

func (r ApiIpv4prefixlistsDeleteRequest) Ipv4PrefixListName(ipv4PrefixListName []string) ApiIpv4prefixlistsDeleteRequest {
	r.ipv4PrefixListName = &ipv4PrefixListName
	return r
}

func (r ApiIpv4prefixlistsDeleteRequest) ChangesetName(changesetName string) ApiIpv4prefixlistsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4prefixlistsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4prefixlistsDeleteExecute(r)
}

/*
Ipv4prefixlistsDelete Delete IPv4 Prefix List

Deletes an existing IPv4 Prefix List from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4prefixlistsDeleteRequest
*/
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsDelete(ctx context.Context) ApiIpv4prefixlistsDeleteRequest {
	return ApiIpv4prefixlistsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsDeleteExecute(r ApiIpv4prefixlistsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4PrefixListsAPIService.Ipv4prefixlistsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv4PrefixListName == nil {
		return nil, reportError("ipv4PrefixListName is required and must be specified")
	}

	{
		t := *r.ipv4PrefixListName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4_prefix_list_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4_prefix_list_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv4prefixlistsGetRequest struct {
	ctx context.Context
	ApiService *IPv4PrefixListsAPIService
	ipv4PrefixListName *string
	includeData *bool
	changesetName *string
}

func (r ApiIpv4prefixlistsGetRequest) Ipv4PrefixListName(ipv4PrefixListName string) ApiIpv4prefixlistsGetRequest {
	r.ipv4PrefixListName = &ipv4PrefixListName
	return r
}

func (r ApiIpv4prefixlistsGetRequest) IncludeData(includeData bool) ApiIpv4prefixlistsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiIpv4prefixlistsGetRequest) ChangesetName(changesetName string) ApiIpv4prefixlistsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4prefixlistsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4prefixlistsGetExecute(r)
}

/*
Ipv4prefixlistsGet Get all IPv4 Prefix Lists

Retrieves all IPv4 Prefix Lists from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4prefixlistsGetRequest
*/
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsGet(ctx context.Context) ApiIpv4prefixlistsGetRequest {
	return ApiIpv4prefixlistsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsGetExecute(r ApiIpv4prefixlistsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4PrefixListsAPIService.Ipv4prefixlistsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ipv4PrefixListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4_prefix_list_name", r.ipv4PrefixListName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv4prefixlistsPatchRequest struct {
	ctx context.Context
	ApiService *IPv4PrefixListsAPIService
	changesetName *string
	ipv4prefixlistsPutRequest *Ipv4prefixlistsPutRequest
}

func (r ApiIpv4prefixlistsPatchRequest) ChangesetName(changesetName string) ApiIpv4prefixlistsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4prefixlistsPatchRequest) Ipv4prefixlistsPutRequest(ipv4prefixlistsPutRequest Ipv4prefixlistsPutRequest) ApiIpv4prefixlistsPatchRequest {
	r.ipv4prefixlistsPutRequest = &ipv4prefixlistsPutRequest
	return r
}

func (r ApiIpv4prefixlistsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4prefixlistsPatchExecute(r)
}

/*
Ipv4prefixlistsPatch Update IPv4 Prefix List

Update IPv4 Prefix List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4prefixlistsPatchRequest
*/
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsPatch(ctx context.Context) ApiIpv4prefixlistsPatchRequest {
	return ApiIpv4prefixlistsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsPatchExecute(r ApiIpv4prefixlistsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4PrefixListsAPIService.Ipv4prefixlistsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv4prefixlistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv4prefixlistsPutRequest struct {
	ctx context.Context
	ApiService *IPv4PrefixListsAPIService
	changesetName *string
	ipv4prefixlistsPutRequest *Ipv4prefixlistsPutRequest
}

func (r ApiIpv4prefixlistsPutRequest) ChangesetName(changesetName string) ApiIpv4prefixlistsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4prefixlistsPutRequest) Ipv4prefixlistsPutRequest(ipv4prefixlistsPutRequest Ipv4prefixlistsPutRequest) ApiIpv4prefixlistsPutRequest {
	r.ipv4prefixlistsPutRequest = &ipv4prefixlistsPutRequest
	return r
}

func (r ApiIpv4prefixlistsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4prefixlistsPutExecute(r)
}

/*
Ipv4prefixlistsPut Create IPv4 Prefix List

Create IPv4 Prefix List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4prefixlistsPutRequest
*/
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsPut(ctx context.Context) ApiIpv4prefixlistsPutRequest {
	return ApiIpv4prefixlistsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4PrefixListsAPIService) Ipv4prefixlistsPutExecute(r ApiIpv4prefixlistsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4PrefixListsAPIService.Ipv4prefixlistsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv4prefixlistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
