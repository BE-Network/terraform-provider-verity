/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestDeviceControllerDeviceControllerName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestDeviceControllerDeviceControllerName{}

// ConfigPutRequestDeviceControllerDeviceControllerName struct for ConfigPutRequestDeviceControllerDeviceControllerName
type ConfigPutRequestDeviceControllerDeviceControllerName struct {
	// Object Name. Must be unique.
	Name *string `json:"name,omitempty"`
	// Enable object.
	Enable *bool `json:"enable,omitempty"`
	// IP Source
	IpSource *string `json:"ip_source,omitempty"`
	// Controller IP and Mask
	ControllerIpAndMask *string `json:"controller_ip_and_mask,omitempty"`
	// Gateway
	Gateway *string `json:"gateway,omitempty"`
	// Switch IP and Mask
	SwitchIpAndMask *string `json:"switch_ip_and_mask,omitempty"`
	// Gateway of Managed Device
	SwitchGateway *string `json:"switch_gateway,omitempty"`
	// Comm Type
	CommType *string `json:"comm_type,omitempty"`
	// Comm Credentials
	SnmpCommunityString *string `json:"snmp_community_string,omitempty"`
	// Uplink Port of Managed Device
	UplinkPort *string `json:"uplink_port,omitempty"`
	// The unique identifier associated with the managed device.
	LldpSearchString *string `json:"lldp_search_string,omitempty"`
	// Service Tag or Serial Number to identify device for Zero Touch Provisioning
	ZtpIdentification *string `json:"ztp_identification,omitempty"`
	// Controls how the system locates this Device within its LAN
	LocatedBy *string `json:"located_by,omitempty"`
	// Power state of Switch Controller
	PowerState *string `json:"power_state,omitempty"`
	// Communication Mode
	CommunicationMode *string `json:"communication_mode,omitempty"`
	// CLI Access Mode
	CliAccessMode *string `json:"cli_access_mode,omitempty"`
	// Username
	Username *string `json:"username,omitempty"`
	// Password
	Password *string `json:"password,omitempty"`
	// Enable Password - to enable privileged CLI operations
	EnablePassword *string `json:"enable_password,omitempty"`
	// SSH Key or Password
	SshKeyOrPassword *string `json:"ssh_key_or_password,omitempty"`
	// Managed on native VLAN
	ManagedOnNativeVlan *bool `json:"managed_on_native_vlan,omitempty"`
	// SDLC that Device Controller belongs to
	Sdlc *string `json:"sdlc,omitempty"`
	// Switchpoint reference
	Switchpoint *string `json:"switchpoint,omitempty"`
	// Object type for switchpoint field
	SwitchpointRefType *string `json:"switchpoint_ref_type_,omitempty"`
	// Security level
	SecurityType *string `json:"security_type,omitempty"`
	// Username
	Snmpv3Username *string `json:"snmpv3_username,omitempty"`
	// Protocol
	AuthenticationProtocol *string `json:"authentication_protocol,omitempty"`
	// Passphrase
	Passphrase *string `json:"passphrase,omitempty"`
	// Protocol
	PrivateProtocol *string `json:"private_protocol,omitempty"`
	// Password
	PrivatePassword *string `json:"private_password,omitempty"`
	// Password
	PasswordEncrypted *string `json:"password_encrypted,omitempty"`
	// Enable Password - to enable privileged CLI operations
	EnablePasswordEncrypted *string `json:"enable_password_encrypted,omitempty"`
	// SSH Key or Password
	SshKeyOrPasswordEncrypted *string `json:"ssh_key_or_password_encrypted,omitempty"`
	// Passphrase
	PassphraseEncrypted *string `json:"passphrase_encrypted,omitempty"`
	// Password
	PrivatePasswordEncrypted *string `json:"private_password_encrypted,omitempty"`
}

// NewConfigPutRequestDeviceControllerDeviceControllerName instantiates a new ConfigPutRequestDeviceControllerDeviceControllerName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestDeviceControllerDeviceControllerName() *ConfigPutRequestDeviceControllerDeviceControllerName {
	this := ConfigPutRequestDeviceControllerDeviceControllerName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var ipSource string = "dhcp"
	this.IpSource = &ipSource
	var controllerIpAndMask string = ""
	this.ControllerIpAndMask = &controllerIpAndMask
	var gateway string = ""
	this.Gateway = &gateway
	var switchIpAndMask string = ""
	this.SwitchIpAndMask = &switchIpAndMask
	var switchGateway string = ""
	this.SwitchGateway = &switchGateway
	var commType string = "gnmi"
	this.CommType = &commType
	var snmpCommunityString string = "private"
	this.SnmpCommunityString = &snmpCommunityString
	var uplinkPort string = ""
	this.UplinkPort = &uplinkPort
	var lldpSearchString string = ""
	this.LldpSearchString = &lldpSearchString
	var ztpIdentification string = ""
	this.ZtpIdentification = &ztpIdentification
	var locatedBy string = "LLDP"
	this.LocatedBy = &locatedBy
	var powerState string = "on"
	this.PowerState = &powerState
	var communicationMode string = "sonic"
	this.CommunicationMode = &communicationMode
	var cliAccessMode string = "SSH"
	this.CliAccessMode = &cliAccessMode
	var username string = ""
	this.Username = &username
	var password string = ""
	this.Password = &password
	var enablePassword string = ""
	this.EnablePassword = &enablePassword
	var sshKeyOrPassword string = ""
	this.SshKeyOrPassword = &sshKeyOrPassword
	var managedOnNativeVlan bool = true
	this.ManagedOnNativeVlan = &managedOnNativeVlan
	var sdlc string = ""
	this.Sdlc = &sdlc
	var switchpoint string = ""
	this.Switchpoint = &switchpoint
	var securityType string = "noAuthNoPriv"
	this.SecurityType = &securityType
	var snmpv3Username string = ""
	this.Snmpv3Username = &snmpv3Username
	var authenticationProtocol string = "MD5"
	this.AuthenticationProtocol = &authenticationProtocol
	var passphrase string = ""
	this.Passphrase = &passphrase
	var privateProtocol string = "DES"
	this.PrivateProtocol = &privateProtocol
	var privatePassword string = ""
	this.PrivatePassword = &privatePassword
	var passwordEncrypted string = ""
	this.PasswordEncrypted = &passwordEncrypted
	var enablePasswordEncrypted string = ""
	this.EnablePasswordEncrypted = &enablePasswordEncrypted
	var sshKeyOrPasswordEncrypted string = ""
	this.SshKeyOrPasswordEncrypted = &sshKeyOrPasswordEncrypted
	var passphraseEncrypted string = ""
	this.PassphraseEncrypted = &passphraseEncrypted
	var privatePasswordEncrypted string = ""
	this.PrivatePasswordEncrypted = &privatePasswordEncrypted
	return &this
}

// NewConfigPutRequestDeviceControllerDeviceControllerNameWithDefaults instantiates a new ConfigPutRequestDeviceControllerDeviceControllerName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestDeviceControllerDeviceControllerNameWithDefaults() *ConfigPutRequestDeviceControllerDeviceControllerName {
	this := ConfigPutRequestDeviceControllerDeviceControllerName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var ipSource string = "dhcp"
	this.IpSource = &ipSource
	var controllerIpAndMask string = ""
	this.ControllerIpAndMask = &controllerIpAndMask
	var gateway string = ""
	this.Gateway = &gateway
	var switchIpAndMask string = ""
	this.SwitchIpAndMask = &switchIpAndMask
	var switchGateway string = ""
	this.SwitchGateway = &switchGateway
	var commType string = "gnmi"
	this.CommType = &commType
	var snmpCommunityString string = "private"
	this.SnmpCommunityString = &snmpCommunityString
	var uplinkPort string = ""
	this.UplinkPort = &uplinkPort
	var lldpSearchString string = ""
	this.LldpSearchString = &lldpSearchString
	var ztpIdentification string = ""
	this.ZtpIdentification = &ztpIdentification
	var locatedBy string = "LLDP"
	this.LocatedBy = &locatedBy
	var powerState string = "on"
	this.PowerState = &powerState
	var communicationMode string = "sonic"
	this.CommunicationMode = &communicationMode
	var cliAccessMode string = "SSH"
	this.CliAccessMode = &cliAccessMode
	var username string = ""
	this.Username = &username
	var password string = ""
	this.Password = &password
	var enablePassword string = ""
	this.EnablePassword = &enablePassword
	var sshKeyOrPassword string = ""
	this.SshKeyOrPassword = &sshKeyOrPassword
	var managedOnNativeVlan bool = true
	this.ManagedOnNativeVlan = &managedOnNativeVlan
	var sdlc string = ""
	this.Sdlc = &sdlc
	var switchpoint string = ""
	this.Switchpoint = &switchpoint
	var securityType string = "noAuthNoPriv"
	this.SecurityType = &securityType
	var snmpv3Username string = ""
	this.Snmpv3Username = &snmpv3Username
	var authenticationProtocol string = "MD5"
	this.AuthenticationProtocol = &authenticationProtocol
	var passphrase string = ""
	this.Passphrase = &passphrase
	var privateProtocol string = "DES"
	this.PrivateProtocol = &privateProtocol
	var privatePassword string = ""
	this.PrivatePassword = &privatePassword
	var passwordEncrypted string = ""
	this.PasswordEncrypted = &passwordEncrypted
	var enablePasswordEncrypted string = ""
	this.EnablePasswordEncrypted = &enablePasswordEncrypted
	var sshKeyOrPasswordEncrypted string = ""
	this.SshKeyOrPasswordEncrypted = &sshKeyOrPasswordEncrypted
	var passphraseEncrypted string = ""
	this.PassphraseEncrypted = &passphraseEncrypted
	var privatePasswordEncrypted string = ""
	this.PrivatePasswordEncrypted = &privatePasswordEncrypted
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetName(v string) {
	o.Name = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetEnable(v bool) {
	o.Enable = &v
}

// GetIpSource returns the IpSource field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetIpSource() string {
	if o == nil || IsNil(o.IpSource) {
		var ret string
		return ret
	}
	return *o.IpSource
}

// GetIpSourceOk returns a tuple with the IpSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetIpSourceOk() (*string, bool) {
	if o == nil || IsNil(o.IpSource) {
		return nil, false
	}
	return o.IpSource, true
}

// HasIpSource returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasIpSource() bool {
	if o != nil && !IsNil(o.IpSource) {
		return true
	}

	return false
}

// SetIpSource gets a reference to the given string and assigns it to the IpSource field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetIpSource(v string) {
	o.IpSource = &v
}

// GetControllerIpAndMask returns the ControllerIpAndMask field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetControllerIpAndMask() string {
	if o == nil || IsNil(o.ControllerIpAndMask) {
		var ret string
		return ret
	}
	return *o.ControllerIpAndMask
}

// GetControllerIpAndMaskOk returns a tuple with the ControllerIpAndMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetControllerIpAndMaskOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerIpAndMask) {
		return nil, false
	}
	return o.ControllerIpAndMask, true
}

// HasControllerIpAndMask returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasControllerIpAndMask() bool {
	if o != nil && !IsNil(o.ControllerIpAndMask) {
		return true
	}

	return false
}

// SetControllerIpAndMask gets a reference to the given string and assigns it to the ControllerIpAndMask field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetControllerIpAndMask(v string) {
	o.ControllerIpAndMask = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetGateway(v string) {
	o.Gateway = &v
}

// GetSwitchIpAndMask returns the SwitchIpAndMask field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchIpAndMask() string {
	if o == nil || IsNil(o.SwitchIpAndMask) {
		var ret string
		return ret
	}
	return *o.SwitchIpAndMask
}

// GetSwitchIpAndMaskOk returns a tuple with the SwitchIpAndMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchIpAndMaskOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchIpAndMask) {
		return nil, false
	}
	return o.SwitchIpAndMask, true
}

// HasSwitchIpAndMask returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSwitchIpAndMask() bool {
	if o != nil && !IsNil(o.SwitchIpAndMask) {
		return true
	}

	return false
}

// SetSwitchIpAndMask gets a reference to the given string and assigns it to the SwitchIpAndMask field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSwitchIpAndMask(v string) {
	o.SwitchIpAndMask = &v
}

// GetSwitchGateway returns the SwitchGateway field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchGateway() string {
	if o == nil || IsNil(o.SwitchGateway) {
		var ret string
		return ret
	}
	return *o.SwitchGateway
}

// GetSwitchGatewayOk returns a tuple with the SwitchGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchGateway) {
		return nil, false
	}
	return o.SwitchGateway, true
}

// HasSwitchGateway returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSwitchGateway() bool {
	if o != nil && !IsNil(o.SwitchGateway) {
		return true
	}

	return false
}

// SetSwitchGateway gets a reference to the given string and assigns it to the SwitchGateway field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSwitchGateway(v string) {
	o.SwitchGateway = &v
}

// GetCommType returns the CommType field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetCommType() string {
	if o == nil || IsNil(o.CommType) {
		var ret string
		return ret
	}
	return *o.CommType
}

// GetCommTypeOk returns a tuple with the CommType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetCommTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CommType) {
		return nil, false
	}
	return o.CommType, true
}

// HasCommType returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasCommType() bool {
	if o != nil && !IsNil(o.CommType) {
		return true
	}

	return false
}

// SetCommType gets a reference to the given string and assigns it to the CommType field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetCommType(v string) {
	o.CommType = &v
}

// GetSnmpCommunityString returns the SnmpCommunityString field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSnmpCommunityString() string {
	if o == nil || IsNil(o.SnmpCommunityString) {
		var ret string
		return ret
	}
	return *o.SnmpCommunityString
}

// GetSnmpCommunityStringOk returns a tuple with the SnmpCommunityString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSnmpCommunityStringOk() (*string, bool) {
	if o == nil || IsNil(o.SnmpCommunityString) {
		return nil, false
	}
	return o.SnmpCommunityString, true
}

// HasSnmpCommunityString returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSnmpCommunityString() bool {
	if o != nil && !IsNil(o.SnmpCommunityString) {
		return true
	}

	return false
}

// SetSnmpCommunityString gets a reference to the given string and assigns it to the SnmpCommunityString field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSnmpCommunityString(v string) {
	o.SnmpCommunityString = &v
}

// GetUplinkPort returns the UplinkPort field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetUplinkPort() string {
	if o == nil || IsNil(o.UplinkPort) {
		var ret string
		return ret
	}
	return *o.UplinkPort
}

// GetUplinkPortOk returns a tuple with the UplinkPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetUplinkPortOk() (*string, bool) {
	if o == nil || IsNil(o.UplinkPort) {
		return nil, false
	}
	return o.UplinkPort, true
}

// HasUplinkPort returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasUplinkPort() bool {
	if o != nil && !IsNil(o.UplinkPort) {
		return true
	}

	return false
}

// SetUplinkPort gets a reference to the given string and assigns it to the UplinkPort field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetUplinkPort(v string) {
	o.UplinkPort = &v
}

// GetLldpSearchString returns the LldpSearchString field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetLldpSearchString() string {
	if o == nil || IsNil(o.LldpSearchString) {
		var ret string
		return ret
	}
	return *o.LldpSearchString
}

// GetLldpSearchStringOk returns a tuple with the LldpSearchString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetLldpSearchStringOk() (*string, bool) {
	if o == nil || IsNil(o.LldpSearchString) {
		return nil, false
	}
	return o.LldpSearchString, true
}

// HasLldpSearchString returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasLldpSearchString() bool {
	if o != nil && !IsNil(o.LldpSearchString) {
		return true
	}

	return false
}

// SetLldpSearchString gets a reference to the given string and assigns it to the LldpSearchString field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetLldpSearchString(v string) {
	o.LldpSearchString = &v
}

// GetZtpIdentification returns the ZtpIdentification field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetZtpIdentification() string {
	if o == nil || IsNil(o.ZtpIdentification) {
		var ret string
		return ret
	}
	return *o.ZtpIdentification
}

// GetZtpIdentificationOk returns a tuple with the ZtpIdentification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetZtpIdentificationOk() (*string, bool) {
	if o == nil || IsNil(o.ZtpIdentification) {
		return nil, false
	}
	return o.ZtpIdentification, true
}

// HasZtpIdentification returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasZtpIdentification() bool {
	if o != nil && !IsNil(o.ZtpIdentification) {
		return true
	}

	return false
}

// SetZtpIdentification gets a reference to the given string and assigns it to the ZtpIdentification field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetZtpIdentification(v string) {
	o.ZtpIdentification = &v
}

// GetLocatedBy returns the LocatedBy field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetLocatedBy() string {
	if o == nil || IsNil(o.LocatedBy) {
		var ret string
		return ret
	}
	return *o.LocatedBy
}

// GetLocatedByOk returns a tuple with the LocatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetLocatedByOk() (*string, bool) {
	if o == nil || IsNil(o.LocatedBy) {
		return nil, false
	}
	return o.LocatedBy, true
}

// HasLocatedBy returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasLocatedBy() bool {
	if o != nil && !IsNil(o.LocatedBy) {
		return true
	}

	return false
}

// SetLocatedBy gets a reference to the given string and assigns it to the LocatedBy field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetLocatedBy(v string) {
	o.LocatedBy = &v
}

// GetPowerState returns the PowerState field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPowerState() string {
	if o == nil || IsNil(o.PowerState) {
		var ret string
		return ret
	}
	return *o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPowerStateOk() (*string, bool) {
	if o == nil || IsNil(o.PowerState) {
		return nil, false
	}
	return o.PowerState, true
}

// HasPowerState returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPowerState() bool {
	if o != nil && !IsNil(o.PowerState) {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given string and assigns it to the PowerState field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPowerState(v string) {
	o.PowerState = &v
}

// GetCommunicationMode returns the CommunicationMode field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetCommunicationMode() string {
	if o == nil || IsNil(o.CommunicationMode) {
		var ret string
		return ret
	}
	return *o.CommunicationMode
}

// GetCommunicationModeOk returns a tuple with the CommunicationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetCommunicationModeOk() (*string, bool) {
	if o == nil || IsNil(o.CommunicationMode) {
		return nil, false
	}
	return o.CommunicationMode, true
}

// HasCommunicationMode returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasCommunicationMode() bool {
	if o != nil && !IsNil(o.CommunicationMode) {
		return true
	}

	return false
}

// SetCommunicationMode gets a reference to the given string and assigns it to the CommunicationMode field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetCommunicationMode(v string) {
	o.CommunicationMode = &v
}

// GetCliAccessMode returns the CliAccessMode field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetCliAccessMode() string {
	if o == nil || IsNil(o.CliAccessMode) {
		var ret string
		return ret
	}
	return *o.CliAccessMode
}

// GetCliAccessModeOk returns a tuple with the CliAccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetCliAccessModeOk() (*string, bool) {
	if o == nil || IsNil(o.CliAccessMode) {
		return nil, false
	}
	return o.CliAccessMode, true
}

// HasCliAccessMode returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasCliAccessMode() bool {
	if o != nil && !IsNil(o.CliAccessMode) {
		return true
	}

	return false
}

// SetCliAccessMode gets a reference to the given string and assigns it to the CliAccessMode field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetCliAccessMode(v string) {
	o.CliAccessMode = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPassword(v string) {
	o.Password = &v
}

// GetEnablePassword returns the EnablePassword field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetEnablePassword() string {
	if o == nil || IsNil(o.EnablePassword) {
		var ret string
		return ret
	}
	return *o.EnablePassword
}

// GetEnablePasswordOk returns a tuple with the EnablePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetEnablePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.EnablePassword) {
		return nil, false
	}
	return o.EnablePassword, true
}

// HasEnablePassword returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasEnablePassword() bool {
	if o != nil && !IsNil(o.EnablePassword) {
		return true
	}

	return false
}

// SetEnablePassword gets a reference to the given string and assigns it to the EnablePassword field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetEnablePassword(v string) {
	o.EnablePassword = &v
}

// GetSshKeyOrPassword returns the SshKeyOrPassword field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSshKeyOrPassword() string {
	if o == nil || IsNil(o.SshKeyOrPassword) {
		var ret string
		return ret
	}
	return *o.SshKeyOrPassword
}

// GetSshKeyOrPasswordOk returns a tuple with the SshKeyOrPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSshKeyOrPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SshKeyOrPassword) {
		return nil, false
	}
	return o.SshKeyOrPassword, true
}

// HasSshKeyOrPassword returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSshKeyOrPassword() bool {
	if o != nil && !IsNil(o.SshKeyOrPassword) {
		return true
	}

	return false
}

// SetSshKeyOrPassword gets a reference to the given string and assigns it to the SshKeyOrPassword field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSshKeyOrPassword(v string) {
	o.SshKeyOrPassword = &v
}

// GetManagedOnNativeVlan returns the ManagedOnNativeVlan field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetManagedOnNativeVlan() bool {
	if o == nil || IsNil(o.ManagedOnNativeVlan) {
		var ret bool
		return ret
	}
	return *o.ManagedOnNativeVlan
}

// GetManagedOnNativeVlanOk returns a tuple with the ManagedOnNativeVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetManagedOnNativeVlanOk() (*bool, bool) {
	if o == nil || IsNil(o.ManagedOnNativeVlan) {
		return nil, false
	}
	return o.ManagedOnNativeVlan, true
}

// HasManagedOnNativeVlan returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasManagedOnNativeVlan() bool {
	if o != nil && !IsNil(o.ManagedOnNativeVlan) {
		return true
	}

	return false
}

// SetManagedOnNativeVlan gets a reference to the given bool and assigns it to the ManagedOnNativeVlan field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetManagedOnNativeVlan(v bool) {
	o.ManagedOnNativeVlan = &v
}

// GetSdlc returns the Sdlc field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSdlc() string {
	if o == nil || IsNil(o.Sdlc) {
		var ret string
		return ret
	}
	return *o.Sdlc
}

// GetSdlcOk returns a tuple with the Sdlc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSdlcOk() (*string, bool) {
	if o == nil || IsNil(o.Sdlc) {
		return nil, false
	}
	return o.Sdlc, true
}

// HasSdlc returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSdlc() bool {
	if o != nil && !IsNil(o.Sdlc) {
		return true
	}

	return false
}

// SetSdlc gets a reference to the given string and assigns it to the Sdlc field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSdlc(v string) {
	o.Sdlc = &v
}

// GetSwitchpoint returns the Switchpoint field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchpoint() string {
	if o == nil || IsNil(o.Switchpoint) {
		var ret string
		return ret
	}
	return *o.Switchpoint
}

// GetSwitchpointOk returns a tuple with the Switchpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchpointOk() (*string, bool) {
	if o == nil || IsNil(o.Switchpoint) {
		return nil, false
	}
	return o.Switchpoint, true
}

// HasSwitchpoint returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSwitchpoint() bool {
	if o != nil && !IsNil(o.Switchpoint) {
		return true
	}

	return false
}

// SetSwitchpoint gets a reference to the given string and assigns it to the Switchpoint field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSwitchpoint(v string) {
	o.Switchpoint = &v
}

// GetSwitchpointRefType returns the SwitchpointRefType field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchpointRefType() string {
	if o == nil || IsNil(o.SwitchpointRefType) {
		var ret string
		return ret
	}
	return *o.SwitchpointRefType
}

// GetSwitchpointRefTypeOk returns a tuple with the SwitchpointRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSwitchpointRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchpointRefType) {
		return nil, false
	}
	return o.SwitchpointRefType, true
}

// HasSwitchpointRefType returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSwitchpointRefType() bool {
	if o != nil && !IsNil(o.SwitchpointRefType) {
		return true
	}

	return false
}

// SetSwitchpointRefType gets a reference to the given string and assigns it to the SwitchpointRefType field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSwitchpointRefType(v string) {
	o.SwitchpointRefType = &v
}

// GetSecurityType returns the SecurityType field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSecurityType() string {
	if o == nil || IsNil(o.SecurityType) {
		var ret string
		return ret
	}
	return *o.SecurityType
}

// GetSecurityTypeOk returns a tuple with the SecurityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSecurityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityType) {
		return nil, false
	}
	return o.SecurityType, true
}

// HasSecurityType returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSecurityType() bool {
	if o != nil && !IsNil(o.SecurityType) {
		return true
	}

	return false
}

// SetSecurityType gets a reference to the given string and assigns it to the SecurityType field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSecurityType(v string) {
	o.SecurityType = &v
}

// GetSnmpv3Username returns the Snmpv3Username field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSnmpv3Username() string {
	if o == nil || IsNil(o.Snmpv3Username) {
		var ret string
		return ret
	}
	return *o.Snmpv3Username
}

// GetSnmpv3UsernameOk returns a tuple with the Snmpv3Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSnmpv3UsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Snmpv3Username) {
		return nil, false
	}
	return o.Snmpv3Username, true
}

// HasSnmpv3Username returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSnmpv3Username() bool {
	if o != nil && !IsNil(o.Snmpv3Username) {
		return true
	}

	return false
}

// SetSnmpv3Username gets a reference to the given string and assigns it to the Snmpv3Username field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSnmpv3Username(v string) {
	o.Snmpv3Username = &v
}

// GetAuthenticationProtocol returns the AuthenticationProtocol field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetAuthenticationProtocol() string {
	if o == nil || IsNil(o.AuthenticationProtocol) {
		var ret string
		return ret
	}
	return *o.AuthenticationProtocol
}

// GetAuthenticationProtocolOk returns a tuple with the AuthenticationProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetAuthenticationProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationProtocol) {
		return nil, false
	}
	return o.AuthenticationProtocol, true
}

// HasAuthenticationProtocol returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasAuthenticationProtocol() bool {
	if o != nil && !IsNil(o.AuthenticationProtocol) {
		return true
	}

	return false
}

// SetAuthenticationProtocol gets a reference to the given string and assigns it to the AuthenticationProtocol field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetAuthenticationProtocol(v string) {
	o.AuthenticationProtocol = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetPrivateProtocol returns the PrivateProtocol field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPrivateProtocol() string {
	if o == nil || IsNil(o.PrivateProtocol) {
		var ret string
		return ret
	}
	return *o.PrivateProtocol
}

// GetPrivateProtocolOk returns a tuple with the PrivateProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPrivateProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateProtocol) {
		return nil, false
	}
	return o.PrivateProtocol, true
}

// HasPrivateProtocol returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPrivateProtocol() bool {
	if o != nil && !IsNil(o.PrivateProtocol) {
		return true
	}

	return false
}

// SetPrivateProtocol gets a reference to the given string and assigns it to the PrivateProtocol field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPrivateProtocol(v string) {
	o.PrivateProtocol = &v
}

// GetPrivatePassword returns the PrivatePassword field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPrivatePassword() string {
	if o == nil || IsNil(o.PrivatePassword) {
		var ret string
		return ret
	}
	return *o.PrivatePassword
}

// GetPrivatePasswordOk returns a tuple with the PrivatePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPrivatePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.PrivatePassword) {
		return nil, false
	}
	return o.PrivatePassword, true
}

// HasPrivatePassword returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPrivatePassword() bool {
	if o != nil && !IsNil(o.PrivatePassword) {
		return true
	}

	return false
}

// SetPrivatePassword gets a reference to the given string and assigns it to the PrivatePassword field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPrivatePassword(v string) {
	o.PrivatePassword = &v
}

// GetPasswordEncrypted returns the PasswordEncrypted field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPasswordEncrypted() string {
	if o == nil || IsNil(o.PasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.PasswordEncrypted
}

// GetPasswordEncryptedOk returns a tuple with the PasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordEncrypted) {
		return nil, false
	}
	return o.PasswordEncrypted, true
}

// HasPasswordEncrypted returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPasswordEncrypted() bool {
	if o != nil && !IsNil(o.PasswordEncrypted) {
		return true
	}

	return false
}

// SetPasswordEncrypted gets a reference to the given string and assigns it to the PasswordEncrypted field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPasswordEncrypted(v string) {
	o.PasswordEncrypted = &v
}

// GetEnablePasswordEncrypted returns the EnablePasswordEncrypted field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetEnablePasswordEncrypted() string {
	if o == nil || IsNil(o.EnablePasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.EnablePasswordEncrypted
}

// GetEnablePasswordEncryptedOk returns a tuple with the EnablePasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetEnablePasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.EnablePasswordEncrypted) {
		return nil, false
	}
	return o.EnablePasswordEncrypted, true
}

// HasEnablePasswordEncrypted returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasEnablePasswordEncrypted() bool {
	if o != nil && !IsNil(o.EnablePasswordEncrypted) {
		return true
	}

	return false
}

// SetEnablePasswordEncrypted gets a reference to the given string and assigns it to the EnablePasswordEncrypted field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetEnablePasswordEncrypted(v string) {
	o.EnablePasswordEncrypted = &v
}

// GetSshKeyOrPasswordEncrypted returns the SshKeyOrPasswordEncrypted field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSshKeyOrPasswordEncrypted() string {
	if o == nil || IsNil(o.SshKeyOrPasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.SshKeyOrPasswordEncrypted
}

// GetSshKeyOrPasswordEncryptedOk returns a tuple with the SshKeyOrPasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetSshKeyOrPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.SshKeyOrPasswordEncrypted) {
		return nil, false
	}
	return o.SshKeyOrPasswordEncrypted, true
}

// HasSshKeyOrPasswordEncrypted returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasSshKeyOrPasswordEncrypted() bool {
	if o != nil && !IsNil(o.SshKeyOrPasswordEncrypted) {
		return true
	}

	return false
}

// SetSshKeyOrPasswordEncrypted gets a reference to the given string and assigns it to the SshKeyOrPasswordEncrypted field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetSshKeyOrPasswordEncrypted(v string) {
	o.SshKeyOrPasswordEncrypted = &v
}

// GetPassphraseEncrypted returns the PassphraseEncrypted field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPassphraseEncrypted() string {
	if o == nil || IsNil(o.PassphraseEncrypted) {
		var ret string
		return ret
	}
	return *o.PassphraseEncrypted
}

// GetPassphraseEncryptedOk returns a tuple with the PassphraseEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPassphraseEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.PassphraseEncrypted) {
		return nil, false
	}
	return o.PassphraseEncrypted, true
}

// HasPassphraseEncrypted returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPassphraseEncrypted() bool {
	if o != nil && !IsNil(o.PassphraseEncrypted) {
		return true
	}

	return false
}

// SetPassphraseEncrypted gets a reference to the given string and assigns it to the PassphraseEncrypted field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPassphraseEncrypted(v string) {
	o.PassphraseEncrypted = &v
}

// GetPrivatePasswordEncrypted returns the PrivatePasswordEncrypted field value if set, zero value otherwise.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPrivatePasswordEncrypted() string {
	if o == nil || IsNil(o.PrivatePasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.PrivatePasswordEncrypted
}

// GetPrivatePasswordEncryptedOk returns a tuple with the PrivatePasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) GetPrivatePasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.PrivatePasswordEncrypted) {
		return nil, false
	}
	return o.PrivatePasswordEncrypted, true
}

// HasPrivatePasswordEncrypted returns a boolean if a field has been set.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) HasPrivatePasswordEncrypted() bool {
	if o != nil && !IsNil(o.PrivatePasswordEncrypted) {
		return true
	}

	return false
}

// SetPrivatePasswordEncrypted gets a reference to the given string and assigns it to the PrivatePasswordEncrypted field.
func (o *ConfigPutRequestDeviceControllerDeviceControllerName) SetPrivatePasswordEncrypted(v string) {
	o.PrivatePasswordEncrypted = &v
}

func (o ConfigPutRequestDeviceControllerDeviceControllerName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestDeviceControllerDeviceControllerName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.IpSource) {
		toSerialize["ip_source"] = o.IpSource
	}
	if !IsNil(o.ControllerIpAndMask) {
		toSerialize["controller_ip_and_mask"] = o.ControllerIpAndMask
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.SwitchIpAndMask) {
		toSerialize["switch_ip_and_mask"] = o.SwitchIpAndMask
	}
	if !IsNil(o.SwitchGateway) {
		toSerialize["switch_gateway"] = o.SwitchGateway
	}
	if !IsNil(o.CommType) {
		toSerialize["comm_type"] = o.CommType
	}
	if !IsNil(o.SnmpCommunityString) {
		toSerialize["snmp_community_string"] = o.SnmpCommunityString
	}
	if !IsNil(o.UplinkPort) {
		toSerialize["uplink_port"] = o.UplinkPort
	}
	if !IsNil(o.LldpSearchString) {
		toSerialize["lldp_search_string"] = o.LldpSearchString
	}
	if !IsNil(o.ZtpIdentification) {
		toSerialize["ztp_identification"] = o.ZtpIdentification
	}
	if !IsNil(o.LocatedBy) {
		toSerialize["located_by"] = o.LocatedBy
	}
	if !IsNil(o.PowerState) {
		toSerialize["power_state"] = o.PowerState
	}
	if !IsNil(o.CommunicationMode) {
		toSerialize["communication_mode"] = o.CommunicationMode
	}
	if !IsNil(o.CliAccessMode) {
		toSerialize["cli_access_mode"] = o.CliAccessMode
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.EnablePassword) {
		toSerialize["enable_password"] = o.EnablePassword
	}
	if !IsNil(o.SshKeyOrPassword) {
		toSerialize["ssh_key_or_password"] = o.SshKeyOrPassword
	}
	if !IsNil(o.ManagedOnNativeVlan) {
		toSerialize["managed_on_native_vlan"] = o.ManagedOnNativeVlan
	}
	if !IsNil(o.Sdlc) {
		toSerialize["sdlc"] = o.Sdlc
	}
	if !IsNil(o.Switchpoint) {
		toSerialize["switchpoint"] = o.Switchpoint
	}
	if !IsNil(o.SwitchpointRefType) {
		toSerialize["switchpoint_ref_type_"] = o.SwitchpointRefType
	}
	if !IsNil(o.SecurityType) {
		toSerialize["security_type"] = o.SecurityType
	}
	if !IsNil(o.Snmpv3Username) {
		toSerialize["snmpv3_username"] = o.Snmpv3Username
	}
	if !IsNil(o.AuthenticationProtocol) {
		toSerialize["authentication_protocol"] = o.AuthenticationProtocol
	}
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	if !IsNil(o.PrivateProtocol) {
		toSerialize["private_protocol"] = o.PrivateProtocol
	}
	if !IsNil(o.PrivatePassword) {
		toSerialize["private_password"] = o.PrivatePassword
	}
	if !IsNil(o.PasswordEncrypted) {
		toSerialize["password_encrypted"] = o.PasswordEncrypted
	}
	if !IsNil(o.EnablePasswordEncrypted) {
		toSerialize["enable_password_encrypted"] = o.EnablePasswordEncrypted
	}
	if !IsNil(o.SshKeyOrPasswordEncrypted) {
		toSerialize["ssh_key_or_password_encrypted"] = o.SshKeyOrPasswordEncrypted
	}
	if !IsNil(o.PassphraseEncrypted) {
		toSerialize["passphrase_encrypted"] = o.PassphraseEncrypted
	}
	if !IsNil(o.PrivatePasswordEncrypted) {
		toSerialize["private_password_encrypted"] = o.PrivatePasswordEncrypted
	}
	return toSerialize, nil
}

type NullableConfigPutRequestDeviceControllerDeviceControllerName struct {
	value *ConfigPutRequestDeviceControllerDeviceControllerName
	isSet bool
}

func (v NullableConfigPutRequestDeviceControllerDeviceControllerName) Get() *ConfigPutRequestDeviceControllerDeviceControllerName {
	return v.value
}

func (v *NullableConfigPutRequestDeviceControllerDeviceControllerName) Set(val *ConfigPutRequestDeviceControllerDeviceControllerName) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestDeviceControllerDeviceControllerName) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestDeviceControllerDeviceControllerName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestDeviceControllerDeviceControllerName(val *ConfigPutRequestDeviceControllerDeviceControllerName) *NullableConfigPutRequestDeviceControllerDeviceControllerName {
	return &NullableConfigPutRequestDeviceControllerDeviceControllerName{value: val, isSet: true}
}

func (v NullableConfigPutRequestDeviceControllerDeviceControllerName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestDeviceControllerDeviceControllerName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


