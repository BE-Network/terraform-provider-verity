/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LagsPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LagsPutRequest{}

// LagsPutRequest struct for LagsPutRequest
type LagsPutRequest struct {
	Lag *map[string]ConfigPutRequestLagLagName `json:"lag,omitempty"`
}

// NewLagsPutRequest instantiates a new LagsPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLagsPutRequest() *LagsPutRequest {
	this := LagsPutRequest{}
	return &this
}

// NewLagsPutRequestWithDefaults instantiates a new LagsPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLagsPutRequestWithDefaults() *LagsPutRequest {
	this := LagsPutRequest{}
	return &this
}

// GetLag returns the Lag field value if set, zero value otherwise.
func (o *LagsPutRequest) GetLag() map[string]ConfigPutRequestLagLagName {
	if o == nil || IsNil(o.Lag) {
		var ret map[string]ConfigPutRequestLagLagName
		return ret
	}
	return *o.Lag
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LagsPutRequest) GetLagOk() (*map[string]ConfigPutRequestLagLagName, bool) {
	if o == nil || IsNil(o.Lag) {
		return nil, false
	}
	return o.Lag, true
}

// HasLag returns a boolean if a field has been set.
func (o *LagsPutRequest) HasLag() bool {
	if o != nil && !IsNil(o.Lag) {
		return true
	}

	return false
}

// SetLag gets a reference to the given map[string]ConfigPutRequestLagLagName and assigns it to the Lag field.
func (o *LagsPutRequest) SetLag(v map[string]ConfigPutRequestLagLagName) {
	o.Lag = &v
}

func (o LagsPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LagsPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Lag) {
		toSerialize["lag"] = o.Lag
	}
	return toSerialize, nil
}

type NullableLagsPutRequest struct {
	value *LagsPutRequest
	isSet bool
}

func (v NullableLagsPutRequest) Get() *LagsPutRequest {
	return v.value
}

func (v *NullableLagsPutRequest) Set(val *LagsPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLagsPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLagsPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLagsPutRequest(val *LagsPutRequest) *NullableLagsPutRequest {
	return &NullableLagsPutRequest{value: val, isSet: true}
}

func (v NullableLagsPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLagsPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


