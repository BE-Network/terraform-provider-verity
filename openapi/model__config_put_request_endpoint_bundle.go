/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestEndpointBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestEndpointBundle{}

// ConfigPutRequestEndpointBundle struct for ConfigPutRequestEndpointBundle
type ConfigPutRequestEndpointBundle struct {
	EndpointBundleName *BundlesPatchRequestEndpointBundleValue `json:"endpoint_bundle_name,omitempty"`
}

// NewConfigPutRequestEndpointBundle instantiates a new ConfigPutRequestEndpointBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestEndpointBundle() *ConfigPutRequestEndpointBundle {
	this := ConfigPutRequestEndpointBundle{}
	return &this
}

// NewConfigPutRequestEndpointBundleWithDefaults instantiates a new ConfigPutRequestEndpointBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestEndpointBundleWithDefaults() *ConfigPutRequestEndpointBundle {
	this := ConfigPutRequestEndpointBundle{}
	return &this
}

// GetEndpointBundleName returns the EndpointBundleName field value if set, zero value otherwise.
func (o *ConfigPutRequestEndpointBundle) GetEndpointBundleName() BundlesPatchRequestEndpointBundleValue {
	if o == nil || IsNil(o.EndpointBundleName) {
		var ret BundlesPatchRequestEndpointBundleValue
		return ret
	}
	return *o.EndpointBundleName
}

// GetEndpointBundleNameOk returns a tuple with the EndpointBundleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestEndpointBundle) GetEndpointBundleNameOk() (*BundlesPatchRequestEndpointBundleValue, bool) {
	if o == nil || IsNil(o.EndpointBundleName) {
		return nil, false
	}
	return o.EndpointBundleName, true
}

// HasEndpointBundleName returns a boolean if a field has been set.
func (o *ConfigPutRequestEndpointBundle) HasEndpointBundleName() bool {
	if o != nil && !IsNil(o.EndpointBundleName) {
		return true
	}

	return false
}

// SetEndpointBundleName gets a reference to the given BundlesPatchRequestEndpointBundleValue and assigns it to the EndpointBundleName field.
func (o *ConfigPutRequestEndpointBundle) SetEndpointBundleName(v BundlesPatchRequestEndpointBundleValue) {
	o.EndpointBundleName = &v
}

func (o ConfigPutRequestEndpointBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestEndpointBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndpointBundleName) {
		toSerialize["endpoint_bundle_name"] = o.EndpointBundleName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestEndpointBundle struct {
	value *ConfigPutRequestEndpointBundle
	isSet bool
}

func (v NullableConfigPutRequestEndpointBundle) Get() *ConfigPutRequestEndpointBundle {
	return v.value
}

func (v *NullableConfigPutRequestEndpointBundle) Set(val *ConfigPutRequestEndpointBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestEndpointBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestEndpointBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestEndpointBundle(val *ConfigPutRequestEndpointBundle) *NullableConfigPutRequestEndpointBundle {
	return &NullableConfigPutRequestEndpointBundle{value: val, isSet: true}
}

func (v NullableConfigPutRequestEndpointBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestEndpointBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


