/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// RouteMapClausesAPIService RouteMapClausesAPI service
type RouteMapClausesAPIService service

type ApiRoutemapclausesDeleteRequest struct {
	ctx context.Context
	ApiService *RouteMapClausesAPIService
	routeMapClauseName *[]string
	changesetName *string
}

func (r ApiRoutemapclausesDeleteRequest) RouteMapClauseName(routeMapClauseName []string) ApiRoutemapclausesDeleteRequest {
	r.routeMapClauseName = &routeMapClauseName
	return r
}

func (r ApiRoutemapclausesDeleteRequest) ChangesetName(changesetName string) ApiRoutemapclausesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiRoutemapclausesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RoutemapclausesDeleteExecute(r)
}

/*
RoutemapclausesDelete Delete Route Map Clause

Deletes an existing Route Map Clause from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRoutemapclausesDeleteRequest
*/
func (a *RouteMapClausesAPIService) RoutemapclausesDelete(ctx context.Context) ApiRoutemapclausesDeleteRequest {
	return ApiRoutemapclausesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RouteMapClausesAPIService) RoutemapclausesDeleteExecute(r ApiRoutemapclausesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMapClausesAPIService.RoutemapclausesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routemapclauses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routeMapClauseName == nil {
		return nil, reportError("routeMapClauseName is required and must be specified")
	}

	{
		t := *r.routeMapClauseName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "route_map_clause_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "route_map_clause_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRoutemapclausesGetRequest struct {
	ctx context.Context
	ApiService *RouteMapClausesAPIService
	routeMapClauseName *string
	includeData *bool
	changesetName *string
}

func (r ApiRoutemapclausesGetRequest) RouteMapClauseName(routeMapClauseName string) ApiRoutemapclausesGetRequest {
	r.routeMapClauseName = &routeMapClauseName
	return r
}

func (r ApiRoutemapclausesGetRequest) IncludeData(includeData bool) ApiRoutemapclausesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiRoutemapclausesGetRequest) ChangesetName(changesetName string) ApiRoutemapclausesGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiRoutemapclausesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.RoutemapclausesGetExecute(r)
}

/*
RoutemapclausesGet Get all Route Map Clauses

Retrieves all Route Map Clauses from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRoutemapclausesGetRequest
*/
func (a *RouteMapClausesAPIService) RoutemapclausesGet(ctx context.Context) ApiRoutemapclausesGetRequest {
	return ApiRoutemapclausesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RouteMapClausesAPIService) RoutemapclausesGetExecute(r ApiRoutemapclausesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMapClausesAPIService.RoutemapclausesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routemapclauses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.routeMapClauseName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "route_map_clause_name", r.routeMapClauseName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRoutemapclausesPatchRequest struct {
	ctx context.Context
	ApiService *RouteMapClausesAPIService
	changesetName *string
	routemapclausesPutRequest *RoutemapclausesPutRequest
}

func (r ApiRoutemapclausesPatchRequest) ChangesetName(changesetName string) ApiRoutemapclausesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiRoutemapclausesPatchRequest) RoutemapclausesPutRequest(routemapclausesPutRequest RoutemapclausesPutRequest) ApiRoutemapclausesPatchRequest {
	r.routemapclausesPutRequest = &routemapclausesPutRequest
	return r
}

func (r ApiRoutemapclausesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.RoutemapclausesPatchExecute(r)
}

/*
RoutemapclausesPatch Update Route Map Clause

Update Route Map Clause into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRoutemapclausesPatchRequest
*/
func (a *RouteMapClausesAPIService) RoutemapclausesPatch(ctx context.Context) ApiRoutemapclausesPatchRequest {
	return ApiRoutemapclausesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RouteMapClausesAPIService) RoutemapclausesPatchExecute(r ApiRoutemapclausesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMapClausesAPIService.RoutemapclausesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routemapclauses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routemapclausesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRoutemapclausesPutRequest struct {
	ctx context.Context
	ApiService *RouteMapClausesAPIService
	changesetName *string
	routemapclausesPutRequest *RoutemapclausesPutRequest
}

func (r ApiRoutemapclausesPutRequest) ChangesetName(changesetName string) ApiRoutemapclausesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiRoutemapclausesPutRequest) RoutemapclausesPutRequest(routemapclausesPutRequest RoutemapclausesPutRequest) ApiRoutemapclausesPutRequest {
	r.routemapclausesPutRequest = &routemapclausesPutRequest
	return r
}

func (r ApiRoutemapclausesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.RoutemapclausesPutExecute(r)
}

/*
RoutemapclausesPut Create Route Map Clause

Create Route Map Clause into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRoutemapclausesPutRequest
*/
func (a *RouteMapClausesAPIService) RoutemapclausesPut(ctx context.Context) ApiRoutemapclausesPutRequest {
	return ApiRoutemapclausesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RouteMapClausesAPIService) RoutemapclausesPutExecute(r ApiRoutemapclausesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMapClausesAPIService.RoutemapclausesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routemapclauses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routemapclausesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
