/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// SFlowCollectorsAPIService SFlowCollectorsAPI service
type SFlowCollectorsAPIService service

type ApiSflowcollectorsDeleteRequest struct {
	ctx context.Context
	ApiService *SFlowCollectorsAPIService
	sflowCollectorName *[]string
	changesetName *string
}

func (r ApiSflowcollectorsDeleteRequest) SflowCollectorName(sflowCollectorName []string) ApiSflowcollectorsDeleteRequest {
	r.sflowCollectorName = &sflowCollectorName
	return r
}

func (r ApiSflowcollectorsDeleteRequest) ChangesetName(changesetName string) ApiSflowcollectorsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSflowcollectorsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SflowcollectorsDeleteExecute(r)
}

/*
SflowcollectorsDelete Delete sFlow Collector

Deletes an existing sFlow Collector from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSflowcollectorsDeleteRequest
*/
func (a *SFlowCollectorsAPIService) SflowcollectorsDelete(ctx context.Context) ApiSflowcollectorsDeleteRequest {
	return ApiSflowcollectorsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SFlowCollectorsAPIService) SflowcollectorsDeleteExecute(r ApiSflowcollectorsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SFlowCollectorsAPIService.SflowcollectorsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sflowcollectors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sflowCollectorName == nil {
		return nil, reportError("sflowCollectorName is required and must be specified")
	}

	{
		t := *r.sflowCollectorName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sflow_collector_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sflow_collector_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSflowcollectorsGetRequest struct {
	ctx context.Context
	ApiService *SFlowCollectorsAPIService
	sflowCollectorName *string
	includeData *bool
	changesetName *string
}

func (r ApiSflowcollectorsGetRequest) SflowCollectorName(sflowCollectorName string) ApiSflowcollectorsGetRequest {
	r.sflowCollectorName = &sflowCollectorName
	return r
}

func (r ApiSflowcollectorsGetRequest) IncludeData(includeData bool) ApiSflowcollectorsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiSflowcollectorsGetRequest) ChangesetName(changesetName string) ApiSflowcollectorsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSflowcollectorsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SflowcollectorsGetExecute(r)
}

/*
SflowcollectorsGet Get all sFlow Collectors

Downloads all sFlow Collectors from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSflowcollectorsGetRequest
*/
func (a *SFlowCollectorsAPIService) SflowcollectorsGet(ctx context.Context) ApiSflowcollectorsGetRequest {
	return ApiSflowcollectorsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SFlowCollectorsAPIService) SflowcollectorsGetExecute(r ApiSflowcollectorsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SFlowCollectorsAPIService.SflowcollectorsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sflowcollectors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sflowCollectorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sflow_collector_name", r.sflowCollectorName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSflowcollectorsPatchRequest struct {
	ctx context.Context
	ApiService *SFlowCollectorsAPIService
	changesetName *string
	sflowcollectorsPutRequest *SflowcollectorsPutRequest
}

func (r ApiSflowcollectorsPatchRequest) ChangesetName(changesetName string) ApiSflowcollectorsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSflowcollectorsPatchRequest) SflowcollectorsPutRequest(sflowcollectorsPutRequest SflowcollectorsPutRequest) ApiSflowcollectorsPatchRequest {
	r.sflowcollectorsPutRequest = &sflowcollectorsPutRequest
	return r
}

func (r ApiSflowcollectorsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.SflowcollectorsPatchExecute(r)
}

/*
SflowcollectorsPatch Update sFlow Collector

Update sFlow Collector into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSflowcollectorsPatchRequest
*/
func (a *SFlowCollectorsAPIService) SflowcollectorsPatch(ctx context.Context) ApiSflowcollectorsPatchRequest {
	return ApiSflowcollectorsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SFlowCollectorsAPIService) SflowcollectorsPatchExecute(r ApiSflowcollectorsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SFlowCollectorsAPIService.SflowcollectorsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sflowcollectors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sflowcollectorsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSflowcollectorsPutRequest struct {
	ctx context.Context
	ApiService *SFlowCollectorsAPIService
	changesetName *string
	sflowcollectorsPutRequest *SflowcollectorsPutRequest
}

func (r ApiSflowcollectorsPutRequest) ChangesetName(changesetName string) ApiSflowcollectorsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSflowcollectorsPutRequest) SflowcollectorsPutRequest(sflowcollectorsPutRequest SflowcollectorsPutRequest) ApiSflowcollectorsPutRequest {
	r.sflowcollectorsPutRequest = &sflowcollectorsPutRequest
	return r
}

func (r ApiSflowcollectorsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.SflowcollectorsPutExecute(r)
}

/*
SflowcollectorsPut Create sFlow Collector

Create sFlow Collector into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSflowcollectorsPutRequest
*/
func (a *SFlowCollectorsAPIService) SflowcollectorsPut(ctx context.Context) ApiSflowcollectorsPutRequest {
	return ApiSflowcollectorsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SFlowCollectorsAPIService) SflowcollectorsPutExecute(r ApiSflowcollectorsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SFlowCollectorsAPIService.SflowcollectorsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sflowcollectors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sflowcollectorsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
