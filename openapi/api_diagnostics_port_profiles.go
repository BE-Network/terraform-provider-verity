/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DiagnosticsPortProfilesAPIService DiagnosticsPortProfilesAPI service
type DiagnosticsPortProfilesAPIService service

type ApiDiagnosticsportprofilesDeleteRequest struct {
	ctx context.Context
	ApiService *DiagnosticsPortProfilesAPIService
	diagnosticsPortProfileName *[]string
	changesetName *string
}

func (r ApiDiagnosticsportprofilesDeleteRequest) DiagnosticsPortProfileName(diagnosticsPortProfileName []string) ApiDiagnosticsportprofilesDeleteRequest {
	r.diagnosticsPortProfileName = &diagnosticsPortProfileName
	return r
}

func (r ApiDiagnosticsportprofilesDeleteRequest) ChangesetName(changesetName string) ApiDiagnosticsportprofilesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsportprofilesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsportprofilesDeleteExecute(r)
}

/*
DiagnosticsportprofilesDelete Delete Diagnostics Port Profile

Deletes an existing Diagnostics Port Profile from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsportprofilesDeleteRequest
*/
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesDelete(ctx context.Context) ApiDiagnosticsportprofilesDeleteRequest {
	return ApiDiagnosticsportprofilesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesDeleteExecute(r ApiDiagnosticsportprofilesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsPortProfilesAPIService.DiagnosticsportprofilesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.diagnosticsPortProfileName == nil {
		return nil, reportError("diagnosticsPortProfileName is required and must be specified")
	}

	{
		t := *r.diagnosticsPortProfileName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "diagnostics_port_profile_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "diagnostics_port_profile_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDiagnosticsportprofilesGetRequest struct {
	ctx context.Context
	ApiService *DiagnosticsPortProfilesAPIService
	diagnosticsPortProfileName *string
	includeData *bool
	changesetName *string
}

func (r ApiDiagnosticsportprofilesGetRequest) DiagnosticsPortProfileName(diagnosticsPortProfileName string) ApiDiagnosticsportprofilesGetRequest {
	r.diagnosticsPortProfileName = &diagnosticsPortProfileName
	return r
}

func (r ApiDiagnosticsportprofilesGetRequest) IncludeData(includeData bool) ApiDiagnosticsportprofilesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiDiagnosticsportprofilesGetRequest) ChangesetName(changesetName string) ApiDiagnosticsportprofilesGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsportprofilesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsportprofilesGetExecute(r)
}

/*
DiagnosticsportprofilesGet Get all Diagnostics Port Profiles

Downloads all Diagnostics Port Profiles from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsportprofilesGetRequest
*/
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesGet(ctx context.Context) ApiDiagnosticsportprofilesGetRequest {
	return ApiDiagnosticsportprofilesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesGetExecute(r ApiDiagnosticsportprofilesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsPortProfilesAPIService.DiagnosticsportprofilesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.diagnosticsPortProfileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "diagnostics_port_profile_name", r.diagnosticsPortProfileName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDiagnosticsportprofilesPatchRequest struct {
	ctx context.Context
	ApiService *DiagnosticsPortProfilesAPIService
	changesetName *string
	diagnosticsportprofilesPutRequest *DiagnosticsportprofilesPutRequest
}

func (r ApiDiagnosticsportprofilesPatchRequest) ChangesetName(changesetName string) ApiDiagnosticsportprofilesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsportprofilesPatchRequest) DiagnosticsportprofilesPutRequest(diagnosticsportprofilesPutRequest DiagnosticsportprofilesPutRequest) ApiDiagnosticsportprofilesPatchRequest {
	r.diagnosticsportprofilesPutRequest = &diagnosticsportprofilesPutRequest
	return r
}

func (r ApiDiagnosticsportprofilesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsportprofilesPatchExecute(r)
}

/*
DiagnosticsportprofilesPatch Update Diagnostics Port Profile

Update Diagnostics Port Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsportprofilesPatchRequest
*/
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesPatch(ctx context.Context) ApiDiagnosticsportprofilesPatchRequest {
	return ApiDiagnosticsportprofilesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesPatchExecute(r ApiDiagnosticsportprofilesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsPortProfilesAPIService.DiagnosticsportprofilesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.diagnosticsportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDiagnosticsportprofilesPutRequest struct {
	ctx context.Context
	ApiService *DiagnosticsPortProfilesAPIService
	changesetName *string
	diagnosticsportprofilesPutRequest *DiagnosticsportprofilesPutRequest
}

func (r ApiDiagnosticsportprofilesPutRequest) ChangesetName(changesetName string) ApiDiagnosticsportprofilesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsportprofilesPutRequest) DiagnosticsportprofilesPutRequest(diagnosticsportprofilesPutRequest DiagnosticsportprofilesPutRequest) ApiDiagnosticsportprofilesPutRequest {
	r.diagnosticsportprofilesPutRequest = &diagnosticsportprofilesPutRequest
	return r
}

func (r ApiDiagnosticsportprofilesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsportprofilesPutExecute(r)
}

/*
DiagnosticsportprofilesPut Create Diagnostics Port Profile

Create Diagnostics Port Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsportprofilesPutRequest
*/
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesPut(ctx context.Context) ApiDiagnosticsportprofilesPutRequest {
	return ApiDiagnosticsportprofilesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsPortProfilesAPIService) DiagnosticsportprofilesPutExecute(r ApiDiagnosticsportprofilesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsPortProfilesAPIService.DiagnosticsportprofilesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.diagnosticsportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
