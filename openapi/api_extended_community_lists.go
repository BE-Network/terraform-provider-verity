/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ExtendedCommunityListsAPIService ExtendedCommunityListsAPI service
type ExtendedCommunityListsAPIService service

type ApiExtendedcommunitylistsDeleteRequest struct {
	ctx context.Context
	ApiService *ExtendedCommunityListsAPIService
	extendedCommunityListName *[]string
	changesetName *string
}

func (r ApiExtendedcommunitylistsDeleteRequest) ExtendedCommunityListName(extendedCommunityListName []string) ApiExtendedcommunitylistsDeleteRequest {
	r.extendedCommunityListName = &extendedCommunityListName
	return r
}

func (r ApiExtendedcommunitylistsDeleteRequest) ChangesetName(changesetName string) ApiExtendedcommunitylistsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiExtendedcommunitylistsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtendedcommunitylistsDeleteExecute(r)
}

/*
ExtendedcommunitylistsDelete Delete Extended Community List

Deletes an existing Extended Community List from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtendedcommunitylistsDeleteRequest
*/
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsDelete(ctx context.Context) ApiExtendedcommunitylistsDeleteRequest {
	return ApiExtendedcommunitylistsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsDeleteExecute(r ApiExtendedcommunitylistsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtendedCommunityListsAPIService.ExtendedcommunitylistsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extendedcommunitylists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.extendedCommunityListName == nil {
		return nil, reportError("extendedCommunityListName is required and must be specified")
	}

	{
		t := *r.extendedCommunityListName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "extended_community_list_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "extended_community_list_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtendedcommunitylistsGetRequest struct {
	ctx context.Context
	ApiService *ExtendedCommunityListsAPIService
	extendedCommunityListName *string
	includeData *bool
	changesetName *string
}

func (r ApiExtendedcommunitylistsGetRequest) ExtendedCommunityListName(extendedCommunityListName string) ApiExtendedcommunitylistsGetRequest {
	r.extendedCommunityListName = &extendedCommunityListName
	return r
}

func (r ApiExtendedcommunitylistsGetRequest) IncludeData(includeData bool) ApiExtendedcommunitylistsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiExtendedcommunitylistsGetRequest) ChangesetName(changesetName string) ApiExtendedcommunitylistsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiExtendedcommunitylistsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtendedcommunitylistsGetExecute(r)
}

/*
ExtendedcommunitylistsGet Get all Extended Community Lists

Retrieves all Extended Community Lists from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtendedcommunitylistsGetRequest
*/
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsGet(ctx context.Context) ApiExtendedcommunitylistsGetRequest {
	return ApiExtendedcommunitylistsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsGetExecute(r ApiExtendedcommunitylistsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtendedCommunityListsAPIService.ExtendedcommunitylistsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extendedcommunitylists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.extendedCommunityListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended_community_list_name", r.extendedCommunityListName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtendedcommunitylistsPatchRequest struct {
	ctx context.Context
	ApiService *ExtendedCommunityListsAPIService
	changesetName *string
	extendedcommunitylistsPutRequest *ExtendedcommunitylistsPutRequest
}

func (r ApiExtendedcommunitylistsPatchRequest) ChangesetName(changesetName string) ApiExtendedcommunitylistsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiExtendedcommunitylistsPatchRequest) ExtendedcommunitylistsPutRequest(extendedcommunitylistsPutRequest ExtendedcommunitylistsPutRequest) ApiExtendedcommunitylistsPatchRequest {
	r.extendedcommunitylistsPutRequest = &extendedcommunitylistsPutRequest
	return r
}

func (r ApiExtendedcommunitylistsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtendedcommunitylistsPatchExecute(r)
}

/*
ExtendedcommunitylistsPatch Update Extended Community List

Update Extended Community List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtendedcommunitylistsPatchRequest
*/
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsPatch(ctx context.Context) ApiExtendedcommunitylistsPatchRequest {
	return ApiExtendedcommunitylistsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsPatchExecute(r ApiExtendedcommunitylistsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtendedCommunityListsAPIService.ExtendedcommunitylistsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extendedcommunitylists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extendedcommunitylistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtendedcommunitylistsPutRequest struct {
	ctx context.Context
	ApiService *ExtendedCommunityListsAPIService
	changesetName *string
	extendedcommunitylistsPutRequest *ExtendedcommunitylistsPutRequest
}

func (r ApiExtendedcommunitylistsPutRequest) ChangesetName(changesetName string) ApiExtendedcommunitylistsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiExtendedcommunitylistsPutRequest) ExtendedcommunitylistsPutRequest(extendedcommunitylistsPutRequest ExtendedcommunitylistsPutRequest) ApiExtendedcommunitylistsPutRequest {
	r.extendedcommunitylistsPutRequest = &extendedcommunitylistsPutRequest
	return r
}

func (r ApiExtendedcommunitylistsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtendedcommunitylistsPutExecute(r)
}

/*
ExtendedcommunitylistsPut Create Extended Community List

Create Extended Community List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtendedcommunitylistsPutRequest
*/
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsPut(ctx context.Context) ApiExtendedcommunitylistsPutRequest {
	return ApiExtendedcommunitylistsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtendedCommunityListsAPIService) ExtendedcommunitylistsPutExecute(r ApiExtendedcommunitylistsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtendedCommunityListsAPIService.ExtendedcommunitylistsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extendedcommunitylists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extendedcommunitylistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
