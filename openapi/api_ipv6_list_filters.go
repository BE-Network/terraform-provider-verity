/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// IPv6ListFiltersAPIService IPv6ListFiltersAPI service
type IPv6ListFiltersAPIService service

type ApiIpv6listsDeleteRequest struct {
	ctx context.Context
	ApiService *IPv6ListFiltersAPIService
	ipv6ListFilterName *[]string
	changesetName *string
}

func (r ApiIpv6listsDeleteRequest) Ipv6ListFilterName(ipv6ListFilterName []string) ApiIpv6listsDeleteRequest {
	r.ipv6ListFilterName = &ipv6ListFilterName
	return r
}

func (r ApiIpv6listsDeleteRequest) ChangesetName(changesetName string) ApiIpv6listsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6listsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6listsDeleteExecute(r)
}

/*
Ipv6listsDelete Delete IPv6 List Filter

Deletes an existing IPv6 List Filter from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6listsDeleteRequest
*/
func (a *IPv6ListFiltersAPIService) Ipv6listsDelete(ctx context.Context) ApiIpv6listsDeleteRequest {
	return ApiIpv6listsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6ListFiltersAPIService) Ipv6listsDeleteExecute(r ApiIpv6listsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6ListFiltersAPIService.Ipv6listsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6ListFilterName == nil {
		return nil, reportError("ipv6ListFilterName is required and must be specified")
	}

	{
		t := *r.ipv6ListFilterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6_list_filter_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6_list_filter_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv6listsGetRequest struct {
	ctx context.Context
	ApiService *IPv6ListFiltersAPIService
	ipv6ListFilterName *string
	includeData *bool
	changesetName *string
}

func (r ApiIpv6listsGetRequest) Ipv6ListFilterName(ipv6ListFilterName string) ApiIpv6listsGetRequest {
	r.ipv6ListFilterName = &ipv6ListFilterName
	return r
}

func (r ApiIpv6listsGetRequest) IncludeData(includeData bool) ApiIpv6listsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiIpv6listsGetRequest) ChangesetName(changesetName string) ApiIpv6listsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6listsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6listsGetExecute(r)
}

/*
Ipv6listsGet Get all IPv6 List Filters

Retrieves all IPv6 List Filters from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6listsGetRequest
*/
func (a *IPv6ListFiltersAPIService) Ipv6listsGet(ctx context.Context) ApiIpv6listsGetRequest {
	return ApiIpv6listsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6ListFiltersAPIService) Ipv6listsGetExecute(r ApiIpv6listsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6ListFiltersAPIService.Ipv6listsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ipv6ListFilterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6_list_filter_name", r.ipv6ListFilterName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv6listsPatchRequest struct {
	ctx context.Context
	ApiService *IPv6ListFiltersAPIService
	changesetName *string
	ipv6listsPutRequest *Ipv6listsPutRequest
}

func (r ApiIpv6listsPatchRequest) ChangesetName(changesetName string) ApiIpv6listsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6listsPatchRequest) Ipv6listsPutRequest(ipv6listsPutRequest Ipv6listsPutRequest) ApiIpv6listsPatchRequest {
	r.ipv6listsPutRequest = &ipv6listsPutRequest
	return r
}

func (r ApiIpv6listsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6listsPatchExecute(r)
}

/*
Ipv6listsPatch Update IPv6 List Filter

Update IPv6 List Filter into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6listsPatchRequest
*/
func (a *IPv6ListFiltersAPIService) Ipv6listsPatch(ctx context.Context) ApiIpv6listsPatchRequest {
	return ApiIpv6listsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6ListFiltersAPIService) Ipv6listsPatchExecute(r ApiIpv6listsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6ListFiltersAPIService.Ipv6listsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv6listsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv6listsPutRequest struct {
	ctx context.Context
	ApiService *IPv6ListFiltersAPIService
	changesetName *string
	ipv6listsPutRequest *Ipv6listsPutRequest
}

func (r ApiIpv6listsPutRequest) ChangesetName(changesetName string) ApiIpv6listsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6listsPutRequest) Ipv6listsPutRequest(ipv6listsPutRequest Ipv6listsPutRequest) ApiIpv6listsPutRequest {
	r.ipv6listsPutRequest = &ipv6listsPutRequest
	return r
}

func (r ApiIpv6listsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6listsPutExecute(r)
}

/*
Ipv6listsPut Create IPv6 List Filter

Create IPv6 List Filter into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6listsPutRequest
*/
func (a *IPv6ListFiltersAPIService) Ipv6listsPut(ctx context.Context) ApiIpv6listsPutRequest {
	return ApiIpv6listsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6ListFiltersAPIService) Ipv6listsPutExecute(r ApiIpv6listsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6ListFiltersAPIService.Ipv6listsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv6listsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
