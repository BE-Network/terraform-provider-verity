/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// IPv4ListFiltersAPIService IPv4ListFiltersAPI service
type IPv4ListFiltersAPIService service

type ApiIpv4listsDeleteRequest struct {
	ctx context.Context
	ApiService *IPv4ListFiltersAPIService
	ipv4ListFilterName *[]string
	changesetName *string
}

func (r ApiIpv4listsDeleteRequest) Ipv4ListFilterName(ipv4ListFilterName []string) ApiIpv4listsDeleteRequest {
	r.ipv4ListFilterName = &ipv4ListFilterName
	return r
}

func (r ApiIpv4listsDeleteRequest) ChangesetName(changesetName string) ApiIpv4listsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4listsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4listsDeleteExecute(r)
}

/*
Ipv4listsDelete Delete IPv4 List Filter

Deletes an existing IPv4 List Filter from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4listsDeleteRequest
*/
func (a *IPv4ListFiltersAPIService) Ipv4listsDelete(ctx context.Context) ApiIpv4listsDeleteRequest {
	return ApiIpv4listsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4ListFiltersAPIService) Ipv4listsDeleteExecute(r ApiIpv4listsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4ListFiltersAPIService.Ipv4listsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv4ListFilterName == nil {
		return nil, reportError("ipv4ListFilterName is required and must be specified")
	}

	{
		t := *r.ipv4ListFilterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4_list_filter_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4_list_filter_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv4listsGetRequest struct {
	ctx context.Context
	ApiService *IPv4ListFiltersAPIService
	ipv4ListFilterName *string
	includeData *bool
	changesetName *string
}

func (r ApiIpv4listsGetRequest) Ipv4ListFilterName(ipv4ListFilterName string) ApiIpv4listsGetRequest {
	r.ipv4ListFilterName = &ipv4ListFilterName
	return r
}

func (r ApiIpv4listsGetRequest) IncludeData(includeData bool) ApiIpv4listsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiIpv4listsGetRequest) ChangesetName(changesetName string) ApiIpv4listsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4listsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4listsGetExecute(r)
}

/*
Ipv4listsGet Get all IPv4 List Filters

Retrieves all IPv4 List Filters from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4listsGetRequest
*/
func (a *IPv4ListFiltersAPIService) Ipv4listsGet(ctx context.Context) ApiIpv4listsGetRequest {
	return ApiIpv4listsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4ListFiltersAPIService) Ipv4listsGetExecute(r ApiIpv4listsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4ListFiltersAPIService.Ipv4listsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ipv4ListFilterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4_list_filter_name", r.ipv4ListFilterName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv4listsPatchRequest struct {
	ctx context.Context
	ApiService *IPv4ListFiltersAPIService
	changesetName *string
	ipv4listsPutRequest *Ipv4listsPutRequest
}

func (r ApiIpv4listsPatchRequest) ChangesetName(changesetName string) ApiIpv4listsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4listsPatchRequest) Ipv4listsPutRequest(ipv4listsPutRequest Ipv4listsPutRequest) ApiIpv4listsPatchRequest {
	r.ipv4listsPutRequest = &ipv4listsPutRequest
	return r
}

func (r ApiIpv4listsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4listsPatchExecute(r)
}

/*
Ipv4listsPatch Update IPv4 List Filter

Update IPv4 List Filter into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4listsPatchRequest
*/
func (a *IPv4ListFiltersAPIService) Ipv4listsPatch(ctx context.Context) ApiIpv4listsPatchRequest {
	return ApiIpv4listsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4ListFiltersAPIService) Ipv4listsPatchExecute(r ApiIpv4listsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4ListFiltersAPIService.Ipv4listsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv4listsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv4listsPutRequest struct {
	ctx context.Context
	ApiService *IPv4ListFiltersAPIService
	changesetName *string
	ipv4listsPutRequest *Ipv4listsPutRequest
}

func (r ApiIpv4listsPutRequest) ChangesetName(changesetName string) ApiIpv4listsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv4listsPutRequest) Ipv4listsPutRequest(ipv4listsPutRequest Ipv4listsPutRequest) ApiIpv4listsPutRequest {
	r.ipv4listsPutRequest = &ipv4listsPutRequest
	return r
}

func (r ApiIpv4listsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv4listsPutExecute(r)
}

/*
Ipv4listsPut Create IPv4 List Filter

Create IPv4 List Filter into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv4listsPutRequest
*/
func (a *IPv4ListFiltersAPIService) Ipv4listsPut(ctx context.Context) ApiIpv4listsPutRequest {
	return ApiIpv4listsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv4ListFiltersAPIService) Ipv4listsPutExecute(r ApiIpv4listsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv4ListFiltersAPIService.Ipv4listsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv4lists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv4listsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
