/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DeviceSettingsAPIService DeviceSettingsAPI service
type DeviceSettingsAPIService service

type ApiDevicesettingsDeleteRequest struct {
	ctx context.Context
	ApiService *DeviceSettingsAPIService
	ethDeviceProfilesName *[]string
	changesetName *string
}

func (r ApiDevicesettingsDeleteRequest) EthDeviceProfilesName(ethDeviceProfilesName []string) ApiDevicesettingsDeleteRequest {
	r.ethDeviceProfilesName = &ethDeviceProfilesName
	return r
}

func (r ApiDevicesettingsDeleteRequest) ChangesetName(changesetName string) ApiDevicesettingsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicesettingsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicesettingsDeleteExecute(r)
}

/*
DevicesettingsDelete Delete Device Settings

Deletes an existing Device Settings from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicesettingsDeleteRequest
*/
func (a *DeviceSettingsAPIService) DevicesettingsDelete(ctx context.Context) ApiDevicesettingsDeleteRequest {
	return ApiDevicesettingsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceSettingsAPIService) DevicesettingsDeleteExecute(r ApiDevicesettingsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceSettingsAPIService.DevicesettingsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ethDeviceProfilesName == nil {
		return nil, reportError("ethDeviceProfilesName is required and must be specified")
	}

	{
		t := *r.ethDeviceProfilesName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eth_device_profiles_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eth_device_profiles_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevicesettingsGetRequest struct {
	ctx context.Context
	ApiService *DeviceSettingsAPIService
	ethDeviceProfilesName *string
	includeData *bool
	changesetName *string
}

func (r ApiDevicesettingsGetRequest) EthDeviceProfilesName(ethDeviceProfilesName string) ApiDevicesettingsGetRequest {
	r.ethDeviceProfilesName = &ethDeviceProfilesName
	return r
}

func (r ApiDevicesettingsGetRequest) IncludeData(includeData bool) ApiDevicesettingsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiDevicesettingsGetRequest) ChangesetName(changesetName string) ApiDevicesettingsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicesettingsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicesettingsGetExecute(r)
}

/*
DevicesettingsGet Get all Device Settings

Retrieves all Device Settings from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicesettingsGetRequest
*/
func (a *DeviceSettingsAPIService) DevicesettingsGet(ctx context.Context) ApiDevicesettingsGetRequest {
	return ApiDevicesettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceSettingsAPIService) DevicesettingsGetExecute(r ApiDevicesettingsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceSettingsAPIService.DevicesettingsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ethDeviceProfilesName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eth_device_profiles_name", r.ethDeviceProfilesName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevicesettingsPatchRequest struct {
	ctx context.Context
	ApiService *DeviceSettingsAPIService
	changesetName *string
	devicesettingsPutRequest *DevicesettingsPutRequest
}

func (r ApiDevicesettingsPatchRequest) ChangesetName(changesetName string) ApiDevicesettingsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicesettingsPatchRequest) DevicesettingsPutRequest(devicesettingsPutRequest DevicesettingsPutRequest) ApiDevicesettingsPatchRequest {
	r.devicesettingsPutRequest = &devicesettingsPutRequest
	return r
}

func (r ApiDevicesettingsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicesettingsPatchExecute(r)
}

/*
DevicesettingsPatch Update Device Settings

Update Device Settings into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicesettingsPatchRequest
*/
func (a *DeviceSettingsAPIService) DevicesettingsPatch(ctx context.Context) ApiDevicesettingsPatchRequest {
	return ApiDevicesettingsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceSettingsAPIService) DevicesettingsPatchExecute(r ApiDevicesettingsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceSettingsAPIService.DevicesettingsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.devicesettingsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevicesettingsPutRequest struct {
	ctx context.Context
	ApiService *DeviceSettingsAPIService
	changesetName *string
	devicesettingsPutRequest *DevicesettingsPutRequest
}

func (r ApiDevicesettingsPutRequest) ChangesetName(changesetName string) ApiDevicesettingsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicesettingsPutRequest) DevicesettingsPutRequest(devicesettingsPutRequest DevicesettingsPutRequest) ApiDevicesettingsPutRequest {
	r.devicesettingsPutRequest = &devicesettingsPutRequest
	return r
}

func (r ApiDevicesettingsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicesettingsPutExecute(r)
}

/*
DevicesettingsPut Create Device Settings

Create Device Settings into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicesettingsPutRequest
*/
func (a *DeviceSettingsAPIService) DevicesettingsPut(ctx context.Context) ApiDevicesettingsPutRequest {
	return ApiDevicesettingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceSettingsAPIService) DevicesettingsPutExecute(r ApiDevicesettingsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceSettingsAPIService.DevicesettingsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.devicesettingsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
