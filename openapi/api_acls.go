/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ACLsAPIService ACLsAPI service
type ACLsAPIService service

type ApiAclsDeleteRequest struct {
	ctx context.Context
	ApiService *ACLsAPIService
	ipFilterName *[]string
	ipVersion *string
	changesetName *string
}

func (r ApiAclsDeleteRequest) IpFilterName(ipFilterName []string) ApiAclsDeleteRequest {
	r.ipFilterName = &ipFilterName
	return r
}

func (r ApiAclsDeleteRequest) IpVersion(ipVersion string) ApiAclsDeleteRequest {
	r.ipVersion = &ipVersion
	return r
}

func (r ApiAclsDeleteRequest) ChangesetName(changesetName string) ApiAclsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAclsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AclsDeleteExecute(r)
}

/*
AclsDelete Delete IP Filter

Deletes an existing IP Filter from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAclsDeleteRequest
*/
func (a *ACLsAPIService) AclsDelete(ctx context.Context) ApiAclsDeleteRequest {
	return ApiAclsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ACLsAPIService) AclsDeleteExecute(r ApiAclsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLsAPIService.AclsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipFilterName == nil {
		return nil, reportError("ipFilterName is required and must be specified")
	}
	if r.ipVersion == nil {
		return nil, reportError("ipVersion is required and must be specified")
	}

	{
		t := *r.ipFilterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ip_filter_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ip_filter_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ip_version", r.ipVersion, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAclsGetRequest struct {
	ctx context.Context
	ApiService *ACLsAPIService
	ipVersion *string
	ipFilterName *string
	includeData *bool
	changesetName *string
}

func (r ApiAclsGetRequest) IpVersion(ipVersion string) ApiAclsGetRequest {
	r.ipVersion = &ipVersion
	return r
}

func (r ApiAclsGetRequest) IpFilterName(ipFilterName string) ApiAclsGetRequest {
	r.ipFilterName = &ipFilterName
	return r
}

func (r ApiAclsGetRequest) IncludeData(includeData bool) ApiAclsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiAclsGetRequest) ChangesetName(changesetName string) ApiAclsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAclsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AclsGetExecute(r)
}

/*
AclsGet Get all IP Filters

Retrieves all IP Filters from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAclsGetRequest
*/
func (a *ACLsAPIService) AclsGet(ctx context.Context) ApiAclsGetRequest {
	return ApiAclsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ACLsAPIService) AclsGetExecute(r ApiAclsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLsAPIService.AclsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipVersion == nil {
		return nil, reportError("ipVersion is required and must be specified")
	}

	if r.ipFilterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_filter_name", r.ipFilterName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ip_version", r.ipVersion, "form", "")
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAclsPatchRequest struct {
	ctx context.Context
	ApiService *ACLsAPIService
	ipVersion *string
	changesetName *string
	aclsPutRequest *AclsPutRequest
}

func (r ApiAclsPatchRequest) IpVersion(ipVersion string) ApiAclsPatchRequest {
	r.ipVersion = &ipVersion
	return r
}

func (r ApiAclsPatchRequest) ChangesetName(changesetName string) ApiAclsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAclsPatchRequest) AclsPutRequest(aclsPutRequest AclsPutRequest) ApiAclsPatchRequest {
	r.aclsPutRequest = &aclsPutRequest
	return r
}

func (r ApiAclsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.AclsPatchExecute(r)
}

/*
AclsPatch Update IP Filter

Update IP Filter into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAclsPatchRequest
*/
func (a *ACLsAPIService) AclsPatch(ctx context.Context) ApiAclsPatchRequest {
	return ApiAclsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ACLsAPIService) AclsPatchExecute(r ApiAclsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLsAPIService.AclsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipVersion == nil {
		return nil, reportError("ipVersion is required and must be specified")
	}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ip_version", r.ipVersion, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aclsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAclsPutRequest struct {
	ctx context.Context
	ApiService *ACLsAPIService
	ipVersion *string
	changesetName *string
	aclsPutRequest *AclsPutRequest
}

func (r ApiAclsPutRequest) IpVersion(ipVersion string) ApiAclsPutRequest {
	r.ipVersion = &ipVersion
	return r
}

func (r ApiAclsPutRequest) ChangesetName(changesetName string) ApiAclsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAclsPutRequest) AclsPutRequest(aclsPutRequest AclsPutRequest) ApiAclsPutRequest {
	r.aclsPutRequest = &aclsPutRequest
	return r
}

func (r ApiAclsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AclsPutExecute(r)
}

/*
AclsPut Create IP Filter

Create IP Filter into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAclsPutRequest
*/
func (a *ACLsAPIService) AclsPut(ctx context.Context) ApiAclsPutRequest {
	return ApiAclsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ACLsAPIService) AclsPutExecute(r ApiAclsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLsAPIService.AclsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipVersion == nil {
		return nil, reportError("ipVersion is required and must be specified")
	}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ip_version", r.ipVersion, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aclsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
