/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// PacketBrokerAPIService PacketBrokerAPI service
type PacketBrokerAPIService service

type ApiPacketbrokerDeleteRequest struct {
	ctx context.Context
	ApiService *PacketBrokerAPIService
	pbEgressProfileName *[]string
	changesetName *string
}

func (r ApiPacketbrokerDeleteRequest) PbEgressProfileName(pbEgressProfileName []string) ApiPacketbrokerDeleteRequest {
	r.pbEgressProfileName = &pbEgressProfileName
	return r
}

func (r ApiPacketbrokerDeleteRequest) ChangesetName(changesetName string) ApiPacketbrokerDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPacketbrokerDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketbrokerDeleteExecute(r)
}

/*
PacketbrokerDelete Delete PB Egress Profile

Deletes an existing PB Egress Profile from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketbrokerDeleteRequest
*/
func (a *PacketBrokerAPIService) PacketbrokerDelete(ctx context.Context) ApiPacketbrokerDeleteRequest {
	return ApiPacketbrokerDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketBrokerAPIService) PacketbrokerDeleteExecute(r ApiPacketbrokerDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketBrokerAPIService.PacketbrokerDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetbroker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pbEgressProfileName == nil {
		return nil, reportError("pbEgressProfileName is required and must be specified")
	}

	{
		t := *r.pbEgressProfileName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pb_egress_profile_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pb_egress_profile_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPacketbrokerGetRequest struct {
	ctx context.Context
	ApiService *PacketBrokerAPIService
	pbEgressProfileName *string
	includeData *bool
	changesetName *string
}

func (r ApiPacketbrokerGetRequest) PbEgressProfileName(pbEgressProfileName string) ApiPacketbrokerGetRequest {
	r.pbEgressProfileName = &pbEgressProfileName
	return r
}

func (r ApiPacketbrokerGetRequest) IncludeData(includeData bool) ApiPacketbrokerGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiPacketbrokerGetRequest) ChangesetName(changesetName string) ApiPacketbrokerGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPacketbrokerGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketbrokerGetExecute(r)
}

/*
PacketbrokerGet Get all PB Egress Profiles

Retrieves all PB Egress Profiles from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketbrokerGetRequest
*/
func (a *PacketBrokerAPIService) PacketbrokerGet(ctx context.Context) ApiPacketbrokerGetRequest {
	return ApiPacketbrokerGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketBrokerAPIService) PacketbrokerGetExecute(r ApiPacketbrokerGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketBrokerAPIService.PacketbrokerGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetbroker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pbEgressProfileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pb_egress_profile_name", r.pbEgressProfileName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPacketbrokerPatchRequest struct {
	ctx context.Context
	ApiService *PacketBrokerAPIService
	changesetName *string
	packetbrokerPutRequest *PacketbrokerPutRequest
}

func (r ApiPacketbrokerPatchRequest) ChangesetName(changesetName string) ApiPacketbrokerPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPacketbrokerPatchRequest) PacketbrokerPutRequest(packetbrokerPutRequest PacketbrokerPutRequest) ApiPacketbrokerPatchRequest {
	r.packetbrokerPutRequest = &packetbrokerPutRequest
	return r
}

func (r ApiPacketbrokerPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketbrokerPatchExecute(r)
}

/*
PacketbrokerPatch Update PB Egress Profile

Update PB Egress Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketbrokerPatchRequest
*/
func (a *PacketBrokerAPIService) PacketbrokerPatch(ctx context.Context) ApiPacketbrokerPatchRequest {
	return ApiPacketbrokerPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketBrokerAPIService) PacketbrokerPatchExecute(r ApiPacketbrokerPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketBrokerAPIService.PacketbrokerPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetbroker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.packetbrokerPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPacketbrokerPutRequest struct {
	ctx context.Context
	ApiService *PacketBrokerAPIService
	changesetName *string
	packetbrokerPutRequest *PacketbrokerPutRequest
}

func (r ApiPacketbrokerPutRequest) ChangesetName(changesetName string) ApiPacketbrokerPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPacketbrokerPutRequest) PacketbrokerPutRequest(packetbrokerPutRequest PacketbrokerPutRequest) ApiPacketbrokerPutRequest {
	r.packetbrokerPutRequest = &packetbrokerPutRequest
	return r
}

func (r ApiPacketbrokerPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketbrokerPutExecute(r)
}

/*
PacketbrokerPut Create PB Egress Profile

Create PB Egress Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketbrokerPutRequest
*/
func (a *PacketBrokerAPIService) PacketbrokerPut(ctx context.Context) ApiPacketbrokerPutRequest {
	return ApiPacketbrokerPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketBrokerAPIService) PacketbrokerPutExecute(r ApiPacketbrokerPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketBrokerAPIService.PacketbrokerPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetbroker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.packetbrokerPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
