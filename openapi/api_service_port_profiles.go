/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ServicePortProfilesAPIService ServicePortProfilesAPI service
type ServicePortProfilesAPIService service

type ApiServiceportprofilesDeleteRequest struct {
	ctx context.Context
	ApiService *ServicePortProfilesAPIService
	servicePortProfileName *[]string
	changesetName *string
}

func (r ApiServiceportprofilesDeleteRequest) ServicePortProfileName(servicePortProfileName []string) ApiServiceportprofilesDeleteRequest {
	r.servicePortProfileName = &servicePortProfileName
	return r
}

func (r ApiServiceportprofilesDeleteRequest) ChangesetName(changesetName string) ApiServiceportprofilesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiServiceportprofilesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ServiceportprofilesDeleteExecute(r)
}

/*
ServiceportprofilesDelete Delete Service Port Profile

Deletes an existing Service Port Profile from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServiceportprofilesDeleteRequest
*/
func (a *ServicePortProfilesAPIService) ServiceportprofilesDelete(ctx context.Context) ApiServiceportprofilesDeleteRequest {
	return ApiServiceportprofilesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServicePortProfilesAPIService) ServiceportprofilesDeleteExecute(r ApiServiceportprofilesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePortProfilesAPIService.ServiceportprofilesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/serviceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.servicePortProfileName == nil {
		return nil, reportError("servicePortProfileName is required and must be specified")
	}

	{
		t := *r.servicePortProfileName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "service_port_profile_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "service_port_profile_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServiceportprofilesGetRequest struct {
	ctx context.Context
	ApiService *ServicePortProfilesAPIService
	servicePortProfileName *string
	includeData *bool
}

func (r ApiServiceportprofilesGetRequest) ServicePortProfileName(servicePortProfileName string) ApiServiceportprofilesGetRequest {
	r.servicePortProfileName = &servicePortProfileName
	return r
}

func (r ApiServiceportprofilesGetRequest) IncludeData(includeData bool) ApiServiceportprofilesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiServiceportprofilesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ServiceportprofilesGetExecute(r)
}

/*
ServiceportprofilesGet Get all Service Port Profiles

Retrieves all Service Port Profiles from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServiceportprofilesGetRequest
*/
func (a *ServicePortProfilesAPIService) ServiceportprofilesGet(ctx context.Context) ApiServiceportprofilesGetRequest {
	return ApiServiceportprofilesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServicePortProfilesAPIService) ServiceportprofilesGetExecute(r ApiServiceportprofilesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePortProfilesAPIService.ServiceportprofilesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/serviceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.servicePortProfileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service_port_profile_name", r.servicePortProfileName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServiceportprofilesPatchRequest struct {
	ctx context.Context
	ApiService *ServicePortProfilesAPIService
	changesetName *string
	serviceportprofilesPutRequest *ServiceportprofilesPutRequest
}

func (r ApiServiceportprofilesPatchRequest) ChangesetName(changesetName string) ApiServiceportprofilesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiServiceportprofilesPatchRequest) ServiceportprofilesPutRequest(serviceportprofilesPutRequest ServiceportprofilesPutRequest) ApiServiceportprofilesPatchRequest {
	r.serviceportprofilesPutRequest = &serviceportprofilesPutRequest
	return r
}

func (r ApiServiceportprofilesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ServiceportprofilesPatchExecute(r)
}

/*
ServiceportprofilesPatch Update Service Port Profile

Update Service Port Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServiceportprofilesPatchRequest
*/
func (a *ServicePortProfilesAPIService) ServiceportprofilesPatch(ctx context.Context) ApiServiceportprofilesPatchRequest {
	return ApiServiceportprofilesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServicePortProfilesAPIService) ServiceportprofilesPatchExecute(r ApiServiceportprofilesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePortProfilesAPIService.ServiceportprofilesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/serviceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServiceportprofilesPutRequest struct {
	ctx context.Context
	ApiService *ServicePortProfilesAPIService
	changesetName *string
	serviceportprofilesPutRequest *ServiceportprofilesPutRequest
}

func (r ApiServiceportprofilesPutRequest) ChangesetName(changesetName string) ApiServiceportprofilesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiServiceportprofilesPutRequest) ServiceportprofilesPutRequest(serviceportprofilesPutRequest ServiceportprofilesPutRequest) ApiServiceportprofilesPutRequest {
	r.serviceportprofilesPutRequest = &serviceportprofilesPutRequest
	return r
}

func (r ApiServiceportprofilesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ServiceportprofilesPutExecute(r)
}

/*
ServiceportprofilesPut Create Service Port Profile

Create Service Port Profiles into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServiceportprofilesPutRequest
*/
func (a *ServicePortProfilesAPIService) ServiceportprofilesPut(ctx context.Context) ApiServiceportprofilesPutRequest {
	return ApiServiceportprofilesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServicePortProfilesAPIService) ServiceportprofilesPutExecute(r ApiServiceportprofilesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePortProfilesAPIService.ServiceportprofilesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/serviceportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
