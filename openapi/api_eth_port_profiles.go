/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// EthPortProfilesAPIService EthPortProfilesAPI service
type EthPortProfilesAPIService service

type ApiEthportprofilesDeleteRequest struct {
	ctx context.Context
	ApiService *EthPortProfilesAPIService
	profileName *[]string
	changesetName *string
}

func (r ApiEthportprofilesDeleteRequest) ProfileName(profileName []string) ApiEthportprofilesDeleteRequest {
	r.profileName = &profileName
	return r
}

func (r ApiEthportprofilesDeleteRequest) ChangesetName(changesetName string) ApiEthportprofilesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportprofilesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportprofilesDeleteExecute(r)
}

/*
EthportprofilesDelete Delete Eth-Port Profile

Deletes an existing Eth-Port Profile from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportprofilesDeleteRequest
*/
func (a *EthPortProfilesAPIService) EthportprofilesDelete(ctx context.Context) ApiEthportprofilesDeleteRequest {
	return ApiEthportprofilesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortProfilesAPIService) EthportprofilesDeleteExecute(r ApiEthportprofilesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortProfilesAPIService.EthportprofilesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.profileName == nil {
		return nil, reportError("profileName is required and must be specified")
	}

	{
		t := *r.profileName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profile_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profile_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEthportprofilesGetRequest struct {
	ctx context.Context
	ApiService *EthPortProfilesAPIService
	profileName *string
	includeData *bool
	changesetName *string
}

func (r ApiEthportprofilesGetRequest) ProfileName(profileName string) ApiEthportprofilesGetRequest {
	r.profileName = &profileName
	return r
}

func (r ApiEthportprofilesGetRequest) IncludeData(includeData bool) ApiEthportprofilesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiEthportprofilesGetRequest) ChangesetName(changesetName string) ApiEthportprofilesGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportprofilesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportprofilesGetExecute(r)
}

/*
EthportprofilesGet Get all Eth-Port Profiles

Downloads all Eth-Port Profiles from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportprofilesGetRequest
*/
func (a *EthPortProfilesAPIService) EthportprofilesGet(ctx context.Context) ApiEthportprofilesGetRequest {
	return ApiEthportprofilesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortProfilesAPIService) EthportprofilesGetExecute(r ApiEthportprofilesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortProfilesAPIService.EthportprofilesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile_name", r.profileName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEthportprofilesPatchRequest struct {
	ctx context.Context
	ApiService *EthPortProfilesAPIService
	changesetName *string
	ethportprofilesPutRequest *EthportprofilesPutRequest
}

func (r ApiEthportprofilesPatchRequest) ChangesetName(changesetName string) ApiEthportprofilesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportprofilesPatchRequest) EthportprofilesPutRequest(ethportprofilesPutRequest EthportprofilesPutRequest) ApiEthportprofilesPatchRequest {
	r.ethportprofilesPutRequest = &ethportprofilesPutRequest
	return r
}

func (r ApiEthportprofilesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportprofilesPatchExecute(r)
}

/*
EthportprofilesPatch Update Eth-Port Profile

Update Eth-Port Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportprofilesPatchRequest
*/
func (a *EthPortProfilesAPIService) EthportprofilesPatch(ctx context.Context) ApiEthportprofilesPatchRequest {
	return ApiEthportprofilesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortProfilesAPIService) EthportprofilesPatchExecute(r ApiEthportprofilesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortProfilesAPIService.EthportprofilesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ethportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEthportprofilesPutRequest struct {
	ctx context.Context
	ApiService *EthPortProfilesAPIService
	changesetName *string
	ethportprofilesPutRequest *EthportprofilesPutRequest
}

func (r ApiEthportprofilesPutRequest) ChangesetName(changesetName string) ApiEthportprofilesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportprofilesPutRequest) EthportprofilesPutRequest(ethportprofilesPutRequest EthportprofilesPutRequest) ApiEthportprofilesPutRequest {
	r.ethportprofilesPutRequest = &ethportprofilesPutRequest
	return r
}

func (r ApiEthportprofilesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportprofilesPutExecute(r)
}

/*
EthportprofilesPut Create Eth-Port Profile

Create Eth-Port Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportprofilesPutRequest
*/
func (a *EthPortProfilesAPIService) EthportprofilesPut(ctx context.Context) ApiEthportprofilesPutRequest {
	return ApiEthportprofilesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortProfilesAPIService) EthportprofilesPutExecute(r ApiEthportprofilesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortProfilesAPIService.EthportprofilesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ethportprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
