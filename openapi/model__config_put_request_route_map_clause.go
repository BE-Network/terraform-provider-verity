/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestRouteMapClause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestRouteMapClause{}

// ConfigPutRequestRouteMapClause struct for ConfigPutRequestRouteMapClause
type ConfigPutRequestRouteMapClause struct {
	RouteMapClauseName *ConfigPutRequestRouteMapClauseRouteMapClauseName `json:"route_map_clause_name,omitempty"`
}

// NewConfigPutRequestRouteMapClause instantiates a new ConfigPutRequestRouteMapClause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestRouteMapClause() *ConfigPutRequestRouteMapClause {
	this := ConfigPutRequestRouteMapClause{}
	return &this
}

// NewConfigPutRequestRouteMapClauseWithDefaults instantiates a new ConfigPutRequestRouteMapClause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestRouteMapClauseWithDefaults() *ConfigPutRequestRouteMapClause {
	this := ConfigPutRequestRouteMapClause{}
	return &this
}

// GetRouteMapClauseName returns the RouteMapClauseName field value if set, zero value otherwise.
func (o *ConfigPutRequestRouteMapClause) GetRouteMapClauseName() ConfigPutRequestRouteMapClauseRouteMapClauseName {
	if o == nil || IsNil(o.RouteMapClauseName) {
		var ret ConfigPutRequestRouteMapClauseRouteMapClauseName
		return ret
	}
	return *o.RouteMapClauseName
}

// GetRouteMapClauseNameOk returns a tuple with the RouteMapClauseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestRouteMapClause) GetRouteMapClauseNameOk() (*ConfigPutRequestRouteMapClauseRouteMapClauseName, bool) {
	if o == nil || IsNil(o.RouteMapClauseName) {
		return nil, false
	}
	return o.RouteMapClauseName, true
}

// HasRouteMapClauseName returns a boolean if a field has been set.
func (o *ConfigPutRequestRouteMapClause) HasRouteMapClauseName() bool {
	if o != nil && !IsNil(o.RouteMapClauseName) {
		return true
	}

	return false
}

// SetRouteMapClauseName gets a reference to the given ConfigPutRequestRouteMapClauseRouteMapClauseName and assigns it to the RouteMapClauseName field.
func (o *ConfigPutRequestRouteMapClause) SetRouteMapClauseName(v ConfigPutRequestRouteMapClauseRouteMapClauseName) {
	o.RouteMapClauseName = &v
}

func (o ConfigPutRequestRouteMapClause) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestRouteMapClause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RouteMapClauseName) {
		toSerialize["route_map_clause_name"] = o.RouteMapClauseName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestRouteMapClause struct {
	value *ConfigPutRequestRouteMapClause
	isSet bool
}

func (v NullableConfigPutRequestRouteMapClause) Get() *ConfigPutRequestRouteMapClause {
	return v.value
}

func (v *NullableConfigPutRequestRouteMapClause) Set(val *ConfigPutRequestRouteMapClause) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestRouteMapClause) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestRouteMapClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestRouteMapClause(val *ConfigPutRequestRouteMapClause) *NullableConfigPutRequestRouteMapClause {
	return &NullableConfigPutRequestRouteMapClause{value: val, isSet: true}
}

func (v NullableConfigPutRequestRouteMapClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestRouteMapClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


