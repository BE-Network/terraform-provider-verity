/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// PacketQueuesAPIService PacketQueuesAPI service
type PacketQueuesAPIService service

type ApiPacketqueuesDeleteRequest struct {
	ctx context.Context
	ApiService *PacketQueuesAPIService
	packetQueueName *[]string
	changesetName *string
}

func (r ApiPacketqueuesDeleteRequest) PacketQueueName(packetQueueName []string) ApiPacketqueuesDeleteRequest {
	r.packetQueueName = &packetQueueName
	return r
}

func (r ApiPacketqueuesDeleteRequest) ChangesetName(changesetName string) ApiPacketqueuesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPacketqueuesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketqueuesDeleteExecute(r)
}

/*
PacketqueuesDelete Delete Packet Queue

Deletes an existing Packet Queue from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketqueuesDeleteRequest
*/
func (a *PacketQueuesAPIService) PacketqueuesDelete(ctx context.Context) ApiPacketqueuesDeleteRequest {
	return ApiPacketqueuesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketQueuesAPIService) PacketqueuesDeleteExecute(r ApiPacketqueuesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketQueuesAPIService.PacketqueuesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetqueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.packetQueueName == nil {
		return nil, reportError("packetQueueName is required and must be specified")
	}

	{
		t := *r.packetQueueName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "packet_queue_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "packet_queue_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPacketqueuesGetRequest struct {
	ctx context.Context
	ApiService *PacketQueuesAPIService
	packetQueueName *string
	includeData *bool
}

func (r ApiPacketqueuesGetRequest) PacketQueueName(packetQueueName string) ApiPacketqueuesGetRequest {
	r.packetQueueName = &packetQueueName
	return r
}

func (r ApiPacketqueuesGetRequest) IncludeData(includeData bool) ApiPacketqueuesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiPacketqueuesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketqueuesGetExecute(r)
}

/*
PacketqueuesGet Get all Packet Queues

Retrieves all Packet Queues from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketqueuesGetRequest
*/
func (a *PacketQueuesAPIService) PacketqueuesGet(ctx context.Context) ApiPacketqueuesGetRequest {
	return ApiPacketqueuesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketQueuesAPIService) PacketqueuesGetExecute(r ApiPacketqueuesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketQueuesAPIService.PacketqueuesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetqueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.packetQueueName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packet_queue_name", r.packetQueueName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPacketqueuesPatchRequest struct {
	ctx context.Context
	ApiService *PacketQueuesAPIService
	changesetName *string
	packetqueuesPutRequest *PacketqueuesPutRequest
}

func (r ApiPacketqueuesPatchRequest) ChangesetName(changesetName string) ApiPacketqueuesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPacketqueuesPatchRequest) PacketqueuesPutRequest(packetqueuesPutRequest PacketqueuesPutRequest) ApiPacketqueuesPatchRequest {
	r.packetqueuesPutRequest = &packetqueuesPutRequest
	return r
}

func (r ApiPacketqueuesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketqueuesPatchExecute(r)
}

/*
PacketqueuesPatch Update Packet Queue

Update Packet Queue into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketqueuesPatchRequest
*/
func (a *PacketQueuesAPIService) PacketqueuesPatch(ctx context.Context) ApiPacketqueuesPatchRequest {
	return ApiPacketqueuesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketQueuesAPIService) PacketqueuesPatchExecute(r ApiPacketqueuesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketQueuesAPIService.PacketqueuesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetqueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.packetqueuesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPacketqueuesPutRequest struct {
	ctx context.Context
	ApiService *PacketQueuesAPIService
	changesetName *string
	packetqueuesPutRequest *PacketqueuesPutRequest
}

func (r ApiPacketqueuesPutRequest) ChangesetName(changesetName string) ApiPacketqueuesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPacketqueuesPutRequest) PacketqueuesPutRequest(packetqueuesPutRequest PacketqueuesPutRequest) ApiPacketqueuesPutRequest {
	r.packetqueuesPutRequest = &packetqueuesPutRequest
	return r
}

func (r ApiPacketqueuesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.PacketqueuesPutExecute(r)
}

/*
PacketqueuesPut Create Packet Queue

Create Packet Queue into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPacketqueuesPutRequest
*/
func (a *PacketQueuesAPIService) PacketqueuesPut(ctx context.Context) ApiPacketqueuesPutRequest {
	return ApiPacketqueuesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PacketQueuesAPIService) PacketqueuesPutExecute(r ApiPacketqueuesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PacketQueuesAPIService.PacketqueuesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packetqueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.packetqueuesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
