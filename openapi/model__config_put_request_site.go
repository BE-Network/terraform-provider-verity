/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestSite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestSite{}

// ConfigPutRequestSite struct for ConfigPutRequestSite
type ConfigPutRequestSite struct {
	SiteName *ConfigPutRequestSiteSiteName `json:"site_name,omitempty"`
}

// NewConfigPutRequestSite instantiates a new ConfigPutRequestSite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestSite() *ConfigPutRequestSite {
	this := ConfigPutRequestSite{}
	return &this
}

// NewConfigPutRequestSiteWithDefaults instantiates a new ConfigPutRequestSite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestSiteWithDefaults() *ConfigPutRequestSite {
	this := ConfigPutRequestSite{}
	return &this
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *ConfigPutRequestSite) GetSiteName() ConfigPutRequestSiteSiteName {
	if o == nil || IsNil(o.SiteName) {
		var ret ConfigPutRequestSiteSiteName
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestSite) GetSiteNameOk() (*ConfigPutRequestSiteSiteName, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *ConfigPutRequestSite) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given ConfigPutRequestSiteSiteName and assigns it to the SiteName field.
func (o *ConfigPutRequestSite) SetSiteName(v ConfigPutRequestSiteSiteName) {
	o.SiteName = &v
}

func (o ConfigPutRequestSite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestSite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteName) {
		toSerialize["site_name"] = o.SiteName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestSite struct {
	value *ConfigPutRequestSite
	isSet bool
}

func (v NullableConfigPutRequestSite) Get() *ConfigPutRequestSite {
	return v.value
}

func (v *NullableConfigPutRequestSite) Set(val *ConfigPutRequestSite) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestSite) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestSite(val *ConfigPutRequestSite) *NullableConfigPutRequestSite {
	return &NullableConfigPutRequestSite{value: val, isSet: true}
}

func (v NullableConfigPutRequestSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


