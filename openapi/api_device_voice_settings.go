/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DeviceVoiceSettingsAPIService DeviceVoiceSettingsAPI service
type DeviceVoiceSettingsAPIService service

type ApiDevicevoicesettingsDeleteRequest struct {
	ctx context.Context
	ApiService *DeviceVoiceSettingsAPIService
	deviceVoiceSettingsName *[]string
	changesetName *string
}

func (r ApiDevicevoicesettingsDeleteRequest) DeviceVoiceSettingsName(deviceVoiceSettingsName []string) ApiDevicevoicesettingsDeleteRequest {
	r.deviceVoiceSettingsName = &deviceVoiceSettingsName
	return r
}

func (r ApiDevicevoicesettingsDeleteRequest) ChangesetName(changesetName string) ApiDevicevoicesettingsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicevoicesettingsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicevoicesettingsDeleteExecute(r)
}

/*
DevicevoicesettingsDelete Delete tenant

Deletes an existing Device Voice Setting from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicevoicesettingsDeleteRequest
*/
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsDelete(ctx context.Context) ApiDevicevoicesettingsDeleteRequest {
	return ApiDevicevoicesettingsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsDeleteExecute(r ApiDevicevoicesettingsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceVoiceSettingsAPIService.DevicevoicesettingsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicevoicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceVoiceSettingsName == nil {
		return nil, reportError("deviceVoiceSettingsName is required and must be specified")
	}

	{
		t := *r.deviceVoiceSettingsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_voice_settings_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_voice_settings_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevicevoicesettingsGetRequest struct {
	ctx context.Context
	ApiService *DeviceVoiceSettingsAPIService
	deviceVoiceSettingsName *string
	includeData *bool
	changesetName *string
}

func (r ApiDevicevoicesettingsGetRequest) DeviceVoiceSettingsName(deviceVoiceSettingsName string) ApiDevicevoicesettingsGetRequest {
	r.deviceVoiceSettingsName = &deviceVoiceSettingsName
	return r
}

func (r ApiDevicevoicesettingsGetRequest) IncludeData(includeData bool) ApiDevicevoicesettingsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiDevicevoicesettingsGetRequest) ChangesetName(changesetName string) ApiDevicevoicesettingsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicevoicesettingsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicevoicesettingsGetExecute(r)
}

/*
DevicevoicesettingsGet Get all Device Voice Settings

Retrieves all Device Voice Settings from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicevoicesettingsGetRequest
*/
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsGet(ctx context.Context) ApiDevicevoicesettingsGetRequest {
	return ApiDevicevoicesettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsGetExecute(r ApiDevicevoicesettingsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceVoiceSettingsAPIService.DevicevoicesettingsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicevoicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceVoiceSettingsName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_voice_settings_name", r.deviceVoiceSettingsName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevicevoicesettingsPatchRequest struct {
	ctx context.Context
	ApiService *DeviceVoiceSettingsAPIService
	changesetName *string
	devicevoicesettingsPutRequest *DevicevoicesettingsPutRequest
}

func (r ApiDevicevoicesettingsPatchRequest) ChangesetName(changesetName string) ApiDevicevoicesettingsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicevoicesettingsPatchRequest) DevicevoicesettingsPutRequest(devicevoicesettingsPutRequest DevicevoicesettingsPutRequest) ApiDevicevoicesettingsPatchRequest {
	r.devicevoicesettingsPutRequest = &devicevoicesettingsPutRequest
	return r
}

func (r ApiDevicevoicesettingsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicevoicesettingsPatchExecute(r)
}

/*
DevicevoicesettingsPatch Update Device Voice Setting

Update Device Voice Setting into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicevoicesettingsPatchRequest
*/
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsPatch(ctx context.Context) ApiDevicevoicesettingsPatchRequest {
	return ApiDevicevoicesettingsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsPatchExecute(r ApiDevicevoicesettingsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceVoiceSettingsAPIService.DevicevoicesettingsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicevoicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.devicevoicesettingsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevicevoicesettingsPutRequest struct {
	ctx context.Context
	ApiService *DeviceVoiceSettingsAPIService
	changesetName *string
	devicevoicesettingsPutRequest *DevicevoicesettingsPutRequest
}

func (r ApiDevicevoicesettingsPutRequest) ChangesetName(changesetName string) ApiDevicevoicesettingsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDevicevoicesettingsPutRequest) DevicevoicesettingsPutRequest(devicevoicesettingsPutRequest DevicevoicesettingsPutRequest) ApiDevicevoicesettingsPutRequest {
	r.devicevoicesettingsPutRequest = &devicevoicesettingsPutRequest
	return r
}

func (r ApiDevicevoicesettingsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevicevoicesettingsPutExecute(r)
}

/*
DevicevoicesettingsPut Create Device Voice Setting

Create Device Voice Setting into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevicevoicesettingsPutRequest
*/
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsPut(ctx context.Context) ApiDevicevoicesettingsPutRequest {
	return ApiDevicevoicesettingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceVoiceSettingsAPIService) DevicevoicesettingsPutExecute(r ApiDevicevoicesettingsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceVoiceSettingsAPIService.DevicevoicesettingsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devicevoicesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.devicevoicesettingsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
