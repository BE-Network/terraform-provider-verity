/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestIpv4Filter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestIpv4Filter{}

// ConfigPutRequestIpv4Filter struct for ConfigPutRequestIpv4Filter
type ConfigPutRequestIpv4Filter struct {
	Ipv4FilterName *ConfigPutRequestIpv4FilterIpv4FilterName `json:"ipv4_filter_name,omitempty"`
}

// NewConfigPutRequestIpv4Filter instantiates a new ConfigPutRequestIpv4Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestIpv4Filter() *ConfigPutRequestIpv4Filter {
	this := ConfigPutRequestIpv4Filter{}
	return &this
}

// NewConfigPutRequestIpv4FilterWithDefaults instantiates a new ConfigPutRequestIpv4Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestIpv4FilterWithDefaults() *ConfigPutRequestIpv4Filter {
	this := ConfigPutRequestIpv4Filter{}
	return &this
}

// GetIpv4FilterName returns the Ipv4FilterName field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4Filter) GetIpv4FilterName() ConfigPutRequestIpv4FilterIpv4FilterName {
	if o == nil || IsNil(o.Ipv4FilterName) {
		var ret ConfigPutRequestIpv4FilterIpv4FilterName
		return ret
	}
	return *o.Ipv4FilterName
}

// GetIpv4FilterNameOk returns a tuple with the Ipv4FilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4Filter) GetIpv4FilterNameOk() (*ConfigPutRequestIpv4FilterIpv4FilterName, bool) {
	if o == nil || IsNil(o.Ipv4FilterName) {
		return nil, false
	}
	return o.Ipv4FilterName, true
}

// HasIpv4FilterName returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4Filter) HasIpv4FilterName() bool {
	if o != nil && !IsNil(o.Ipv4FilterName) {
		return true
	}

	return false
}

// SetIpv4FilterName gets a reference to the given ConfigPutRequestIpv4FilterIpv4FilterName and assigns it to the Ipv4FilterName field.
func (o *ConfigPutRequestIpv4Filter) SetIpv4FilterName(v ConfigPutRequestIpv4FilterIpv4FilterName) {
	o.Ipv4FilterName = &v
}

func (o ConfigPutRequestIpv4Filter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestIpv4Filter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4FilterName) {
		toSerialize["ipv4_filter_name"] = o.Ipv4FilterName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestIpv4Filter struct {
	value *ConfigPutRequestIpv4Filter
	isSet bool
}

func (v NullableConfigPutRequestIpv4Filter) Get() *ConfigPutRequestIpv4Filter {
	return v.value
}

func (v *NullableConfigPutRequestIpv4Filter) Set(val *ConfigPutRequestIpv4Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestIpv4Filter) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestIpv4Filter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestIpv4Filter(val *ConfigPutRequestIpv4Filter) *NullableConfigPutRequestIpv4Filter {
	return &NullableConfigPutRequestIpv4Filter{value: val, isSet: true}
}

func (v NullableConfigPutRequestIpv4Filter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestIpv4Filter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


