/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner{}

// Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner struct for Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner
type Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner struct {
	// Enable of this IPv4 Prefix List
	Enable *bool `json:"enable,omitempty"`
	// Action upon match of Community Strings.
	PermitDeny *string `json:"permit_deny,omitempty"`
	// IPv4 address and subnet to match against 
	Ipv4Prefix *string `json:"ipv4_prefix,omitempty"`
	// Match IP routes with a subnet mask greater than or equal to the value indicated 
	GreaterThanEqualValue NullableInt32 `json:"greater_than_equal_value,omitempty"`
	// Match IP routes with a subnet mask less than or equal to the value indicated
	LessThanEqualValue NullableInt32 `json:"less_than_equal_value,omitempty"`
	// The index identifying the object. Zero if you want to add an object to the list.
	Index *int32 `json:"index,omitempty"`
}

// NewIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner instantiates a new Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner() *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner {
	this := Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner{}
	var enable bool = false
	this.Enable = &enable
	var permitDeny string = "permit"
	this.PermitDeny = &permitDeny
	var ipv4Prefix string = ""
	this.Ipv4Prefix = &ipv4Prefix
	return &this
}

// NewIpv4prefixlistsPutRequestIpv4PrefixListValueListsInnerWithDefaults instantiates a new Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv4prefixlistsPutRequestIpv4PrefixListValueListsInnerWithDefaults() *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner {
	this := Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner{}
	var enable bool = false
	this.Enable = &enable
	var permitDeny string = "permit"
	this.PermitDeny = &permitDeny
	var ipv4Prefix string = ""
	this.Ipv4Prefix = &ipv4Prefix
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetEnable(v bool) {
	o.Enable = &v
}

// GetPermitDeny returns the PermitDeny field value if set, zero value otherwise.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetPermitDeny() string {
	if o == nil || IsNil(o.PermitDeny) {
		var ret string
		return ret
	}
	return *o.PermitDeny
}

// GetPermitDenyOk returns a tuple with the PermitDeny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetPermitDenyOk() (*string, bool) {
	if o == nil || IsNil(o.PermitDeny) {
		return nil, false
	}
	return o.PermitDeny, true
}

// HasPermitDeny returns a boolean if a field has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) HasPermitDeny() bool {
	if o != nil && !IsNil(o.PermitDeny) {
		return true
	}

	return false
}

// SetPermitDeny gets a reference to the given string and assigns it to the PermitDeny field.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetPermitDeny(v string) {
	o.PermitDeny = &v
}

// GetIpv4Prefix returns the Ipv4Prefix field value if set, zero value otherwise.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetIpv4Prefix() string {
	if o == nil || IsNil(o.Ipv4Prefix) {
		var ret string
		return ret
	}
	return *o.Ipv4Prefix
}

// GetIpv4PrefixOk returns a tuple with the Ipv4Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetIpv4PrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Prefix) {
		return nil, false
	}
	return o.Ipv4Prefix, true
}

// HasIpv4Prefix returns a boolean if a field has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) HasIpv4Prefix() bool {
	if o != nil && !IsNil(o.Ipv4Prefix) {
		return true
	}

	return false
}

// SetIpv4Prefix gets a reference to the given string and assigns it to the Ipv4Prefix field.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetIpv4Prefix(v string) {
	o.Ipv4Prefix = &v
}

// GetGreaterThanEqualValue returns the GreaterThanEqualValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetGreaterThanEqualValue() int32 {
	if o == nil || IsNil(o.GreaterThanEqualValue.Get()) {
		var ret int32
		return ret
	}
	return *o.GreaterThanEqualValue.Get()
}

// GetGreaterThanEqualValueOk returns a tuple with the GreaterThanEqualValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetGreaterThanEqualValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GreaterThanEqualValue.Get(), o.GreaterThanEqualValue.IsSet()
}

// HasGreaterThanEqualValue returns a boolean if a field has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) HasGreaterThanEqualValue() bool {
	if o != nil && o.GreaterThanEqualValue.IsSet() {
		return true
	}

	return false
}

// SetGreaterThanEqualValue gets a reference to the given NullableInt32 and assigns it to the GreaterThanEqualValue field.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetGreaterThanEqualValue(v int32) {
	o.GreaterThanEqualValue.Set(&v)
}
// SetGreaterThanEqualValueNil sets the value for GreaterThanEqualValue to be an explicit nil
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetGreaterThanEqualValueNil() {
	o.GreaterThanEqualValue.Set(nil)
}

// UnsetGreaterThanEqualValue ensures that no value is present for GreaterThanEqualValue, not even an explicit nil
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) UnsetGreaterThanEqualValue() {
	o.GreaterThanEqualValue.Unset()
}

// GetLessThanEqualValue returns the LessThanEqualValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetLessThanEqualValue() int32 {
	if o == nil || IsNil(o.LessThanEqualValue.Get()) {
		var ret int32
		return ret
	}
	return *o.LessThanEqualValue.Get()
}

// GetLessThanEqualValueOk returns a tuple with the LessThanEqualValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetLessThanEqualValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LessThanEqualValue.Get(), o.LessThanEqualValue.IsSet()
}

// HasLessThanEqualValue returns a boolean if a field has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) HasLessThanEqualValue() bool {
	if o != nil && o.LessThanEqualValue.IsSet() {
		return true
	}

	return false
}

// SetLessThanEqualValue gets a reference to the given NullableInt32 and assigns it to the LessThanEqualValue field.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetLessThanEqualValue(v int32) {
	o.LessThanEqualValue.Set(&v)
}
// SetLessThanEqualValueNil sets the value for LessThanEqualValue to be an explicit nil
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetLessThanEqualValueNil() {
	o.LessThanEqualValue.Set(nil)
}

// UnsetLessThanEqualValue ensures that no value is present for LessThanEqualValue, not even an explicit nil
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) UnsetLessThanEqualValue() {
	o.LessThanEqualValue.Unset()
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) SetIndex(v int32) {
	o.Index = &v
}

func (o Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.PermitDeny) {
		toSerialize["permit_deny"] = o.PermitDeny
	}
	if !IsNil(o.Ipv4Prefix) {
		toSerialize["ipv4_prefix"] = o.Ipv4Prefix
	}
	if o.GreaterThanEqualValue.IsSet() {
		toSerialize["greater_than_equal_value"] = o.GreaterThanEqualValue.Get()
	}
	if o.LessThanEqualValue.IsSet() {
		toSerialize["less_than_equal_value"] = o.LessThanEqualValue.Get()
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	return toSerialize, nil
}

type NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner struct {
	value *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner
	isSet bool
}

func (v NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner) Get() *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner {
	return v.value
}

func (v *NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner) Set(val *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner(val *Ipv4prefixlistsPutRequestIpv4PrefixListValueListsInner) *NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner {
	return &NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner{value: val, isSet: true}
}

func (v NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv4prefixlistsPutRequestIpv4PrefixListValueListsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


