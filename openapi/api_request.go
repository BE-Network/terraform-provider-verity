/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// RequestAPIService RequestAPI service
type RequestAPIService service

type ApiRequestGetRequest struct {
	ctx context.Context
	ApiService *RequestAPIService
	query *string
	setname *string
	site *string
	devId *int32
	endpointId *int32
	endpointName *string
	start *string
	stop *string
	endpoint *string
}

func (r ApiRequestGetRequest) Query(query string) ApiRequestGetRequest {
	r.query = &query
	return r
}

func (r ApiRequestGetRequest) Setname(setname string) ApiRequestGetRequest {
	r.setname = &setname
	return r
}

func (r ApiRequestGetRequest) Site(site string) ApiRequestGetRequest {
	r.site = &site
	return r
}

func (r ApiRequestGetRequest) DevId(devId int32) ApiRequestGetRequest {
	r.devId = &devId
	return r
}

func (r ApiRequestGetRequest) EndpointId(endpointId int32) ApiRequestGetRequest {
	r.endpointId = &endpointId
	return r
}

func (r ApiRequestGetRequest) EndpointName(endpointName string) ApiRequestGetRequest {
	r.endpointName = &endpointName
	return r
}

func (r ApiRequestGetRequest) Start(start string) ApiRequestGetRequest {
	r.start = &start
	return r
}

func (r ApiRequestGetRequest) Stop(stop string) ApiRequestGetRequest {
	r.stop = &stop
	return r
}

func (r ApiRequestGetRequest) Endpoint(endpoint string) ApiRequestGetRequest {
	r.endpoint = &endpoint
	return r
}

func (r ApiRequestGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.RequestGetExecute(r)
}

/*
RequestGet Get miscellaneous info about the system

Get miscellaneous info about the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRequestGetRequest
*/
func (a *RequestAPIService) RequestGet(ctx context.Context) ApiRequestGetRequest {
	return ApiRequestGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RequestAPIService) RequestGetExecute(r ApiRequestGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequestAPIService.RequestGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return nil, reportError("query is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "form", "")
	if r.setname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "setname", r.setname, "form", "")
	}
	if r.site != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "site", r.site, "form", "")
	}
	if r.devId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dev_id", r.devId, "form", "")
	}
	if r.endpointId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint_id", r.endpointId, "form", "")
	}
	if r.endpointName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint_name", r.endpointName, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.stop != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stop", r.stop, "form", "")
	}
	if r.endpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint", r.endpoint, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
