/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoutemapclausesPutRequestRouteMapClauseValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutemapclausesPutRequestRouteMapClauseValue{}

// RoutemapclausesPutRequestRouteMapClauseValue struct for RoutemapclausesPutRequestRouteMapClauseValue
type RoutemapclausesPutRequestRouteMapClauseValue struct {
	// Object Name. Must be unique.
	Name *string `json:"name,omitempty"`
	// Enable flag of this provisioning object
	Enable *bool `json:"enable,omitempty"`
	// Action upon match of Community Strings.
	PermitDeny *string `json:"permit_deny,omitempty"`
	// Match AS Path Access List
	MatchAsPathAccessList *string `json:"match_as_path_access_list,omitempty"`
	// Object type for match_as_path_access_list field
	MatchAsPathAccessListRefType *string `json:"match_as_path_access_list_ref_type_,omitempty"`
	// Match Community List
	MatchCommunityList *string `json:"match_community_list,omitempty"`
	// Object type for match_community_list field
	MatchCommunityListRefType *string `json:"match_community_list_ref_type_,omitempty"`
	// Match Extended Community List
	MatchExtendedCommunityList *string `json:"match_extended_community_list,omitempty"`
	// Object type for match_extended_community_list field
	MatchExtendedCommunityListRefType *string `json:"match_extended_community_list_ref_type_,omitempty"`
	// Match Interface Number
	MatchInterfaceNumber NullableInt32 `json:"match_interface_number,omitempty"`
	// Match Interface VLAN
	MatchInterfaceVlan NullableInt32 `json:"match_interface_vlan,omitempty"`
	// Match IPv4 Address IPv4 Prefix List
	MatchIpv4AddressIpPrefixList *string `json:"match_ipv4_address_ip_prefix_list,omitempty"`
	// Object type for match_ipv4_address_ip_prefix_list field
	MatchIpv4AddressIpPrefixListRefType *string `json:"match_ipv4_address_ip_prefix_list_ref_type_,omitempty"`
	// Match IPv4 Next Hop IPv4 Prefix List
	MatchIpv4NextHopIpPrefixList *string `json:"match_ipv4_next_hop_ip_prefix_list,omitempty"`
	// Object type for match_ipv4_next_hop_ip_prefix_list field
	MatchIpv4NextHopIpPrefixListRefType *string `json:"match_ipv4_next_hop_ip_prefix_list_ref_type_,omitempty"`
	// Match BGP Local Preference value on the route 
	MatchLocalPreference NullableInt32 `json:"match_local_preference,omitempty"`
	// Match Metric of the IP route entry 
	MatchMetric NullableInt32 `json:"match_metric,omitempty"`
	// Match routes based on the value of the BGP Origin attribute 
	MatchOrigin *string `json:"match_origin,omitempty"`
	// Match BGP Peer IP Address the route was learned from 
	MatchPeerIpAddress *string `json:"match_peer_ip_address,omitempty"`
	// Match BGP Peer port the route was learned from 
	MatchPeerInterface NullableInt32 `json:"match_peer_interface,omitempty"`
	// Match BGP Peer VLAN over which the route was learned 
	MatchPeerVlan NullableInt32 `json:"match_peer_vlan,omitempty"`
	// Match Routing  Protocol the route originated from 
	MatchSourceProtocol *string `json:"match_source_protocol,omitempty"`
	// Match VRF the route is associated with 
	MatchVrf *string `json:"match_vrf,omitempty"`
	// Object type for match_vrf field
	MatchVrfRefType *string `json:"match_vrf_ref_type_,omitempty"`
	// Match routes that have this value for a Tag attribute
	MatchTag NullableInt32 `json:"match_tag,omitempty"`
	// Match based on the type of EVPN Route Type being Default\"
	MatchEvpnRouteTypeDefault *bool `json:"match_evpn_route_type_default,omitempty"`
	// Match based on the indicated EVPN Route Type
	MatchEvpnRouteType *string `json:"match_evpn_route_type,omitempty"`
	// Match based on the VNI value 
	MatchVni NullableInt32 `json:"match_vni,omitempty"`
	ObjectProperties *RoutemapclausesPutRequestRouteMapClauseValueObjectProperties `json:"object_properties,omitempty"`
	// Match IPv4 Address IPv6 Prefix List
	MatchIpv6AddressIpv6PrefixList *string `json:"match_ipv6_address_ipv6_prefix_list,omitempty"`
	// Object type for match_ipv6_address_ipv6_prefix_list field
	MatchIpv6AddressIpv6PrefixListRefType *string `json:"match_ipv6_address_ipv6_prefix_list_ref_type_,omitempty"`
	// Match IPv6 Next Hop IPv6 Prefix List
	MatchIpv6NextHopIpv6PrefixList *string `json:"match_ipv6_next_hop_ipv6_prefix_list,omitempty"`
	// Object type for match_ipv6_next_hop_ipv6_prefix_list field
	MatchIpv6NextHopIpv6PrefixListRefType *string `json:"match_ipv6_next_hop_ipv6_prefix_list_ref_type_,omitempty"`
}

// NewRoutemapclausesPutRequestRouteMapClauseValue instantiates a new RoutemapclausesPutRequestRouteMapClauseValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutemapclausesPutRequestRouteMapClauseValue() *RoutemapclausesPutRequestRouteMapClauseValue {
	this := RoutemapclausesPutRequestRouteMapClauseValue{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var permitDeny string = "permit"
	this.PermitDeny = &permitDeny
	var matchAsPathAccessList string = ""
	this.MatchAsPathAccessList = &matchAsPathAccessList
	var matchCommunityList string = ""
	this.MatchCommunityList = &matchCommunityList
	var matchExtendedCommunityList string = ""
	this.MatchExtendedCommunityList = &matchExtendedCommunityList
	var matchIpv4AddressIpPrefixList string = ""
	this.MatchIpv4AddressIpPrefixList = &matchIpv4AddressIpPrefixList
	var matchIpv4NextHopIpPrefixList string = ""
	this.MatchIpv4NextHopIpPrefixList = &matchIpv4NextHopIpPrefixList
	var matchOrigin string = ""
	this.MatchOrigin = &matchOrigin
	var matchPeerIpAddress string = ""
	this.MatchPeerIpAddress = &matchPeerIpAddress
	var matchSourceProtocol string = ""
	this.MatchSourceProtocol = &matchSourceProtocol
	var matchVrf string = ""
	this.MatchVrf = &matchVrf
	var matchEvpnRouteType string = ""
	this.MatchEvpnRouteType = &matchEvpnRouteType
	var matchIpv6AddressIpv6PrefixList string = ""
	this.MatchIpv6AddressIpv6PrefixList = &matchIpv6AddressIpv6PrefixList
	var matchIpv6NextHopIpv6PrefixList string = ""
	this.MatchIpv6NextHopIpv6PrefixList = &matchIpv6NextHopIpv6PrefixList
	return &this
}

// NewRoutemapclausesPutRequestRouteMapClauseValueWithDefaults instantiates a new RoutemapclausesPutRequestRouteMapClauseValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutemapclausesPutRequestRouteMapClauseValueWithDefaults() *RoutemapclausesPutRequestRouteMapClauseValue {
	this := RoutemapclausesPutRequestRouteMapClauseValue{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var permitDeny string = "permit"
	this.PermitDeny = &permitDeny
	var matchAsPathAccessList string = ""
	this.MatchAsPathAccessList = &matchAsPathAccessList
	var matchCommunityList string = ""
	this.MatchCommunityList = &matchCommunityList
	var matchExtendedCommunityList string = ""
	this.MatchExtendedCommunityList = &matchExtendedCommunityList
	var matchIpv4AddressIpPrefixList string = ""
	this.MatchIpv4AddressIpPrefixList = &matchIpv4AddressIpPrefixList
	var matchIpv4NextHopIpPrefixList string = ""
	this.MatchIpv4NextHopIpPrefixList = &matchIpv4NextHopIpPrefixList
	var matchOrigin string = ""
	this.MatchOrigin = &matchOrigin
	var matchPeerIpAddress string = ""
	this.MatchPeerIpAddress = &matchPeerIpAddress
	var matchSourceProtocol string = ""
	this.MatchSourceProtocol = &matchSourceProtocol
	var matchVrf string = ""
	this.MatchVrf = &matchVrf
	var matchEvpnRouteType string = ""
	this.MatchEvpnRouteType = &matchEvpnRouteType
	var matchIpv6AddressIpv6PrefixList string = ""
	this.MatchIpv6AddressIpv6PrefixList = &matchIpv6AddressIpv6PrefixList
	var matchIpv6NextHopIpv6PrefixList string = ""
	this.MatchIpv6NextHopIpv6PrefixList = &matchIpv6NextHopIpv6PrefixList
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetName(v string) {
	o.Name = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetEnable(v bool) {
	o.Enable = &v
}

// GetPermitDeny returns the PermitDeny field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetPermitDeny() string {
	if o == nil || IsNil(o.PermitDeny) {
		var ret string
		return ret
	}
	return *o.PermitDeny
}

// GetPermitDenyOk returns a tuple with the PermitDeny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetPermitDenyOk() (*string, bool) {
	if o == nil || IsNil(o.PermitDeny) {
		return nil, false
	}
	return o.PermitDeny, true
}

// HasPermitDeny returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasPermitDeny() bool {
	if o != nil && !IsNil(o.PermitDeny) {
		return true
	}

	return false
}

// SetPermitDeny gets a reference to the given string and assigns it to the PermitDeny field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetPermitDeny(v string) {
	o.PermitDeny = &v
}

// GetMatchAsPathAccessList returns the MatchAsPathAccessList field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchAsPathAccessList() string {
	if o == nil || IsNil(o.MatchAsPathAccessList) {
		var ret string
		return ret
	}
	return *o.MatchAsPathAccessList
}

// GetMatchAsPathAccessListOk returns a tuple with the MatchAsPathAccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchAsPathAccessListOk() (*string, bool) {
	if o == nil || IsNil(o.MatchAsPathAccessList) {
		return nil, false
	}
	return o.MatchAsPathAccessList, true
}

// HasMatchAsPathAccessList returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchAsPathAccessList() bool {
	if o != nil && !IsNil(o.MatchAsPathAccessList) {
		return true
	}

	return false
}

// SetMatchAsPathAccessList gets a reference to the given string and assigns it to the MatchAsPathAccessList field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchAsPathAccessList(v string) {
	o.MatchAsPathAccessList = &v
}

// GetMatchAsPathAccessListRefType returns the MatchAsPathAccessListRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchAsPathAccessListRefType() string {
	if o == nil || IsNil(o.MatchAsPathAccessListRefType) {
		var ret string
		return ret
	}
	return *o.MatchAsPathAccessListRefType
}

// GetMatchAsPathAccessListRefTypeOk returns a tuple with the MatchAsPathAccessListRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchAsPathAccessListRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchAsPathAccessListRefType) {
		return nil, false
	}
	return o.MatchAsPathAccessListRefType, true
}

// HasMatchAsPathAccessListRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchAsPathAccessListRefType() bool {
	if o != nil && !IsNil(o.MatchAsPathAccessListRefType) {
		return true
	}

	return false
}

// SetMatchAsPathAccessListRefType gets a reference to the given string and assigns it to the MatchAsPathAccessListRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchAsPathAccessListRefType(v string) {
	o.MatchAsPathAccessListRefType = &v
}

// GetMatchCommunityList returns the MatchCommunityList field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchCommunityList() string {
	if o == nil || IsNil(o.MatchCommunityList) {
		var ret string
		return ret
	}
	return *o.MatchCommunityList
}

// GetMatchCommunityListOk returns a tuple with the MatchCommunityList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchCommunityListOk() (*string, bool) {
	if o == nil || IsNil(o.MatchCommunityList) {
		return nil, false
	}
	return o.MatchCommunityList, true
}

// HasMatchCommunityList returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchCommunityList() bool {
	if o != nil && !IsNil(o.MatchCommunityList) {
		return true
	}

	return false
}

// SetMatchCommunityList gets a reference to the given string and assigns it to the MatchCommunityList field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchCommunityList(v string) {
	o.MatchCommunityList = &v
}

// GetMatchCommunityListRefType returns the MatchCommunityListRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchCommunityListRefType() string {
	if o == nil || IsNil(o.MatchCommunityListRefType) {
		var ret string
		return ret
	}
	return *o.MatchCommunityListRefType
}

// GetMatchCommunityListRefTypeOk returns a tuple with the MatchCommunityListRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchCommunityListRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchCommunityListRefType) {
		return nil, false
	}
	return o.MatchCommunityListRefType, true
}

// HasMatchCommunityListRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchCommunityListRefType() bool {
	if o != nil && !IsNil(o.MatchCommunityListRefType) {
		return true
	}

	return false
}

// SetMatchCommunityListRefType gets a reference to the given string and assigns it to the MatchCommunityListRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchCommunityListRefType(v string) {
	o.MatchCommunityListRefType = &v
}

// GetMatchExtendedCommunityList returns the MatchExtendedCommunityList field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchExtendedCommunityList() string {
	if o == nil || IsNil(o.MatchExtendedCommunityList) {
		var ret string
		return ret
	}
	return *o.MatchExtendedCommunityList
}

// GetMatchExtendedCommunityListOk returns a tuple with the MatchExtendedCommunityList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchExtendedCommunityListOk() (*string, bool) {
	if o == nil || IsNil(o.MatchExtendedCommunityList) {
		return nil, false
	}
	return o.MatchExtendedCommunityList, true
}

// HasMatchExtendedCommunityList returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchExtendedCommunityList() bool {
	if o != nil && !IsNil(o.MatchExtendedCommunityList) {
		return true
	}

	return false
}

// SetMatchExtendedCommunityList gets a reference to the given string and assigns it to the MatchExtendedCommunityList field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchExtendedCommunityList(v string) {
	o.MatchExtendedCommunityList = &v
}

// GetMatchExtendedCommunityListRefType returns the MatchExtendedCommunityListRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchExtendedCommunityListRefType() string {
	if o == nil || IsNil(o.MatchExtendedCommunityListRefType) {
		var ret string
		return ret
	}
	return *o.MatchExtendedCommunityListRefType
}

// GetMatchExtendedCommunityListRefTypeOk returns a tuple with the MatchExtendedCommunityListRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchExtendedCommunityListRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchExtendedCommunityListRefType) {
		return nil, false
	}
	return o.MatchExtendedCommunityListRefType, true
}

// HasMatchExtendedCommunityListRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchExtendedCommunityListRefType() bool {
	if o != nil && !IsNil(o.MatchExtendedCommunityListRefType) {
		return true
	}

	return false
}

// SetMatchExtendedCommunityListRefType gets a reference to the given string and assigns it to the MatchExtendedCommunityListRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchExtendedCommunityListRefType(v string) {
	o.MatchExtendedCommunityListRefType = &v
}

// GetMatchInterfaceNumber returns the MatchInterfaceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchInterfaceNumber() int32 {
	if o == nil || IsNil(o.MatchInterfaceNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchInterfaceNumber.Get()
}

// GetMatchInterfaceNumberOk returns a tuple with the MatchInterfaceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchInterfaceNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchInterfaceNumber.Get(), o.MatchInterfaceNumber.IsSet()
}

// HasMatchInterfaceNumber returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchInterfaceNumber() bool {
	if o != nil && o.MatchInterfaceNumber.IsSet() {
		return true
	}

	return false
}

// SetMatchInterfaceNumber gets a reference to the given NullableInt32 and assigns it to the MatchInterfaceNumber field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchInterfaceNumber(v int32) {
	o.MatchInterfaceNumber.Set(&v)
}
// SetMatchInterfaceNumberNil sets the value for MatchInterfaceNumber to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchInterfaceNumberNil() {
	o.MatchInterfaceNumber.Set(nil)
}

// UnsetMatchInterfaceNumber ensures that no value is present for MatchInterfaceNumber, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchInterfaceNumber() {
	o.MatchInterfaceNumber.Unset()
}

// GetMatchInterfaceVlan returns the MatchInterfaceVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchInterfaceVlan() int32 {
	if o == nil || IsNil(o.MatchInterfaceVlan.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchInterfaceVlan.Get()
}

// GetMatchInterfaceVlanOk returns a tuple with the MatchInterfaceVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchInterfaceVlanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchInterfaceVlan.Get(), o.MatchInterfaceVlan.IsSet()
}

// HasMatchInterfaceVlan returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchInterfaceVlan() bool {
	if o != nil && o.MatchInterfaceVlan.IsSet() {
		return true
	}

	return false
}

// SetMatchInterfaceVlan gets a reference to the given NullableInt32 and assigns it to the MatchInterfaceVlan field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchInterfaceVlan(v int32) {
	o.MatchInterfaceVlan.Set(&v)
}
// SetMatchInterfaceVlanNil sets the value for MatchInterfaceVlan to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchInterfaceVlanNil() {
	o.MatchInterfaceVlan.Set(nil)
}

// UnsetMatchInterfaceVlan ensures that no value is present for MatchInterfaceVlan, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchInterfaceVlan() {
	o.MatchInterfaceVlan.Unset()
}

// GetMatchIpv4AddressIpPrefixList returns the MatchIpv4AddressIpPrefixList field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4AddressIpPrefixList() string {
	if o == nil || IsNil(o.MatchIpv4AddressIpPrefixList) {
		var ret string
		return ret
	}
	return *o.MatchIpv4AddressIpPrefixList
}

// GetMatchIpv4AddressIpPrefixListOk returns a tuple with the MatchIpv4AddressIpPrefixList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4AddressIpPrefixListOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv4AddressIpPrefixList) {
		return nil, false
	}
	return o.MatchIpv4AddressIpPrefixList, true
}

// HasMatchIpv4AddressIpPrefixList returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv4AddressIpPrefixList() bool {
	if o != nil && !IsNil(o.MatchIpv4AddressIpPrefixList) {
		return true
	}

	return false
}

// SetMatchIpv4AddressIpPrefixList gets a reference to the given string and assigns it to the MatchIpv4AddressIpPrefixList field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv4AddressIpPrefixList(v string) {
	o.MatchIpv4AddressIpPrefixList = &v
}

// GetMatchIpv4AddressIpPrefixListRefType returns the MatchIpv4AddressIpPrefixListRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4AddressIpPrefixListRefType() string {
	if o == nil || IsNil(o.MatchIpv4AddressIpPrefixListRefType) {
		var ret string
		return ret
	}
	return *o.MatchIpv4AddressIpPrefixListRefType
}

// GetMatchIpv4AddressIpPrefixListRefTypeOk returns a tuple with the MatchIpv4AddressIpPrefixListRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4AddressIpPrefixListRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv4AddressIpPrefixListRefType) {
		return nil, false
	}
	return o.MatchIpv4AddressIpPrefixListRefType, true
}

// HasMatchIpv4AddressIpPrefixListRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv4AddressIpPrefixListRefType() bool {
	if o != nil && !IsNil(o.MatchIpv4AddressIpPrefixListRefType) {
		return true
	}

	return false
}

// SetMatchIpv4AddressIpPrefixListRefType gets a reference to the given string and assigns it to the MatchIpv4AddressIpPrefixListRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv4AddressIpPrefixListRefType(v string) {
	o.MatchIpv4AddressIpPrefixListRefType = &v
}

// GetMatchIpv4NextHopIpPrefixList returns the MatchIpv4NextHopIpPrefixList field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4NextHopIpPrefixList() string {
	if o == nil || IsNil(o.MatchIpv4NextHopIpPrefixList) {
		var ret string
		return ret
	}
	return *o.MatchIpv4NextHopIpPrefixList
}

// GetMatchIpv4NextHopIpPrefixListOk returns a tuple with the MatchIpv4NextHopIpPrefixList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4NextHopIpPrefixListOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv4NextHopIpPrefixList) {
		return nil, false
	}
	return o.MatchIpv4NextHopIpPrefixList, true
}

// HasMatchIpv4NextHopIpPrefixList returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv4NextHopIpPrefixList() bool {
	if o != nil && !IsNil(o.MatchIpv4NextHopIpPrefixList) {
		return true
	}

	return false
}

// SetMatchIpv4NextHopIpPrefixList gets a reference to the given string and assigns it to the MatchIpv4NextHopIpPrefixList field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv4NextHopIpPrefixList(v string) {
	o.MatchIpv4NextHopIpPrefixList = &v
}

// GetMatchIpv4NextHopIpPrefixListRefType returns the MatchIpv4NextHopIpPrefixListRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4NextHopIpPrefixListRefType() string {
	if o == nil || IsNil(o.MatchIpv4NextHopIpPrefixListRefType) {
		var ret string
		return ret
	}
	return *o.MatchIpv4NextHopIpPrefixListRefType
}

// GetMatchIpv4NextHopIpPrefixListRefTypeOk returns a tuple with the MatchIpv4NextHopIpPrefixListRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv4NextHopIpPrefixListRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv4NextHopIpPrefixListRefType) {
		return nil, false
	}
	return o.MatchIpv4NextHopIpPrefixListRefType, true
}

// HasMatchIpv4NextHopIpPrefixListRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv4NextHopIpPrefixListRefType() bool {
	if o != nil && !IsNil(o.MatchIpv4NextHopIpPrefixListRefType) {
		return true
	}

	return false
}

// SetMatchIpv4NextHopIpPrefixListRefType gets a reference to the given string and assigns it to the MatchIpv4NextHopIpPrefixListRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv4NextHopIpPrefixListRefType(v string) {
	o.MatchIpv4NextHopIpPrefixListRefType = &v
}

// GetMatchLocalPreference returns the MatchLocalPreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchLocalPreference() int32 {
	if o == nil || IsNil(o.MatchLocalPreference.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchLocalPreference.Get()
}

// GetMatchLocalPreferenceOk returns a tuple with the MatchLocalPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchLocalPreferenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchLocalPreference.Get(), o.MatchLocalPreference.IsSet()
}

// HasMatchLocalPreference returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchLocalPreference() bool {
	if o != nil && o.MatchLocalPreference.IsSet() {
		return true
	}

	return false
}

// SetMatchLocalPreference gets a reference to the given NullableInt32 and assigns it to the MatchLocalPreference field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchLocalPreference(v int32) {
	o.MatchLocalPreference.Set(&v)
}
// SetMatchLocalPreferenceNil sets the value for MatchLocalPreference to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchLocalPreferenceNil() {
	o.MatchLocalPreference.Set(nil)
}

// UnsetMatchLocalPreference ensures that no value is present for MatchLocalPreference, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchLocalPreference() {
	o.MatchLocalPreference.Unset()
}

// GetMatchMetric returns the MatchMetric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchMetric() int32 {
	if o == nil || IsNil(o.MatchMetric.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchMetric.Get()
}

// GetMatchMetricOk returns a tuple with the MatchMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchMetricOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchMetric.Get(), o.MatchMetric.IsSet()
}

// HasMatchMetric returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchMetric() bool {
	if o != nil && o.MatchMetric.IsSet() {
		return true
	}

	return false
}

// SetMatchMetric gets a reference to the given NullableInt32 and assigns it to the MatchMetric field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchMetric(v int32) {
	o.MatchMetric.Set(&v)
}
// SetMatchMetricNil sets the value for MatchMetric to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchMetricNil() {
	o.MatchMetric.Set(nil)
}

// UnsetMatchMetric ensures that no value is present for MatchMetric, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchMetric() {
	o.MatchMetric.Unset()
}

// GetMatchOrigin returns the MatchOrigin field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchOrigin() string {
	if o == nil || IsNil(o.MatchOrigin) {
		var ret string
		return ret
	}
	return *o.MatchOrigin
}

// GetMatchOriginOk returns a tuple with the MatchOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchOriginOk() (*string, bool) {
	if o == nil || IsNil(o.MatchOrigin) {
		return nil, false
	}
	return o.MatchOrigin, true
}

// HasMatchOrigin returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchOrigin() bool {
	if o != nil && !IsNil(o.MatchOrigin) {
		return true
	}

	return false
}

// SetMatchOrigin gets a reference to the given string and assigns it to the MatchOrigin field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchOrigin(v string) {
	o.MatchOrigin = &v
}

// GetMatchPeerIpAddress returns the MatchPeerIpAddress field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchPeerIpAddress() string {
	if o == nil || IsNil(o.MatchPeerIpAddress) {
		var ret string
		return ret
	}
	return *o.MatchPeerIpAddress
}

// GetMatchPeerIpAddressOk returns a tuple with the MatchPeerIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchPeerIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MatchPeerIpAddress) {
		return nil, false
	}
	return o.MatchPeerIpAddress, true
}

// HasMatchPeerIpAddress returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchPeerIpAddress() bool {
	if o != nil && !IsNil(o.MatchPeerIpAddress) {
		return true
	}

	return false
}

// SetMatchPeerIpAddress gets a reference to the given string and assigns it to the MatchPeerIpAddress field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchPeerIpAddress(v string) {
	o.MatchPeerIpAddress = &v
}

// GetMatchPeerInterface returns the MatchPeerInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchPeerInterface() int32 {
	if o == nil || IsNil(o.MatchPeerInterface.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchPeerInterface.Get()
}

// GetMatchPeerInterfaceOk returns a tuple with the MatchPeerInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchPeerInterfaceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchPeerInterface.Get(), o.MatchPeerInterface.IsSet()
}

// HasMatchPeerInterface returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchPeerInterface() bool {
	if o != nil && o.MatchPeerInterface.IsSet() {
		return true
	}

	return false
}

// SetMatchPeerInterface gets a reference to the given NullableInt32 and assigns it to the MatchPeerInterface field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchPeerInterface(v int32) {
	o.MatchPeerInterface.Set(&v)
}
// SetMatchPeerInterfaceNil sets the value for MatchPeerInterface to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchPeerInterfaceNil() {
	o.MatchPeerInterface.Set(nil)
}

// UnsetMatchPeerInterface ensures that no value is present for MatchPeerInterface, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchPeerInterface() {
	o.MatchPeerInterface.Unset()
}

// GetMatchPeerVlan returns the MatchPeerVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchPeerVlan() int32 {
	if o == nil || IsNil(o.MatchPeerVlan.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchPeerVlan.Get()
}

// GetMatchPeerVlanOk returns a tuple with the MatchPeerVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchPeerVlanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchPeerVlan.Get(), o.MatchPeerVlan.IsSet()
}

// HasMatchPeerVlan returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchPeerVlan() bool {
	if o != nil && o.MatchPeerVlan.IsSet() {
		return true
	}

	return false
}

// SetMatchPeerVlan gets a reference to the given NullableInt32 and assigns it to the MatchPeerVlan field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchPeerVlan(v int32) {
	o.MatchPeerVlan.Set(&v)
}
// SetMatchPeerVlanNil sets the value for MatchPeerVlan to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchPeerVlanNil() {
	o.MatchPeerVlan.Set(nil)
}

// UnsetMatchPeerVlan ensures that no value is present for MatchPeerVlan, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchPeerVlan() {
	o.MatchPeerVlan.Unset()
}

// GetMatchSourceProtocol returns the MatchSourceProtocol field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchSourceProtocol() string {
	if o == nil || IsNil(o.MatchSourceProtocol) {
		var ret string
		return ret
	}
	return *o.MatchSourceProtocol
}

// GetMatchSourceProtocolOk returns a tuple with the MatchSourceProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchSourceProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.MatchSourceProtocol) {
		return nil, false
	}
	return o.MatchSourceProtocol, true
}

// HasMatchSourceProtocol returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchSourceProtocol() bool {
	if o != nil && !IsNil(o.MatchSourceProtocol) {
		return true
	}

	return false
}

// SetMatchSourceProtocol gets a reference to the given string and assigns it to the MatchSourceProtocol field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchSourceProtocol(v string) {
	o.MatchSourceProtocol = &v
}

// GetMatchVrf returns the MatchVrf field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchVrf() string {
	if o == nil || IsNil(o.MatchVrf) {
		var ret string
		return ret
	}
	return *o.MatchVrf
}

// GetMatchVrfOk returns a tuple with the MatchVrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchVrfOk() (*string, bool) {
	if o == nil || IsNil(o.MatchVrf) {
		return nil, false
	}
	return o.MatchVrf, true
}

// HasMatchVrf returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchVrf() bool {
	if o != nil && !IsNil(o.MatchVrf) {
		return true
	}

	return false
}

// SetMatchVrf gets a reference to the given string and assigns it to the MatchVrf field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchVrf(v string) {
	o.MatchVrf = &v
}

// GetMatchVrfRefType returns the MatchVrfRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchVrfRefType() string {
	if o == nil || IsNil(o.MatchVrfRefType) {
		var ret string
		return ret
	}
	return *o.MatchVrfRefType
}

// GetMatchVrfRefTypeOk returns a tuple with the MatchVrfRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchVrfRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchVrfRefType) {
		return nil, false
	}
	return o.MatchVrfRefType, true
}

// HasMatchVrfRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchVrfRefType() bool {
	if o != nil && !IsNil(o.MatchVrfRefType) {
		return true
	}

	return false
}

// SetMatchVrfRefType gets a reference to the given string and assigns it to the MatchVrfRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchVrfRefType(v string) {
	o.MatchVrfRefType = &v
}

// GetMatchTag returns the MatchTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchTag() int32 {
	if o == nil || IsNil(o.MatchTag.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchTag.Get()
}

// GetMatchTagOk returns a tuple with the MatchTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchTagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchTag.Get(), o.MatchTag.IsSet()
}

// HasMatchTag returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchTag() bool {
	if o != nil && o.MatchTag.IsSet() {
		return true
	}

	return false
}

// SetMatchTag gets a reference to the given NullableInt32 and assigns it to the MatchTag field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchTag(v int32) {
	o.MatchTag.Set(&v)
}
// SetMatchTagNil sets the value for MatchTag to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchTagNil() {
	o.MatchTag.Set(nil)
}

// UnsetMatchTag ensures that no value is present for MatchTag, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchTag() {
	o.MatchTag.Unset()
}

// GetMatchEvpnRouteTypeDefault returns the MatchEvpnRouteTypeDefault field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchEvpnRouteTypeDefault() bool {
	if o == nil || IsNil(o.MatchEvpnRouteTypeDefault) {
		var ret bool
		return ret
	}
	return *o.MatchEvpnRouteTypeDefault
}

// GetMatchEvpnRouteTypeDefaultOk returns a tuple with the MatchEvpnRouteTypeDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchEvpnRouteTypeDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchEvpnRouteTypeDefault) {
		return nil, false
	}
	return o.MatchEvpnRouteTypeDefault, true
}

// HasMatchEvpnRouteTypeDefault returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchEvpnRouteTypeDefault() bool {
	if o != nil && !IsNil(o.MatchEvpnRouteTypeDefault) {
		return true
	}

	return false
}

// SetMatchEvpnRouteTypeDefault gets a reference to the given bool and assigns it to the MatchEvpnRouteTypeDefault field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchEvpnRouteTypeDefault(v bool) {
	o.MatchEvpnRouteTypeDefault = &v
}

// GetMatchEvpnRouteType returns the MatchEvpnRouteType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchEvpnRouteType() string {
	if o == nil || IsNil(o.MatchEvpnRouteType) {
		var ret string
		return ret
	}
	return *o.MatchEvpnRouteType
}

// GetMatchEvpnRouteTypeOk returns a tuple with the MatchEvpnRouteType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchEvpnRouteTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchEvpnRouteType) {
		return nil, false
	}
	return o.MatchEvpnRouteType, true
}

// HasMatchEvpnRouteType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchEvpnRouteType() bool {
	if o != nil && !IsNil(o.MatchEvpnRouteType) {
		return true
	}

	return false
}

// SetMatchEvpnRouteType gets a reference to the given string and assigns it to the MatchEvpnRouteType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchEvpnRouteType(v string) {
	o.MatchEvpnRouteType = &v
}

// GetMatchVni returns the MatchVni field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchVni() int32 {
	if o == nil || IsNil(o.MatchVni.Get()) {
		var ret int32
		return ret
	}
	return *o.MatchVni.Get()
}

// GetMatchVniOk returns a tuple with the MatchVni field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchVniOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchVni.Get(), o.MatchVni.IsSet()
}

// HasMatchVni returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchVni() bool {
	if o != nil && o.MatchVni.IsSet() {
		return true
	}

	return false
}

// SetMatchVni gets a reference to the given NullableInt32 and assigns it to the MatchVni field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchVni(v int32) {
	o.MatchVni.Set(&v)
}
// SetMatchVniNil sets the value for MatchVni to be an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchVniNil() {
	o.MatchVni.Set(nil)
}

// UnsetMatchVni ensures that no value is present for MatchVni, not even an explicit nil
func (o *RoutemapclausesPutRequestRouteMapClauseValue) UnsetMatchVni() {
	o.MatchVni.Unset()
}

// GetObjectProperties returns the ObjectProperties field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetObjectProperties() RoutemapclausesPutRequestRouteMapClauseValueObjectProperties {
	if o == nil || IsNil(o.ObjectProperties) {
		var ret RoutemapclausesPutRequestRouteMapClauseValueObjectProperties
		return ret
	}
	return *o.ObjectProperties
}

// GetObjectPropertiesOk returns a tuple with the ObjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetObjectPropertiesOk() (*RoutemapclausesPutRequestRouteMapClauseValueObjectProperties, bool) {
	if o == nil || IsNil(o.ObjectProperties) {
		return nil, false
	}
	return o.ObjectProperties, true
}

// HasObjectProperties returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasObjectProperties() bool {
	if o != nil && !IsNil(o.ObjectProperties) {
		return true
	}

	return false
}

// SetObjectProperties gets a reference to the given RoutemapclausesPutRequestRouteMapClauseValueObjectProperties and assigns it to the ObjectProperties field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetObjectProperties(v RoutemapclausesPutRequestRouteMapClauseValueObjectProperties) {
	o.ObjectProperties = &v
}

// GetMatchIpv6AddressIpv6PrefixList returns the MatchIpv6AddressIpv6PrefixList field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6AddressIpv6PrefixList() string {
	if o == nil || IsNil(o.MatchIpv6AddressIpv6PrefixList) {
		var ret string
		return ret
	}
	return *o.MatchIpv6AddressIpv6PrefixList
}

// GetMatchIpv6AddressIpv6PrefixListOk returns a tuple with the MatchIpv6AddressIpv6PrefixList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6AddressIpv6PrefixListOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv6AddressIpv6PrefixList) {
		return nil, false
	}
	return o.MatchIpv6AddressIpv6PrefixList, true
}

// HasMatchIpv6AddressIpv6PrefixList returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv6AddressIpv6PrefixList() bool {
	if o != nil && !IsNil(o.MatchIpv6AddressIpv6PrefixList) {
		return true
	}

	return false
}

// SetMatchIpv6AddressIpv6PrefixList gets a reference to the given string and assigns it to the MatchIpv6AddressIpv6PrefixList field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv6AddressIpv6PrefixList(v string) {
	o.MatchIpv6AddressIpv6PrefixList = &v
}

// GetMatchIpv6AddressIpv6PrefixListRefType returns the MatchIpv6AddressIpv6PrefixListRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6AddressIpv6PrefixListRefType() string {
	if o == nil || IsNil(o.MatchIpv6AddressIpv6PrefixListRefType) {
		var ret string
		return ret
	}
	return *o.MatchIpv6AddressIpv6PrefixListRefType
}

// GetMatchIpv6AddressIpv6PrefixListRefTypeOk returns a tuple with the MatchIpv6AddressIpv6PrefixListRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6AddressIpv6PrefixListRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv6AddressIpv6PrefixListRefType) {
		return nil, false
	}
	return o.MatchIpv6AddressIpv6PrefixListRefType, true
}

// HasMatchIpv6AddressIpv6PrefixListRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv6AddressIpv6PrefixListRefType() bool {
	if o != nil && !IsNil(o.MatchIpv6AddressIpv6PrefixListRefType) {
		return true
	}

	return false
}

// SetMatchIpv6AddressIpv6PrefixListRefType gets a reference to the given string and assigns it to the MatchIpv6AddressIpv6PrefixListRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv6AddressIpv6PrefixListRefType(v string) {
	o.MatchIpv6AddressIpv6PrefixListRefType = &v
}

// GetMatchIpv6NextHopIpv6PrefixList returns the MatchIpv6NextHopIpv6PrefixList field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6NextHopIpv6PrefixList() string {
	if o == nil || IsNil(o.MatchIpv6NextHopIpv6PrefixList) {
		var ret string
		return ret
	}
	return *o.MatchIpv6NextHopIpv6PrefixList
}

// GetMatchIpv6NextHopIpv6PrefixListOk returns a tuple with the MatchIpv6NextHopIpv6PrefixList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6NextHopIpv6PrefixListOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv6NextHopIpv6PrefixList) {
		return nil, false
	}
	return o.MatchIpv6NextHopIpv6PrefixList, true
}

// HasMatchIpv6NextHopIpv6PrefixList returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv6NextHopIpv6PrefixList() bool {
	if o != nil && !IsNil(o.MatchIpv6NextHopIpv6PrefixList) {
		return true
	}

	return false
}

// SetMatchIpv6NextHopIpv6PrefixList gets a reference to the given string and assigns it to the MatchIpv6NextHopIpv6PrefixList field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv6NextHopIpv6PrefixList(v string) {
	o.MatchIpv6NextHopIpv6PrefixList = &v
}

// GetMatchIpv6NextHopIpv6PrefixListRefType returns the MatchIpv6NextHopIpv6PrefixListRefType field value if set, zero value otherwise.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6NextHopIpv6PrefixListRefType() string {
	if o == nil || IsNil(o.MatchIpv6NextHopIpv6PrefixListRefType) {
		var ret string
		return ret
	}
	return *o.MatchIpv6NextHopIpv6PrefixListRefType
}

// GetMatchIpv6NextHopIpv6PrefixListRefTypeOk returns a tuple with the MatchIpv6NextHopIpv6PrefixListRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) GetMatchIpv6NextHopIpv6PrefixListRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchIpv6NextHopIpv6PrefixListRefType) {
		return nil, false
	}
	return o.MatchIpv6NextHopIpv6PrefixListRefType, true
}

// HasMatchIpv6NextHopIpv6PrefixListRefType returns a boolean if a field has been set.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) HasMatchIpv6NextHopIpv6PrefixListRefType() bool {
	if o != nil && !IsNil(o.MatchIpv6NextHopIpv6PrefixListRefType) {
		return true
	}

	return false
}

// SetMatchIpv6NextHopIpv6PrefixListRefType gets a reference to the given string and assigns it to the MatchIpv6NextHopIpv6PrefixListRefType field.
func (o *RoutemapclausesPutRequestRouteMapClauseValue) SetMatchIpv6NextHopIpv6PrefixListRefType(v string) {
	o.MatchIpv6NextHopIpv6PrefixListRefType = &v
}

func (o RoutemapclausesPutRequestRouteMapClauseValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutemapclausesPutRequestRouteMapClauseValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.PermitDeny) {
		toSerialize["permit_deny"] = o.PermitDeny
	}
	if !IsNil(o.MatchAsPathAccessList) {
		toSerialize["match_as_path_access_list"] = o.MatchAsPathAccessList
	}
	if !IsNil(o.MatchAsPathAccessListRefType) {
		toSerialize["match_as_path_access_list_ref_type_"] = o.MatchAsPathAccessListRefType
	}
	if !IsNil(o.MatchCommunityList) {
		toSerialize["match_community_list"] = o.MatchCommunityList
	}
	if !IsNil(o.MatchCommunityListRefType) {
		toSerialize["match_community_list_ref_type_"] = o.MatchCommunityListRefType
	}
	if !IsNil(o.MatchExtendedCommunityList) {
		toSerialize["match_extended_community_list"] = o.MatchExtendedCommunityList
	}
	if !IsNil(o.MatchExtendedCommunityListRefType) {
		toSerialize["match_extended_community_list_ref_type_"] = o.MatchExtendedCommunityListRefType
	}
	if o.MatchInterfaceNumber.IsSet() {
		toSerialize["match_interface_number"] = o.MatchInterfaceNumber.Get()
	}
	if o.MatchInterfaceVlan.IsSet() {
		toSerialize["match_interface_vlan"] = o.MatchInterfaceVlan.Get()
	}
	if !IsNil(o.MatchIpv4AddressIpPrefixList) {
		toSerialize["match_ipv4_address_ip_prefix_list"] = o.MatchIpv4AddressIpPrefixList
	}
	if !IsNil(o.MatchIpv4AddressIpPrefixListRefType) {
		toSerialize["match_ipv4_address_ip_prefix_list_ref_type_"] = o.MatchIpv4AddressIpPrefixListRefType
	}
	if !IsNil(o.MatchIpv4NextHopIpPrefixList) {
		toSerialize["match_ipv4_next_hop_ip_prefix_list"] = o.MatchIpv4NextHopIpPrefixList
	}
	if !IsNil(o.MatchIpv4NextHopIpPrefixListRefType) {
		toSerialize["match_ipv4_next_hop_ip_prefix_list_ref_type_"] = o.MatchIpv4NextHopIpPrefixListRefType
	}
	if o.MatchLocalPreference.IsSet() {
		toSerialize["match_local_preference"] = o.MatchLocalPreference.Get()
	}
	if o.MatchMetric.IsSet() {
		toSerialize["match_metric"] = o.MatchMetric.Get()
	}
	if !IsNil(o.MatchOrigin) {
		toSerialize["match_origin"] = o.MatchOrigin
	}
	if !IsNil(o.MatchPeerIpAddress) {
		toSerialize["match_peer_ip_address"] = o.MatchPeerIpAddress
	}
	if o.MatchPeerInterface.IsSet() {
		toSerialize["match_peer_interface"] = o.MatchPeerInterface.Get()
	}
	if o.MatchPeerVlan.IsSet() {
		toSerialize["match_peer_vlan"] = o.MatchPeerVlan.Get()
	}
	if !IsNil(o.MatchSourceProtocol) {
		toSerialize["match_source_protocol"] = o.MatchSourceProtocol
	}
	if !IsNil(o.MatchVrf) {
		toSerialize["match_vrf"] = o.MatchVrf
	}
	if !IsNil(o.MatchVrfRefType) {
		toSerialize["match_vrf_ref_type_"] = o.MatchVrfRefType
	}
	if o.MatchTag.IsSet() {
		toSerialize["match_tag"] = o.MatchTag.Get()
	}
	if !IsNil(o.MatchEvpnRouteTypeDefault) {
		toSerialize["match_evpn_route_type_default"] = o.MatchEvpnRouteTypeDefault
	}
	if !IsNil(o.MatchEvpnRouteType) {
		toSerialize["match_evpn_route_type"] = o.MatchEvpnRouteType
	}
	if o.MatchVni.IsSet() {
		toSerialize["match_vni"] = o.MatchVni.Get()
	}
	if !IsNil(o.ObjectProperties) {
		toSerialize["object_properties"] = o.ObjectProperties
	}
	if !IsNil(o.MatchIpv6AddressIpv6PrefixList) {
		toSerialize["match_ipv6_address_ipv6_prefix_list"] = o.MatchIpv6AddressIpv6PrefixList
	}
	if !IsNil(o.MatchIpv6AddressIpv6PrefixListRefType) {
		toSerialize["match_ipv6_address_ipv6_prefix_list_ref_type_"] = o.MatchIpv6AddressIpv6PrefixListRefType
	}
	if !IsNil(o.MatchIpv6NextHopIpv6PrefixList) {
		toSerialize["match_ipv6_next_hop_ipv6_prefix_list"] = o.MatchIpv6NextHopIpv6PrefixList
	}
	if !IsNil(o.MatchIpv6NextHopIpv6PrefixListRefType) {
		toSerialize["match_ipv6_next_hop_ipv6_prefix_list_ref_type_"] = o.MatchIpv6NextHopIpv6PrefixListRefType
	}
	return toSerialize, nil
}

type NullableRoutemapclausesPutRequestRouteMapClauseValue struct {
	value *RoutemapclausesPutRequestRouteMapClauseValue
	isSet bool
}

func (v NullableRoutemapclausesPutRequestRouteMapClauseValue) Get() *RoutemapclausesPutRequestRouteMapClauseValue {
	return v.value
}

func (v *NullableRoutemapclausesPutRequestRouteMapClauseValue) Set(val *RoutemapclausesPutRequestRouteMapClauseValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutemapclausesPutRequestRouteMapClauseValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutemapclausesPutRequestRouteMapClauseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutemapclausesPutRequestRouteMapClauseValue(val *RoutemapclausesPutRequestRouteMapClauseValue) *NullableRoutemapclausesPutRequestRouteMapClauseValue {
	return &NullableRoutemapclausesPutRequestRouteMapClauseValue{value: val, isSet: true}
}

func (v NullableRoutemapclausesPutRequestRouteMapClauseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutemapclausesPutRequestRouteMapClauseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


