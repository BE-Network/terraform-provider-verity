/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestIpv4FilterIpv4FilterName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestIpv4FilterIpv4FilterName{}

// ConfigPutRequestIpv4FilterIpv4FilterName struct for ConfigPutRequestIpv4FilterIpv4FilterName
type ConfigPutRequestIpv4FilterIpv4FilterName struct {
	// Object Name. Must be unique.
	Name *string `json:"name,omitempty"`
	// Enable object.
	Enable *bool `json:"enable,omitempty"`
	// Value must be ip/tcp/udp/icmp or a number between 0 and 255 to match packets.  Value IP will match all IP protocols.
	Protocol *string `json:"protocol,omitempty"`
	// If bidirectional is selected, packets will be selected that match the source filters in either the source or destination fields of the packet.
	Bidirectional *bool `json:"bidirectional,omitempty"`
	// This field matches the source IP address of an IPv4 packet
	SourceIp *string `json:"source_ip,omitempty"`
	// This field determines which match operation will be applied to TCP/UDP ports. The choices are equal, greater-than, less-than or range.
	SourcePortOperator *string `json:"source_port_operator,omitempty"`
	// This field is used for equal, greater-than or less-than TCP/UDP port value in match operation. This field is also used for the lower value in the range port match operation.
	SourcePort1 NullableInt32 `json:"source_port_1,omitempty"`
	// This field will only be used in the range TCP/UDP port value match operation to define the top value in the range.
	SourcePort2 NullableInt32 `json:"source_port_2,omitempty"`
	// This field matches the destination IP address of an IPv4 packet.
	DestinationIp *string `json:"destination_ip,omitempty"`
	// This field determines which match operation will be applied to TCP/UDP ports. The choices are equal, greater-than, less-than or range.
	DestinationPortOperator *string `json:"destination_port_operator,omitempty"`
	// This field is used for equal, greater-than or less-than TCP/UDP port value in match operation. This field is also used for the lower value in the range port match operation.
	DestinationPort1 NullableInt32 `json:"destination_port_1,omitempty"`
	// This field will only be used in the range TCP/UDP port value match operation to define the top value in the range.
	DestinationPort2 NullableInt32 `json:"destination_port_2,omitempty"`
	ObjectProperties *ConfigPutRequestIpv4PrefixListIpv4PrefixListNameObjectProperties `json:"object_properties,omitempty"`
}

// NewConfigPutRequestIpv4FilterIpv4FilterName instantiates a new ConfigPutRequestIpv4FilterIpv4FilterName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestIpv4FilterIpv4FilterName() *ConfigPutRequestIpv4FilterIpv4FilterName {
	this := ConfigPutRequestIpv4FilterIpv4FilterName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var protocol string = ""
	this.Protocol = &protocol
	var bidirectional bool = false
	this.Bidirectional = &bidirectional
	var sourceIp string = ""
	this.SourceIp = &sourceIp
	var sourcePortOperator string = ""
	this.SourcePortOperator = &sourcePortOperator
	var destinationIp string = ""
	this.DestinationIp = &destinationIp
	var destinationPortOperator string = ""
	this.DestinationPortOperator = &destinationPortOperator
	return &this
}

// NewConfigPutRequestIpv4FilterIpv4FilterNameWithDefaults instantiates a new ConfigPutRequestIpv4FilterIpv4FilterName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestIpv4FilterIpv4FilterNameWithDefaults() *ConfigPutRequestIpv4FilterIpv4FilterName {
	this := ConfigPutRequestIpv4FilterIpv4FilterName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var protocol string = ""
	this.Protocol = &protocol
	var bidirectional bool = false
	this.Bidirectional = &bidirectional
	var sourceIp string = ""
	this.SourceIp = &sourceIp
	var sourcePortOperator string = ""
	this.SourcePortOperator = &sourcePortOperator
	var destinationIp string = ""
	this.DestinationIp = &destinationIp
	var destinationPortOperator string = ""
	this.DestinationPortOperator = &destinationPortOperator
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetName(v string) {
	o.Name = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetEnable(v bool) {
	o.Enable = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetProtocol(v string) {
	o.Protocol = &v
}

// GetBidirectional returns the Bidirectional field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetBidirectional() bool {
	if o == nil || IsNil(o.Bidirectional) {
		var ret bool
		return ret
	}
	return *o.Bidirectional
}

// GetBidirectionalOk returns a tuple with the Bidirectional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetBidirectionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Bidirectional) {
		return nil, false
	}
	return o.Bidirectional, true
}

// HasBidirectional returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasBidirectional() bool {
	if o != nil && !IsNil(o.Bidirectional) {
		return true
	}

	return false
}

// SetBidirectional gets a reference to the given bool and assigns it to the Bidirectional field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetBidirectional(v bool) {
	o.Bidirectional = &v
}

// GetSourceIp returns the SourceIp field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourceIp() string {
	if o == nil || IsNil(o.SourceIp) {
		var ret string
		return ret
	}
	return *o.SourceIp
}

// GetSourceIpOk returns a tuple with the SourceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourceIpOk() (*string, bool) {
	if o == nil || IsNil(o.SourceIp) {
		return nil, false
	}
	return o.SourceIp, true
}

// HasSourceIp returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasSourceIp() bool {
	if o != nil && !IsNil(o.SourceIp) {
		return true
	}

	return false
}

// SetSourceIp gets a reference to the given string and assigns it to the SourceIp field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetSourceIp(v string) {
	o.SourceIp = &v
}

// GetSourcePortOperator returns the SourcePortOperator field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourcePortOperator() string {
	if o == nil || IsNil(o.SourcePortOperator) {
		var ret string
		return ret
	}
	return *o.SourcePortOperator
}

// GetSourcePortOperatorOk returns a tuple with the SourcePortOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourcePortOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePortOperator) {
		return nil, false
	}
	return o.SourcePortOperator, true
}

// HasSourcePortOperator returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasSourcePortOperator() bool {
	if o != nil && !IsNil(o.SourcePortOperator) {
		return true
	}

	return false
}

// SetSourcePortOperator gets a reference to the given string and assigns it to the SourcePortOperator field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetSourcePortOperator(v string) {
	o.SourcePortOperator = &v
}

// GetSourcePort1 returns the SourcePort1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourcePort1() int32 {
	if o == nil || IsNil(o.SourcePort1.Get()) {
		var ret int32
		return ret
	}
	return *o.SourcePort1.Get()
}

// GetSourcePort1Ok returns a tuple with the SourcePort1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourcePort1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourcePort1.Get(), o.SourcePort1.IsSet()
}

// HasSourcePort1 returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasSourcePort1() bool {
	if o != nil && o.SourcePort1.IsSet() {
		return true
	}

	return false
}

// SetSourcePort1 gets a reference to the given NullableInt32 and assigns it to the SourcePort1 field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetSourcePort1(v int32) {
	o.SourcePort1.Set(&v)
}
// SetSourcePort1Nil sets the value for SourcePort1 to be an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetSourcePort1Nil() {
	o.SourcePort1.Set(nil)
}

// UnsetSourcePort1 ensures that no value is present for SourcePort1, not even an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) UnsetSourcePort1() {
	o.SourcePort1.Unset()
}

// GetSourcePort2 returns the SourcePort2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourcePort2() int32 {
	if o == nil || IsNil(o.SourcePort2.Get()) {
		var ret int32
		return ret
	}
	return *o.SourcePort2.Get()
}

// GetSourcePort2Ok returns a tuple with the SourcePort2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetSourcePort2Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourcePort2.Get(), o.SourcePort2.IsSet()
}

// HasSourcePort2 returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasSourcePort2() bool {
	if o != nil && o.SourcePort2.IsSet() {
		return true
	}

	return false
}

// SetSourcePort2 gets a reference to the given NullableInt32 and assigns it to the SourcePort2 field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetSourcePort2(v int32) {
	o.SourcePort2.Set(&v)
}
// SetSourcePort2Nil sets the value for SourcePort2 to be an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetSourcePort2Nil() {
	o.SourcePort2.Set(nil)
}

// UnsetSourcePort2 ensures that no value is present for SourcePort2, not even an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) UnsetSourcePort2() {
	o.SourcePort2.Unset()
}

// GetDestinationIp returns the DestinationIp field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationIp() string {
	if o == nil || IsNil(o.DestinationIp) {
		var ret string
		return ret
	}
	return *o.DestinationIp
}

// GetDestinationIpOk returns a tuple with the DestinationIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationIpOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationIp) {
		return nil, false
	}
	return o.DestinationIp, true
}

// HasDestinationIp returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasDestinationIp() bool {
	if o != nil && !IsNil(o.DestinationIp) {
		return true
	}

	return false
}

// SetDestinationIp gets a reference to the given string and assigns it to the DestinationIp field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetDestinationIp(v string) {
	o.DestinationIp = &v
}

// GetDestinationPortOperator returns the DestinationPortOperator field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationPortOperator() string {
	if o == nil || IsNil(o.DestinationPortOperator) {
		var ret string
		return ret
	}
	return *o.DestinationPortOperator
}

// GetDestinationPortOperatorOk returns a tuple with the DestinationPortOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationPortOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationPortOperator) {
		return nil, false
	}
	return o.DestinationPortOperator, true
}

// HasDestinationPortOperator returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasDestinationPortOperator() bool {
	if o != nil && !IsNil(o.DestinationPortOperator) {
		return true
	}

	return false
}

// SetDestinationPortOperator gets a reference to the given string and assigns it to the DestinationPortOperator field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetDestinationPortOperator(v string) {
	o.DestinationPortOperator = &v
}

// GetDestinationPort1 returns the DestinationPort1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationPort1() int32 {
	if o == nil || IsNil(o.DestinationPort1.Get()) {
		var ret int32
		return ret
	}
	return *o.DestinationPort1.Get()
}

// GetDestinationPort1Ok returns a tuple with the DestinationPort1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationPort1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationPort1.Get(), o.DestinationPort1.IsSet()
}

// HasDestinationPort1 returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasDestinationPort1() bool {
	if o != nil && o.DestinationPort1.IsSet() {
		return true
	}

	return false
}

// SetDestinationPort1 gets a reference to the given NullableInt32 and assigns it to the DestinationPort1 field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetDestinationPort1(v int32) {
	o.DestinationPort1.Set(&v)
}
// SetDestinationPort1Nil sets the value for DestinationPort1 to be an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetDestinationPort1Nil() {
	o.DestinationPort1.Set(nil)
}

// UnsetDestinationPort1 ensures that no value is present for DestinationPort1, not even an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) UnsetDestinationPort1() {
	o.DestinationPort1.Unset()
}

// GetDestinationPort2 returns the DestinationPort2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationPort2() int32 {
	if o == nil || IsNil(o.DestinationPort2.Get()) {
		var ret int32
		return ret
	}
	return *o.DestinationPort2.Get()
}

// GetDestinationPort2Ok returns a tuple with the DestinationPort2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetDestinationPort2Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationPort2.Get(), o.DestinationPort2.IsSet()
}

// HasDestinationPort2 returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasDestinationPort2() bool {
	if o != nil && o.DestinationPort2.IsSet() {
		return true
	}

	return false
}

// SetDestinationPort2 gets a reference to the given NullableInt32 and assigns it to the DestinationPort2 field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetDestinationPort2(v int32) {
	o.DestinationPort2.Set(&v)
}
// SetDestinationPort2Nil sets the value for DestinationPort2 to be an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetDestinationPort2Nil() {
	o.DestinationPort2.Set(nil)
}

// UnsetDestinationPort2 ensures that no value is present for DestinationPort2, not even an explicit nil
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) UnsetDestinationPort2() {
	o.DestinationPort2.Unset()
}

// GetObjectProperties returns the ObjectProperties field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetObjectProperties() ConfigPutRequestIpv4PrefixListIpv4PrefixListNameObjectProperties {
	if o == nil || IsNil(o.ObjectProperties) {
		var ret ConfigPutRequestIpv4PrefixListIpv4PrefixListNameObjectProperties
		return ret
	}
	return *o.ObjectProperties
}

// GetObjectPropertiesOk returns a tuple with the ObjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) GetObjectPropertiesOk() (*ConfigPutRequestIpv4PrefixListIpv4PrefixListNameObjectProperties, bool) {
	if o == nil || IsNil(o.ObjectProperties) {
		return nil, false
	}
	return o.ObjectProperties, true
}

// HasObjectProperties returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) HasObjectProperties() bool {
	if o != nil && !IsNil(o.ObjectProperties) {
		return true
	}

	return false
}

// SetObjectProperties gets a reference to the given ConfigPutRequestIpv4PrefixListIpv4PrefixListNameObjectProperties and assigns it to the ObjectProperties field.
func (o *ConfigPutRequestIpv4FilterIpv4FilterName) SetObjectProperties(v ConfigPutRequestIpv4PrefixListIpv4PrefixListNameObjectProperties) {
	o.ObjectProperties = &v
}

func (o ConfigPutRequestIpv4FilterIpv4FilterName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestIpv4FilterIpv4FilterName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Bidirectional) {
		toSerialize["bidirectional"] = o.Bidirectional
	}
	if !IsNil(o.SourceIp) {
		toSerialize["source_ip"] = o.SourceIp
	}
	if !IsNil(o.SourcePortOperator) {
		toSerialize["source_port_operator"] = o.SourcePortOperator
	}
	if o.SourcePort1.IsSet() {
		toSerialize["source_port_1"] = o.SourcePort1.Get()
	}
	if o.SourcePort2.IsSet() {
		toSerialize["source_port_2"] = o.SourcePort2.Get()
	}
	if !IsNil(o.DestinationIp) {
		toSerialize["destination_ip"] = o.DestinationIp
	}
	if !IsNil(o.DestinationPortOperator) {
		toSerialize["destination_port_operator"] = o.DestinationPortOperator
	}
	if o.DestinationPort1.IsSet() {
		toSerialize["destination_port_1"] = o.DestinationPort1.Get()
	}
	if o.DestinationPort2.IsSet() {
		toSerialize["destination_port_2"] = o.DestinationPort2.Get()
	}
	if !IsNil(o.ObjectProperties) {
		toSerialize["object_properties"] = o.ObjectProperties
	}
	return toSerialize, nil
}

type NullableConfigPutRequestIpv4FilterIpv4FilterName struct {
	value *ConfigPutRequestIpv4FilterIpv4FilterName
	isSet bool
}

func (v NullableConfigPutRequestIpv4FilterIpv4FilterName) Get() *ConfigPutRequestIpv4FilterIpv4FilterName {
	return v.value
}

func (v *NullableConfigPutRequestIpv4FilterIpv4FilterName) Set(val *ConfigPutRequestIpv4FilterIpv4FilterName) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestIpv4FilterIpv4FilterName) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestIpv4FilterIpv4FilterName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestIpv4FilterIpv4FilterName(val *ConfigPutRequestIpv4FilterIpv4FilterName) *NullableConfigPutRequestIpv4FilterIpv4FilterName {
	return &NullableConfigPutRequestIpv4FilterIpv4FilterName{value: val, isSet: true}
}

func (v NullableConfigPutRequestIpv4FilterIpv4FilterName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestIpv4FilterIpv4FilterName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


