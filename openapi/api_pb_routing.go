/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// PBRoutingAPIService PBRoutingAPI service
type PBRoutingAPIService service

type ApiPolicybasedroutingDeleteRequest struct {
	ctx context.Context
	ApiService *PBRoutingAPIService
	pbRoutingName *[]string
	changesetName *string
}

func (r ApiPolicybasedroutingDeleteRequest) PbRoutingName(pbRoutingName []string) ApiPolicybasedroutingDeleteRequest {
	r.pbRoutingName = &pbRoutingName
	return r
}

func (r ApiPolicybasedroutingDeleteRequest) ChangesetName(changesetName string) ApiPolicybasedroutingDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingDeleteExecute(r)
}

/*
PolicybasedroutingDelete Delete PB Routing object

Deletes an existing PB Routing object from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingDeleteRequest
*/
func (a *PBRoutingAPIService) PolicybasedroutingDelete(ctx context.Context) ApiPolicybasedroutingDeleteRequest {
	return ApiPolicybasedroutingDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingAPIService) PolicybasedroutingDeleteExecute(r ApiPolicybasedroutingDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingAPIService.PolicybasedroutingDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedrouting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pbRoutingName == nil {
		return nil, reportError("pbRoutingName is required and must be specified")
	}

	{
		t := *r.pbRoutingName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pb_routing_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pb_routing_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPolicybasedroutingGetRequest struct {
	ctx context.Context
	ApiService *PBRoutingAPIService
	pbRoutingName *string
	includeData *bool
	changesetName *string
}

func (r ApiPolicybasedroutingGetRequest) PbRoutingName(pbRoutingName string) ApiPolicybasedroutingGetRequest {
	r.pbRoutingName = &pbRoutingName
	return r
}

func (r ApiPolicybasedroutingGetRequest) IncludeData(includeData bool) ApiPolicybasedroutingGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiPolicybasedroutingGetRequest) ChangesetName(changesetName string) ApiPolicybasedroutingGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingGetExecute(r)
}

/*
PolicybasedroutingGet Get all PB Routing objects

Downloads all PB Routing objects from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingGetRequest
*/
func (a *PBRoutingAPIService) PolicybasedroutingGet(ctx context.Context) ApiPolicybasedroutingGetRequest {
	return ApiPolicybasedroutingGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingAPIService) PolicybasedroutingGetExecute(r ApiPolicybasedroutingGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingAPIService.PolicybasedroutingGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedrouting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pbRoutingName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pb_routing_name", r.pbRoutingName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPolicybasedroutingPatchRequest struct {
	ctx context.Context
	ApiService *PBRoutingAPIService
	changesetName *string
	policybasedroutingPutRequest *PolicybasedroutingPutRequest
}

func (r ApiPolicybasedroutingPatchRequest) ChangesetName(changesetName string) ApiPolicybasedroutingPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingPatchRequest) PolicybasedroutingPutRequest(policybasedroutingPutRequest PolicybasedroutingPutRequest) ApiPolicybasedroutingPatchRequest {
	r.policybasedroutingPutRequest = &policybasedroutingPutRequest
	return r
}

func (r ApiPolicybasedroutingPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingPatchExecute(r)
}

/*
PolicybasedroutingPatch Update PB Routing object

Update PB Routing object into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingPatchRequest
*/
func (a *PBRoutingAPIService) PolicybasedroutingPatch(ctx context.Context) ApiPolicybasedroutingPatchRequest {
	return ApiPolicybasedroutingPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingAPIService) PolicybasedroutingPatchExecute(r ApiPolicybasedroutingPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingAPIService.PolicybasedroutingPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedrouting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policybasedroutingPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPolicybasedroutingPutRequest struct {
	ctx context.Context
	ApiService *PBRoutingAPIService
	changesetName *string
	policybasedroutingPutRequest *PolicybasedroutingPutRequest
}

func (r ApiPolicybasedroutingPutRequest) ChangesetName(changesetName string) ApiPolicybasedroutingPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingPutRequest) PolicybasedroutingPutRequest(policybasedroutingPutRequest PolicybasedroutingPutRequest) ApiPolicybasedroutingPutRequest {
	r.policybasedroutingPutRequest = &policybasedroutingPutRequest
	return r
}

func (r ApiPolicybasedroutingPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingPutExecute(r)
}

/*
PolicybasedroutingPut Create PB Routing object

Create PB Routing object into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingPutRequest
*/
func (a *PBRoutingAPIService) PolicybasedroutingPut(ctx context.Context) ApiPolicybasedroutingPutRequest {
	return ApiPolicybasedroutingPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingAPIService) PolicybasedroutingPutExecute(r ApiPolicybasedroutingPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingAPIService.PolicybasedroutingPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedrouting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policybasedroutingPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
