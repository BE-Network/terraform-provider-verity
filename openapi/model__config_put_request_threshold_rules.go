/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestThresholdRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestThresholdRules{}

// ConfigPutRequestThresholdRules struct for ConfigPutRequestThresholdRules
type ConfigPutRequestThresholdRules struct {
	ThresholdRulesName *ConfigPutRequestThresholdRulesThresholdRulesName `json:"threshold_rules_name,omitempty"`
}

// NewConfigPutRequestThresholdRules instantiates a new ConfigPutRequestThresholdRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestThresholdRules() *ConfigPutRequestThresholdRules {
	this := ConfigPutRequestThresholdRules{}
	return &this
}

// NewConfigPutRequestThresholdRulesWithDefaults instantiates a new ConfigPutRequestThresholdRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestThresholdRulesWithDefaults() *ConfigPutRequestThresholdRules {
	this := ConfigPutRequestThresholdRules{}
	return &this
}

// GetThresholdRulesName returns the ThresholdRulesName field value if set, zero value otherwise.
func (o *ConfigPutRequestThresholdRules) GetThresholdRulesName() ConfigPutRequestThresholdRulesThresholdRulesName {
	if o == nil || IsNil(o.ThresholdRulesName) {
		var ret ConfigPutRequestThresholdRulesThresholdRulesName
		return ret
	}
	return *o.ThresholdRulesName
}

// GetThresholdRulesNameOk returns a tuple with the ThresholdRulesName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestThresholdRules) GetThresholdRulesNameOk() (*ConfigPutRequestThresholdRulesThresholdRulesName, bool) {
	if o == nil || IsNil(o.ThresholdRulesName) {
		return nil, false
	}
	return o.ThresholdRulesName, true
}

// HasThresholdRulesName returns a boolean if a field has been set.
func (o *ConfigPutRequestThresholdRules) HasThresholdRulesName() bool {
	if o != nil && !IsNil(o.ThresholdRulesName) {
		return true
	}

	return false
}

// SetThresholdRulesName gets a reference to the given ConfigPutRequestThresholdRulesThresholdRulesName and assigns it to the ThresholdRulesName field.
func (o *ConfigPutRequestThresholdRules) SetThresholdRulesName(v ConfigPutRequestThresholdRulesThresholdRulesName) {
	o.ThresholdRulesName = &v
}

func (o ConfigPutRequestThresholdRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestThresholdRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ThresholdRulesName) {
		toSerialize["threshold_rules_name"] = o.ThresholdRulesName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestThresholdRules struct {
	value *ConfigPutRequestThresholdRules
	isSet bool
}

func (v NullableConfigPutRequestThresholdRules) Get() *ConfigPutRequestThresholdRules {
	return v.value
}

func (v *NullableConfigPutRequestThresholdRules) Set(val *ConfigPutRequestThresholdRules) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestThresholdRules) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestThresholdRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestThresholdRules(val *ConfigPutRequestThresholdRules) *NullableConfigPutRequestThresholdRules {
	return &NullableConfigPutRequestThresholdRules{value: val, isSet: true}
}

func (v NullableConfigPutRequestThresholdRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestThresholdRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


