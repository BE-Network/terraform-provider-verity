/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestFeatureFlagFeatureFlagName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestFeatureFlagFeatureFlagName{}

// ConfigPutRequestFeatureFlagFeatureFlagName struct for ConfigPutRequestFeatureFlagFeatureFlagName
type ConfigPutRequestFeatureFlagFeatureFlagName struct {
	// Object Name. Must be unique.
	Name *string `json:"name,omitempty"`
	// Enable object.
	Enable *bool `json:"enable,omitempty"`
	Feature []ConfigPutRequestFeatureFlagFeatureFlagNameFeatureInner `json:"feature,omitempty"`
}

// NewConfigPutRequestFeatureFlagFeatureFlagName instantiates a new ConfigPutRequestFeatureFlagFeatureFlagName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestFeatureFlagFeatureFlagName() *ConfigPutRequestFeatureFlagFeatureFlagName {
	this := ConfigPutRequestFeatureFlagFeatureFlagName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	return &this
}

// NewConfigPutRequestFeatureFlagFeatureFlagNameWithDefaults instantiates a new ConfigPutRequestFeatureFlagFeatureFlagName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestFeatureFlagFeatureFlagNameWithDefaults() *ConfigPutRequestFeatureFlagFeatureFlagName {
	this := ConfigPutRequestFeatureFlagFeatureFlagName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) SetName(v string) {
	o.Name = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) SetEnable(v bool) {
	o.Enable = &v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) GetFeature() []ConfigPutRequestFeatureFlagFeatureFlagNameFeatureInner {
	if o == nil || IsNil(o.Feature) {
		var ret []ConfigPutRequestFeatureFlagFeatureFlagNameFeatureInner
		return ret
	}
	return o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) GetFeatureOk() ([]ConfigPutRequestFeatureFlagFeatureFlagNameFeatureInner, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given []ConfigPutRequestFeatureFlagFeatureFlagNameFeatureInner and assigns it to the Feature field.
func (o *ConfigPutRequestFeatureFlagFeatureFlagName) SetFeature(v []ConfigPutRequestFeatureFlagFeatureFlagNameFeatureInner) {
	o.Feature = v
}

func (o ConfigPutRequestFeatureFlagFeatureFlagName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestFeatureFlagFeatureFlagName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	return toSerialize, nil
}

type NullableConfigPutRequestFeatureFlagFeatureFlagName struct {
	value *ConfigPutRequestFeatureFlagFeatureFlagName
	isSet bool
}

func (v NullableConfigPutRequestFeatureFlagFeatureFlagName) Get() *ConfigPutRequestFeatureFlagFeatureFlagName {
	return v.value
}

func (v *NullableConfigPutRequestFeatureFlagFeatureFlagName) Set(val *ConfigPutRequestFeatureFlagFeatureFlagName) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestFeatureFlagFeatureFlagName) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestFeatureFlagFeatureFlagName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestFeatureFlagFeatureFlagName(val *ConfigPutRequestFeatureFlagFeatureFlagName) *NullableConfigPutRequestFeatureFlagFeatureFlagName {
	return &NullableConfigPutRequestFeatureFlagFeatureFlagName{value: val, isSet: true}
}

func (v NullableConfigPutRequestFeatureFlagFeatureFlagName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestFeatureFlagFeatureFlagName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


