/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// EthPortSettingsAPIService EthPortSettingsAPI service
type EthPortSettingsAPIService service

type ApiEthportsettingsDeleteRequest struct {
	ctx context.Context
	ApiService *EthPortSettingsAPIService
	portName *[]string
	changesetName *string
}

func (r ApiEthportsettingsDeleteRequest) PortName(portName []string) ApiEthportsettingsDeleteRequest {
	r.portName = &portName
	return r
}

func (r ApiEthportsettingsDeleteRequest) ChangesetName(changesetName string) ApiEthportsettingsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportsettingsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportsettingsDeleteExecute(r)
}

/*
EthportsettingsDelete Delete Eth-Port Settings

Deletes an existing Eth-Port Settings from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportsettingsDeleteRequest
*/
func (a *EthPortSettingsAPIService) EthportsettingsDelete(ctx context.Context) ApiEthportsettingsDeleteRequest {
	return ApiEthportsettingsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortSettingsAPIService) EthportsettingsDeleteExecute(r ApiEthportsettingsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortSettingsAPIService.EthportsettingsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portName == nil {
		return nil, reportError("portName is required and must be specified")
	}

	{
		t := *r.portName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "port_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "port_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEthportsettingsGetRequest struct {
	ctx context.Context
	ApiService *EthPortSettingsAPIService
	portName *string
	includeData *bool
	changesetName *string
}

func (r ApiEthportsettingsGetRequest) PortName(portName string) ApiEthportsettingsGetRequest {
	r.portName = &portName
	return r
}

func (r ApiEthportsettingsGetRequest) IncludeData(includeData bool) ApiEthportsettingsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiEthportsettingsGetRequest) ChangesetName(changesetName string) ApiEthportsettingsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportsettingsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportsettingsGetExecute(r)
}

/*
EthportsettingsGet Get all Eth-Port Settings

Downloads all Eth-Port Settings from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportsettingsGetRequest
*/
func (a *EthPortSettingsAPIService) EthportsettingsGet(ctx context.Context) ApiEthportsettingsGetRequest {
	return ApiEthportsettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortSettingsAPIService) EthportsettingsGetExecute(r ApiEthportsettingsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortSettingsAPIService.EthportsettingsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.portName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port_name", r.portName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEthportsettingsPatchRequest struct {
	ctx context.Context
	ApiService *EthPortSettingsAPIService
	changesetName *string
	ethportsettingsPutRequest *EthportsettingsPutRequest
}

func (r ApiEthportsettingsPatchRequest) ChangesetName(changesetName string) ApiEthportsettingsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportsettingsPatchRequest) EthportsettingsPutRequest(ethportsettingsPutRequest EthportsettingsPutRequest) ApiEthportsettingsPatchRequest {
	r.ethportsettingsPutRequest = &ethportsettingsPutRequest
	return r
}

func (r ApiEthportsettingsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportsettingsPatchExecute(r)
}

/*
EthportsettingsPatch Update Eth-Port Settings

Update Eth-Port Settings into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportsettingsPatchRequest
*/
func (a *EthPortSettingsAPIService) EthportsettingsPatch(ctx context.Context) ApiEthportsettingsPatchRequest {
	return ApiEthportsettingsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortSettingsAPIService) EthportsettingsPatchExecute(r ApiEthportsettingsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortSettingsAPIService.EthportsettingsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ethportsettingsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEthportsettingsPutRequest struct {
	ctx context.Context
	ApiService *EthPortSettingsAPIService
	changesetName *string
	ethportsettingsPutRequest *EthportsettingsPutRequest
}

func (r ApiEthportsettingsPutRequest) ChangesetName(changesetName string) ApiEthportsettingsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiEthportsettingsPutRequest) EthportsettingsPutRequest(ethportsettingsPutRequest EthportsettingsPutRequest) ApiEthportsettingsPutRequest {
	r.ethportsettingsPutRequest = &ethportsettingsPutRequest
	return r
}

func (r ApiEthportsettingsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.EthportsettingsPutExecute(r)
}

/*
EthportsettingsPut Create Eth-Port Settings

Create Eth-Port Settings into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEthportsettingsPutRequest
*/
func (a *EthPortSettingsAPIService) EthportsettingsPut(ctx context.Context) ApiEthportsettingsPutRequest {
	return ApiEthportsettingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EthPortSettingsAPIService) EthportsettingsPutExecute(r ApiEthportsettingsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EthPortSettingsAPIService.EthportsettingsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ethportsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ethportsettingsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
