/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PolicybasedroutingaclPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicybasedroutingaclPutRequest{}

// PolicybasedroutingaclPutRequest struct for PolicybasedroutingaclPutRequest
type PolicybasedroutingaclPutRequest struct {
	PbRoutingAcl *map[string]PolicybasedroutingaclPutRequestPbRoutingAclValue `json:"pb_routing_acl,omitempty"`
}

// NewPolicybasedroutingaclPutRequest instantiates a new PolicybasedroutingaclPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicybasedroutingaclPutRequest() *PolicybasedroutingaclPutRequest {
	this := PolicybasedroutingaclPutRequest{}
	return &this
}

// NewPolicybasedroutingaclPutRequestWithDefaults instantiates a new PolicybasedroutingaclPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicybasedroutingaclPutRequestWithDefaults() *PolicybasedroutingaclPutRequest {
	this := PolicybasedroutingaclPutRequest{}
	return &this
}

// GetPbRoutingAcl returns the PbRoutingAcl field value if set, zero value otherwise.
func (o *PolicybasedroutingaclPutRequest) GetPbRoutingAcl() map[string]PolicybasedroutingaclPutRequestPbRoutingAclValue {
	if o == nil || IsNil(o.PbRoutingAcl) {
		var ret map[string]PolicybasedroutingaclPutRequestPbRoutingAclValue
		return ret
	}
	return *o.PbRoutingAcl
}

// GetPbRoutingAclOk returns a tuple with the PbRoutingAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicybasedroutingaclPutRequest) GetPbRoutingAclOk() (*map[string]PolicybasedroutingaclPutRequestPbRoutingAclValue, bool) {
	if o == nil || IsNil(o.PbRoutingAcl) {
		return nil, false
	}
	return o.PbRoutingAcl, true
}

// HasPbRoutingAcl returns a boolean if a field has been set.
func (o *PolicybasedroutingaclPutRequest) HasPbRoutingAcl() bool {
	if o != nil && !IsNil(o.PbRoutingAcl) {
		return true
	}

	return false
}

// SetPbRoutingAcl gets a reference to the given map[string]PolicybasedroutingaclPutRequestPbRoutingAclValue and assigns it to the PbRoutingAcl field.
func (o *PolicybasedroutingaclPutRequest) SetPbRoutingAcl(v map[string]PolicybasedroutingaclPutRequestPbRoutingAclValue) {
	o.PbRoutingAcl = &v
}

func (o PolicybasedroutingaclPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicybasedroutingaclPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PbRoutingAcl) {
		toSerialize["pb_routing_acl"] = o.PbRoutingAcl
	}
	return toSerialize, nil
}

type NullablePolicybasedroutingaclPutRequest struct {
	value *PolicybasedroutingaclPutRequest
	isSet bool
}

func (v NullablePolicybasedroutingaclPutRequest) Get() *PolicybasedroutingaclPutRequest {
	return v.value
}

func (v *NullablePolicybasedroutingaclPutRequest) Set(val *PolicybasedroutingaclPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicybasedroutingaclPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicybasedroutingaclPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicybasedroutingaclPutRequest(val *PolicybasedroutingaclPutRequest) *NullablePolicybasedroutingaclPutRequest {
	return &NullablePolicybasedroutingaclPutRequest{value: val, isSet: true}
}

func (v NullablePolicybasedroutingaclPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicybasedroutingaclPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


