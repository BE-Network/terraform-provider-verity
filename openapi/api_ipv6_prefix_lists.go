/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// IPv6PrefixListsAPIService IPv6PrefixListsAPI service
type IPv6PrefixListsAPIService service

type ApiIpv6prefixlistsDeleteRequest struct {
	ctx context.Context
	ApiService *IPv6PrefixListsAPIService
	ipv6PrefixListName *[]string
	changesetName *string
}

func (r ApiIpv6prefixlistsDeleteRequest) Ipv6PrefixListName(ipv6PrefixListName []string) ApiIpv6prefixlistsDeleteRequest {
	r.ipv6PrefixListName = &ipv6PrefixListName
	return r
}

func (r ApiIpv6prefixlistsDeleteRequest) ChangesetName(changesetName string) ApiIpv6prefixlistsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6prefixlistsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6prefixlistsDeleteExecute(r)
}

/*
Ipv6prefixlistsDelete Delete IPv6 Prefix List

Deletes an existing IPv6 Prefix List from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6prefixlistsDeleteRequest
*/
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsDelete(ctx context.Context) ApiIpv6prefixlistsDeleteRequest {
	return ApiIpv6prefixlistsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsDeleteExecute(r ApiIpv6prefixlistsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6PrefixListsAPIService.Ipv6prefixlistsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6PrefixListName == nil {
		return nil, reportError("ipv6PrefixListName is required and must be specified")
	}

	{
		t := *r.ipv6PrefixListName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6_prefix_list_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6_prefix_list_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv6prefixlistsGetRequest struct {
	ctx context.Context
	ApiService *IPv6PrefixListsAPIService
	ipv6PrefixListName *string
	includeData *bool
	changesetName *string
}

func (r ApiIpv6prefixlistsGetRequest) Ipv6PrefixListName(ipv6PrefixListName string) ApiIpv6prefixlistsGetRequest {
	r.ipv6PrefixListName = &ipv6PrefixListName
	return r
}

func (r ApiIpv6prefixlistsGetRequest) IncludeData(includeData bool) ApiIpv6prefixlistsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiIpv6prefixlistsGetRequest) ChangesetName(changesetName string) ApiIpv6prefixlistsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6prefixlistsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6prefixlistsGetExecute(r)
}

/*
Ipv6prefixlistsGet Get all IPv6 Prefix Lists

Retrieves all IPv6 Prefix Lists from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6prefixlistsGetRequest
*/
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsGet(ctx context.Context) ApiIpv6prefixlistsGetRequest {
	return ApiIpv6prefixlistsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsGetExecute(r ApiIpv6prefixlistsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6PrefixListsAPIService.Ipv6prefixlistsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ipv6PrefixListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6_prefix_list_name", r.ipv6PrefixListName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv6prefixlistsPatchRequest struct {
	ctx context.Context
	ApiService *IPv6PrefixListsAPIService
	changesetName *string
	ipv6prefixlistsPutRequest *Ipv6prefixlistsPutRequest
}

func (r ApiIpv6prefixlistsPatchRequest) ChangesetName(changesetName string) ApiIpv6prefixlistsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6prefixlistsPatchRequest) Ipv6prefixlistsPutRequest(ipv6prefixlistsPutRequest Ipv6prefixlistsPutRequest) ApiIpv6prefixlistsPatchRequest {
	r.ipv6prefixlistsPutRequest = &ipv6prefixlistsPutRequest
	return r
}

func (r ApiIpv6prefixlistsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6prefixlistsPatchExecute(r)
}

/*
Ipv6prefixlistsPatch Update IPv6 Prefix List

Update IPv6 Prefix List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6prefixlistsPatchRequest
*/
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsPatch(ctx context.Context) ApiIpv6prefixlistsPatchRequest {
	return ApiIpv6prefixlistsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsPatchExecute(r ApiIpv6prefixlistsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6PrefixListsAPIService.Ipv6prefixlistsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv6prefixlistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIpv6prefixlistsPutRequest struct {
	ctx context.Context
	ApiService *IPv6PrefixListsAPIService
	changesetName *string
	ipv6prefixlistsPutRequest *Ipv6prefixlistsPutRequest
}

func (r ApiIpv6prefixlistsPutRequest) ChangesetName(changesetName string) ApiIpv6prefixlistsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiIpv6prefixlistsPutRequest) Ipv6prefixlistsPutRequest(ipv6prefixlistsPutRequest Ipv6prefixlistsPutRequest) ApiIpv6prefixlistsPutRequest {
	r.ipv6prefixlistsPutRequest = &ipv6prefixlistsPutRequest
	return r
}

func (r ApiIpv6prefixlistsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.Ipv6prefixlistsPutExecute(r)
}

/*
Ipv6prefixlistsPut Create IPv6 Prefix List

Create IPv6 Prefix List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIpv6prefixlistsPutRequest
*/
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsPut(ctx context.Context) ApiIpv6prefixlistsPutRequest {
	return ApiIpv6prefixlistsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IPv6PrefixListsAPIService) Ipv6prefixlistsPutExecute(r ApiIpv6prefixlistsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPv6PrefixListsAPIService.Ipv6prefixlistsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipv6prefixlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv6prefixlistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
