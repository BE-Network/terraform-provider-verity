/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// PBRoutingACLAPIService PBRoutingACLAPI service
type PBRoutingACLAPIService service

type ApiPolicybasedroutingaclDeleteRequest struct {
	ctx context.Context
	ApiService *PBRoutingACLAPIService
	pbRoutingAclName *[]string
	changesetName *string
}

func (r ApiPolicybasedroutingaclDeleteRequest) PbRoutingAclName(pbRoutingAclName []string) ApiPolicybasedroutingaclDeleteRequest {
	r.pbRoutingAclName = &pbRoutingAclName
	return r
}

func (r ApiPolicybasedroutingaclDeleteRequest) ChangesetName(changesetName string) ApiPolicybasedroutingaclDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingaclDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingaclDeleteExecute(r)
}

/*
PolicybasedroutingaclDelete Delete PB Routing ACL

Deletes an existing PB Routing ACL from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingaclDeleteRequest
*/
func (a *PBRoutingACLAPIService) PolicybasedroutingaclDelete(ctx context.Context) ApiPolicybasedroutingaclDeleteRequest {
	return ApiPolicybasedroutingaclDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingACLAPIService) PolicybasedroutingaclDeleteExecute(r ApiPolicybasedroutingaclDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingACLAPIService.PolicybasedroutingaclDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedroutingacl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pbRoutingAclName == nil {
		return nil, reportError("pbRoutingAclName is required and must be specified")
	}

	{
		t := *r.pbRoutingAclName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pb_routing_acl_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pb_routing_acl_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPolicybasedroutingaclGetRequest struct {
	ctx context.Context
	ApiService *PBRoutingACLAPIService
	pbRoutingAclName *string
	includeData *bool
	changesetName *string
}

func (r ApiPolicybasedroutingaclGetRequest) PbRoutingAclName(pbRoutingAclName string) ApiPolicybasedroutingaclGetRequest {
	r.pbRoutingAclName = &pbRoutingAclName
	return r
}

func (r ApiPolicybasedroutingaclGetRequest) IncludeData(includeData bool) ApiPolicybasedroutingaclGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiPolicybasedroutingaclGetRequest) ChangesetName(changesetName string) ApiPolicybasedroutingaclGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingaclGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingaclGetExecute(r)
}

/*
PolicybasedroutingaclGet Get all PB Routing ACLs

Downloads all PB Routing ACLs from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingaclGetRequest
*/
func (a *PBRoutingACLAPIService) PolicybasedroutingaclGet(ctx context.Context) ApiPolicybasedroutingaclGetRequest {
	return ApiPolicybasedroutingaclGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingACLAPIService) PolicybasedroutingaclGetExecute(r ApiPolicybasedroutingaclGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingACLAPIService.PolicybasedroutingaclGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedroutingacl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pbRoutingAclName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pb_routing_acl_name", r.pbRoutingAclName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPolicybasedroutingaclPatchRequest struct {
	ctx context.Context
	ApiService *PBRoutingACLAPIService
	changesetName *string
	policybasedroutingaclPutRequest *PolicybasedroutingaclPutRequest
}

func (r ApiPolicybasedroutingaclPatchRequest) ChangesetName(changesetName string) ApiPolicybasedroutingaclPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingaclPatchRequest) PolicybasedroutingaclPutRequest(policybasedroutingaclPutRequest PolicybasedroutingaclPutRequest) ApiPolicybasedroutingaclPatchRequest {
	r.policybasedroutingaclPutRequest = &policybasedroutingaclPutRequest
	return r
}

func (r ApiPolicybasedroutingaclPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingaclPatchExecute(r)
}

/*
PolicybasedroutingaclPatch Update PB Routing ACL

Update PB Routing ACL into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingaclPatchRequest
*/
func (a *PBRoutingACLAPIService) PolicybasedroutingaclPatch(ctx context.Context) ApiPolicybasedroutingaclPatchRequest {
	return ApiPolicybasedroutingaclPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingACLAPIService) PolicybasedroutingaclPatchExecute(r ApiPolicybasedroutingaclPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingACLAPIService.PolicybasedroutingaclPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedroutingacl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policybasedroutingaclPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPolicybasedroutingaclPutRequest struct {
	ctx context.Context
	ApiService *PBRoutingACLAPIService
	changesetName *string
	policybasedroutingaclPutRequest *PolicybasedroutingaclPutRequest
}

func (r ApiPolicybasedroutingaclPutRequest) ChangesetName(changesetName string) ApiPolicybasedroutingaclPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiPolicybasedroutingaclPutRequest) PolicybasedroutingaclPutRequest(policybasedroutingaclPutRequest PolicybasedroutingaclPutRequest) ApiPolicybasedroutingaclPutRequest {
	r.policybasedroutingaclPutRequest = &policybasedroutingaclPutRequest
	return r
}

func (r ApiPolicybasedroutingaclPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.PolicybasedroutingaclPutExecute(r)
}

/*
PolicybasedroutingaclPut Create PB Routing ACL

Create PB Routing ACL into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPolicybasedroutingaclPutRequest
*/
func (a *PBRoutingACLAPIService) PolicybasedroutingaclPut(ctx context.Context) ApiPolicybasedroutingaclPutRequest {
	return ApiPolicybasedroutingaclPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PBRoutingACLAPIService) PolicybasedroutingaclPutExecute(r ApiPolicybasedroutingaclPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PBRoutingACLAPIService.PolicybasedroutingaclPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policybasedroutingacl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policybasedroutingaclPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
