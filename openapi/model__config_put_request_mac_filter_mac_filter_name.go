/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestMacFilterMacFilterName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestMacFilterMacFilterName{}

// ConfigPutRequestMacFilterMacFilterName struct for ConfigPutRequestMacFilterMacFilterName
type ConfigPutRequestMacFilterMacFilterName struct {
	// Object Name. Must be unique.
	Name *string `json:"name,omitempty"`
	// Enable object.
	Enable *bool `json:"enable,omitempty"`
	// Black vs White MAC Filter
	Type *string `json:"type,omitempty"`
	Acl []ConfigPutRequestMacFilterMacFilterNameAclInner `json:"acl,omitempty"`
	ObjectProperties *ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties `json:"object_properties,omitempty"`
}

// NewConfigPutRequestMacFilterMacFilterName instantiates a new ConfigPutRequestMacFilterMacFilterName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestMacFilterMacFilterName() *ConfigPutRequestMacFilterMacFilterName {
	this := ConfigPutRequestMacFilterMacFilterName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var type_ string = "White"
	this.Type = &type_
	return &this
}

// NewConfigPutRequestMacFilterMacFilterNameWithDefaults instantiates a new ConfigPutRequestMacFilterMacFilterName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestMacFilterMacFilterNameWithDefaults() *ConfigPutRequestMacFilterMacFilterName {
	this := ConfigPutRequestMacFilterMacFilterName{}
	var name string = ""
	this.Name = &name
	var enable bool = false
	this.Enable = &enable
	var type_ string = "White"
	this.Type = &type_
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigPutRequestMacFilterMacFilterName) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigPutRequestMacFilterMacFilterName) SetName(v string) {
	o.Name = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ConfigPutRequestMacFilterMacFilterName) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ConfigPutRequestMacFilterMacFilterName) SetEnable(v bool) {
	o.Enable = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConfigPutRequestMacFilterMacFilterName) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConfigPutRequestMacFilterMacFilterName) SetType(v string) {
	o.Type = &v
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *ConfigPutRequestMacFilterMacFilterName) GetAcl() []ConfigPutRequestMacFilterMacFilterNameAclInner {
	if o == nil || IsNil(o.Acl) {
		var ret []ConfigPutRequestMacFilterMacFilterNameAclInner
		return ret
	}
	return o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) GetAclOk() ([]ConfigPutRequestMacFilterMacFilterNameAclInner, bool) {
	if o == nil || IsNil(o.Acl) {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) HasAcl() bool {
	if o != nil && !IsNil(o.Acl) {
		return true
	}

	return false
}

// SetAcl gets a reference to the given []ConfigPutRequestMacFilterMacFilterNameAclInner and assigns it to the Acl field.
func (o *ConfigPutRequestMacFilterMacFilterName) SetAcl(v []ConfigPutRequestMacFilterMacFilterNameAclInner) {
	o.Acl = v
}

// GetObjectProperties returns the ObjectProperties field value if set, zero value otherwise.
func (o *ConfigPutRequestMacFilterMacFilterName) GetObjectProperties() ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties {
	if o == nil || IsNil(o.ObjectProperties) {
		var ret ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties
		return ret
	}
	return *o.ObjectProperties
}

// GetObjectPropertiesOk returns a tuple with the ObjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) GetObjectPropertiesOk() (*ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties, bool) {
	if o == nil || IsNil(o.ObjectProperties) {
		return nil, false
	}
	return o.ObjectProperties, true
}

// HasObjectProperties returns a boolean if a field has been set.
func (o *ConfigPutRequestMacFilterMacFilterName) HasObjectProperties() bool {
	if o != nil && !IsNil(o.ObjectProperties) {
		return true
	}

	return false
}

// SetObjectProperties gets a reference to the given ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties and assigns it to the ObjectProperties field.
func (o *ConfigPutRequestMacFilterMacFilterName) SetObjectProperties(v ConfigPutRequestEthDeviceProfilesEthDeviceProfilesNameObjectProperties) {
	o.ObjectProperties = &v
}

func (o ConfigPutRequestMacFilterMacFilterName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestMacFilterMacFilterName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Acl) {
		toSerialize["acl"] = o.Acl
	}
	if !IsNil(o.ObjectProperties) {
		toSerialize["object_properties"] = o.ObjectProperties
	}
	return toSerialize, nil
}

type NullableConfigPutRequestMacFilterMacFilterName struct {
	value *ConfigPutRequestMacFilterMacFilterName
	isSet bool
}

func (v NullableConfigPutRequestMacFilterMacFilterName) Get() *ConfigPutRequestMacFilterMacFilterName {
	return v.value
}

func (v *NullableConfigPutRequestMacFilterMacFilterName) Set(val *ConfigPutRequestMacFilterMacFilterName) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestMacFilterMacFilterName) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestMacFilterMacFilterName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestMacFilterMacFilterName(val *ConfigPutRequestMacFilterMacFilterName) *NullableConfigPutRequestMacFilterMacFilterName {
	return &NullableConfigPutRequestMacFilterMacFilterName{value: val, isSet: true}
}

func (v NullableConfigPutRequestMacFilterMacFilterName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestMacFilterMacFilterName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


