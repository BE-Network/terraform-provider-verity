/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SFPBreakoutsAPIService SFPBreakoutsAPI service
type SFPBreakoutsAPIService service

type ApiSfpbreakoutsGetRequest struct {
	ctx context.Context
	ApiService *SFPBreakoutsAPIService
	sfpBreakoutsName *string
	includeData *bool
	changesetName *string
}

func (r ApiSfpbreakoutsGetRequest) SfpBreakoutsName(sfpBreakoutsName string) ApiSfpbreakoutsGetRequest {
	r.sfpBreakoutsName = &sfpBreakoutsName
	return r
}

func (r ApiSfpbreakoutsGetRequest) IncludeData(includeData bool) ApiSfpbreakoutsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiSfpbreakoutsGetRequest) ChangesetName(changesetName string) ApiSfpbreakoutsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSfpbreakoutsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SfpbreakoutsGetExecute(r)
}

/*
SfpbreakoutsGet Get all SFP Breakouts

Retrieves all SFP Breakouts from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSfpbreakoutsGetRequest
*/
func (a *SFPBreakoutsAPIService) SfpbreakoutsGet(ctx context.Context) ApiSfpbreakoutsGetRequest {
	return ApiSfpbreakoutsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SFPBreakoutsAPIService) SfpbreakoutsGetExecute(r ApiSfpbreakoutsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SFPBreakoutsAPIService.SfpbreakoutsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sfpbreakouts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sfpBreakoutsName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sfp_breakouts_name", r.sfpBreakoutsName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSfpbreakoutsPatchRequest struct {
	ctx context.Context
	ApiService *SFPBreakoutsAPIService
	changesetName *string
	sfpbreakoutsPatchRequest *SfpbreakoutsPatchRequest
}

func (r ApiSfpbreakoutsPatchRequest) ChangesetName(changesetName string) ApiSfpbreakoutsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiSfpbreakoutsPatchRequest) SfpbreakoutsPatchRequest(sfpbreakoutsPatchRequest SfpbreakoutsPatchRequest) ApiSfpbreakoutsPatchRequest {
	r.sfpbreakoutsPatchRequest = &sfpbreakoutsPatchRequest
	return r
}

func (r ApiSfpbreakoutsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.SfpbreakoutsPatchExecute(r)
}

/*
SfpbreakoutsPatch Update SFP Breakout

Update SFP Breakout into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSfpbreakoutsPatchRequest
*/
func (a *SFPBreakoutsAPIService) SfpbreakoutsPatch(ctx context.Context) ApiSfpbreakoutsPatchRequest {
	return ApiSfpbreakoutsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SFPBreakoutsAPIService) SfpbreakoutsPatchExecute(r ApiSfpbreakoutsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SFPBreakoutsAPIService.SfpbreakoutsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sfpbreakouts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sfpbreakoutsPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
