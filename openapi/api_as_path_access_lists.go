/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ASPathAccessListsAPIService ASPathAccessListsAPI service
type ASPathAccessListsAPIService service

type ApiAspathaccesslistsDeleteRequest struct {
	ctx context.Context
	ApiService *ASPathAccessListsAPIService
	asPathAccessListName *[]string
	changesetName *string
}

func (r ApiAspathaccesslistsDeleteRequest) AsPathAccessListName(asPathAccessListName []string) ApiAspathaccesslistsDeleteRequest {
	r.asPathAccessListName = &asPathAccessListName
	return r
}

func (r ApiAspathaccesslistsDeleteRequest) ChangesetName(changesetName string) ApiAspathaccesslistsDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAspathaccesslistsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AspathaccesslistsDeleteExecute(r)
}

/*
AspathaccesslistsDelete Delete AS Path Access Lists

Deletes an existing AS Path Access Lists from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAspathaccesslistsDeleteRequest
*/
func (a *ASPathAccessListsAPIService) AspathaccesslistsDelete(ctx context.Context) ApiAspathaccesslistsDeleteRequest {
	return ApiAspathaccesslistsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ASPathAccessListsAPIService) AspathaccesslistsDeleteExecute(r ApiAspathaccesslistsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ASPathAccessListsAPIService.AspathaccesslistsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aspathaccesslists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.asPathAccessListName == nil {
		return nil, reportError("asPathAccessListName is required and must be specified")
	}

	{
		t := *r.asPathAccessListName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "as_path_access_list_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "as_path_access_list_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAspathaccesslistsGetRequest struct {
	ctx context.Context
	ApiService *ASPathAccessListsAPIService
	asPathAccessListName *string
	includeData *bool
	changesetName *string
}

func (r ApiAspathaccesslistsGetRequest) AsPathAccessListName(asPathAccessListName string) ApiAspathaccesslistsGetRequest {
	r.asPathAccessListName = &asPathAccessListName
	return r
}

func (r ApiAspathaccesslistsGetRequest) IncludeData(includeData bool) ApiAspathaccesslistsGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiAspathaccesslistsGetRequest) ChangesetName(changesetName string) ApiAspathaccesslistsGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAspathaccesslistsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AspathaccesslistsGetExecute(r)
}

/*
AspathaccesslistsGet Get all AS Path Access Lists

Retrieves all AS Path Access Lists from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAspathaccesslistsGetRequest
*/
func (a *ASPathAccessListsAPIService) AspathaccesslistsGet(ctx context.Context) ApiAspathaccesslistsGetRequest {
	return ApiAspathaccesslistsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ASPathAccessListsAPIService) AspathaccesslistsGetExecute(r ApiAspathaccesslistsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ASPathAccessListsAPIService.AspathaccesslistsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aspathaccesslists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.asPathAccessListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "as_path_access_list_name", r.asPathAccessListName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAspathaccesslistsPatchRequest struct {
	ctx context.Context
	ApiService *ASPathAccessListsAPIService
	changesetName *string
	aspathaccesslistsPutRequest *AspathaccesslistsPutRequest
}

func (r ApiAspathaccesslistsPatchRequest) ChangesetName(changesetName string) ApiAspathaccesslistsPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAspathaccesslistsPatchRequest) AspathaccesslistsPutRequest(aspathaccesslistsPutRequest AspathaccesslistsPutRequest) ApiAspathaccesslistsPatchRequest {
	r.aspathaccesslistsPutRequest = &aspathaccesslistsPutRequest
	return r
}

func (r ApiAspathaccesslistsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.AspathaccesslistsPatchExecute(r)
}

/*
AspathaccesslistsPatch Update AS Path Access List

Update AS Path Access List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAspathaccesslistsPatchRequest
*/
func (a *ASPathAccessListsAPIService) AspathaccesslistsPatch(ctx context.Context) ApiAspathaccesslistsPatchRequest {
	return ApiAspathaccesslistsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ASPathAccessListsAPIService) AspathaccesslistsPatchExecute(r ApiAspathaccesslistsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ASPathAccessListsAPIService.AspathaccesslistsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aspathaccesslists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aspathaccesslistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAspathaccesslistsPutRequest struct {
	ctx context.Context
	ApiService *ASPathAccessListsAPIService
	changesetName *string
	aspathaccesslistsPutRequest *AspathaccesslistsPutRequest
}

func (r ApiAspathaccesslistsPutRequest) ChangesetName(changesetName string) ApiAspathaccesslistsPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiAspathaccesslistsPutRequest) AspathaccesslistsPutRequest(aspathaccesslistsPutRequest AspathaccesslistsPutRequest) ApiAspathaccesslistsPutRequest {
	r.aspathaccesslistsPutRequest = &aspathaccesslistsPutRequest
	return r
}

func (r ApiAspathaccesslistsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AspathaccesslistsPutExecute(r)
}

/*
AspathaccesslistsPut Create AS Path Access List

Create AS Path Access List into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAspathaccesslistsPutRequest
*/
func (a *ASPathAccessListsAPIService) AspathaccesslistsPut(ctx context.Context) ApiAspathaccesslistsPutRequest {
	return ApiAspathaccesslistsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ASPathAccessListsAPIService) AspathaccesslistsPutExecute(r ApiAspathaccesslistsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ASPathAccessListsAPIService.AspathaccesslistsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/aspathaccesslists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aspathaccesslistsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
