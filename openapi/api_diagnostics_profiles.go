/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DiagnosticsProfilesAPIService DiagnosticsProfilesAPI service
type DiagnosticsProfilesAPIService service

type ApiDiagnosticsprofilesDeleteRequest struct {
	ctx context.Context
	ApiService *DiagnosticsProfilesAPIService
	diagnosticsProfileName *[]string
	changesetName *string
}

func (r ApiDiagnosticsprofilesDeleteRequest) DiagnosticsProfileName(diagnosticsProfileName []string) ApiDiagnosticsprofilesDeleteRequest {
	r.diagnosticsProfileName = &diagnosticsProfileName
	return r
}

func (r ApiDiagnosticsprofilesDeleteRequest) ChangesetName(changesetName string) ApiDiagnosticsprofilesDeleteRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsprofilesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsprofilesDeleteExecute(r)
}

/*
DiagnosticsprofilesDelete Delete Diagnostics Profile

Deletes an existing Diagnostics Profile from the system if changeset_name is empty, from a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsprofilesDeleteRequest
*/
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesDelete(ctx context.Context) ApiDiagnosticsprofilesDeleteRequest {
	return ApiDiagnosticsprofilesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesDeleteExecute(r ApiDiagnosticsprofilesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsProfilesAPIService.DiagnosticsprofilesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.diagnosticsProfileName == nil {
		return nil, reportError("diagnosticsProfileName is required and must be specified")
	}

	{
		t := *r.diagnosticsProfileName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "diagnostics_profile_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "diagnostics_profile_name", t, "form", "multi")
		}
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDiagnosticsprofilesGetRequest struct {
	ctx context.Context
	ApiService *DiagnosticsProfilesAPIService
	diagnosticsProfileName *string
	includeData *bool
	changesetName *string
}

func (r ApiDiagnosticsprofilesGetRequest) DiagnosticsProfileName(diagnosticsProfileName string) ApiDiagnosticsprofilesGetRequest {
	r.diagnosticsProfileName = &diagnosticsProfileName
	return r
}

func (r ApiDiagnosticsprofilesGetRequest) IncludeData(includeData bool) ApiDiagnosticsprofilesGetRequest {
	r.includeData = &includeData
	return r
}

func (r ApiDiagnosticsprofilesGetRequest) ChangesetName(changesetName string) ApiDiagnosticsprofilesGetRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsprofilesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsprofilesGetExecute(r)
}

/*
DiagnosticsprofilesGet Get all Diagnostics Profiles

Downloads all Diagnostics Profiles from the system.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsprofilesGetRequest
*/
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesGet(ctx context.Context) ApiDiagnosticsprofilesGetRequest {
	return ApiDiagnosticsprofilesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesGetExecute(r ApiDiagnosticsprofilesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsProfilesAPIService.DiagnosticsprofilesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.diagnosticsProfileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "diagnostics_profile_name", r.diagnosticsProfileName, "form", "")
	}
	if r.includeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_data", r.includeData, "form", "")
	}
	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDiagnosticsprofilesPatchRequest struct {
	ctx context.Context
	ApiService *DiagnosticsProfilesAPIService
	changesetName *string
	diagnosticsprofilesPutRequest *DiagnosticsprofilesPutRequest
}

func (r ApiDiagnosticsprofilesPatchRequest) ChangesetName(changesetName string) ApiDiagnosticsprofilesPatchRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsprofilesPatchRequest) DiagnosticsprofilesPutRequest(diagnosticsprofilesPutRequest DiagnosticsprofilesPutRequest) ApiDiagnosticsprofilesPatchRequest {
	r.diagnosticsprofilesPutRequest = &diagnosticsprofilesPutRequest
	return r
}

func (r ApiDiagnosticsprofilesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsprofilesPatchExecute(r)
}

/*
DiagnosticsprofilesPatch Update Diagnostics Profile

Update Diagnostics Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsprofilesPatchRequest
*/
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesPatch(ctx context.Context) ApiDiagnosticsprofilesPatchRequest {
	return ApiDiagnosticsprofilesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesPatchExecute(r ApiDiagnosticsprofilesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsProfilesAPIService.DiagnosticsprofilesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.diagnosticsprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDiagnosticsprofilesPutRequest struct {
	ctx context.Context
	ApiService *DiagnosticsProfilesAPIService
	changesetName *string
	diagnosticsprofilesPutRequest *DiagnosticsprofilesPutRequest
}

func (r ApiDiagnosticsprofilesPutRequest) ChangesetName(changesetName string) ApiDiagnosticsprofilesPutRequest {
	r.changesetName = &changesetName
	return r
}

func (r ApiDiagnosticsprofilesPutRequest) DiagnosticsprofilesPutRequest(diagnosticsprofilesPutRequest DiagnosticsprofilesPutRequest) ApiDiagnosticsprofilesPutRequest {
	r.diagnosticsprofilesPutRequest = &diagnosticsprofilesPutRequest
	return r
}

func (r ApiDiagnosticsprofilesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.DiagnosticsprofilesPutExecute(r)
}

/*
DiagnosticsprofilesPut Create Diagnostics Profile

Create Diagnostics Profile into the system if changeset_name is empty, into a changeset if its name is provided.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDiagnosticsprofilesPutRequest
*/
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesPut(ctx context.Context) ApiDiagnosticsprofilesPutRequest {
	return ApiDiagnosticsprofilesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DiagnosticsProfilesAPIService) DiagnosticsprofilesPutExecute(r ApiDiagnosticsprofilesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiagnosticsProfilesAPIService.DiagnosticsprofilesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diagnosticsprofiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.changesetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeset_name", r.changesetName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.diagnosticsprofilesPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
