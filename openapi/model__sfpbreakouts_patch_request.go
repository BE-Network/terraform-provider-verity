/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SfpbreakoutsPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SfpbreakoutsPatchRequest{}

// SfpbreakoutsPatchRequest struct for SfpbreakoutsPatchRequest
type SfpbreakoutsPatchRequest struct {
	SfpBreakouts *map[string]SfpbreakoutsPatchRequestSfpBreakoutsValue `json:"sfp_breakouts,omitempty"`
}

// NewSfpbreakoutsPatchRequest instantiates a new SfpbreakoutsPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSfpbreakoutsPatchRequest() *SfpbreakoutsPatchRequest {
	this := SfpbreakoutsPatchRequest{}
	return &this
}

// NewSfpbreakoutsPatchRequestWithDefaults instantiates a new SfpbreakoutsPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSfpbreakoutsPatchRequestWithDefaults() *SfpbreakoutsPatchRequest {
	this := SfpbreakoutsPatchRequest{}
	return &this
}

// GetSfpBreakouts returns the SfpBreakouts field value if set, zero value otherwise.
func (o *SfpbreakoutsPatchRequest) GetSfpBreakouts() map[string]SfpbreakoutsPatchRequestSfpBreakoutsValue {
	if o == nil || IsNil(o.SfpBreakouts) {
		var ret map[string]SfpbreakoutsPatchRequestSfpBreakoutsValue
		return ret
	}
	return *o.SfpBreakouts
}

// GetSfpBreakoutsOk returns a tuple with the SfpBreakouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfpbreakoutsPatchRequest) GetSfpBreakoutsOk() (*map[string]SfpbreakoutsPatchRequestSfpBreakoutsValue, bool) {
	if o == nil || IsNil(o.SfpBreakouts) {
		return nil, false
	}
	return o.SfpBreakouts, true
}

// HasSfpBreakouts returns a boolean if a field has been set.
func (o *SfpbreakoutsPatchRequest) HasSfpBreakouts() bool {
	if o != nil && !IsNil(o.SfpBreakouts) {
		return true
	}

	return false
}

// SetSfpBreakouts gets a reference to the given map[string]SfpbreakoutsPatchRequestSfpBreakoutsValue and assigns it to the SfpBreakouts field.
func (o *SfpbreakoutsPatchRequest) SetSfpBreakouts(v map[string]SfpbreakoutsPatchRequestSfpBreakoutsValue) {
	o.SfpBreakouts = &v
}

func (o SfpbreakoutsPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SfpbreakoutsPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SfpBreakouts) {
		toSerialize["sfp_breakouts"] = o.SfpBreakouts
	}
	return toSerialize, nil
}

type NullableSfpbreakoutsPatchRequest struct {
	value *SfpbreakoutsPatchRequest
	isSet bool
}

func (v NullableSfpbreakoutsPatchRequest) Get() *SfpbreakoutsPatchRequest {
	return v.value
}

func (v *NullableSfpbreakoutsPatchRequest) Set(val *SfpbreakoutsPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSfpbreakoutsPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSfpbreakoutsPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSfpbreakoutsPatchRequest(val *SfpbreakoutsPatchRequest) *NullableSfpbreakoutsPatchRequest {
	return &NullableSfpbreakoutsPatchRequest{value: val, isSet: true}
}

func (v NullableSfpbreakoutsPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSfpbreakoutsPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


