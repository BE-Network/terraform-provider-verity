/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SpineplanesPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpineplanesPutRequest{}

// SpineplanesPutRequest struct for SpineplanesPutRequest
type SpineplanesPutRequest struct {
	SpinePlane *map[string]SpineplanesPutRequestSpinePlaneValue `json:"spine_plane,omitempty"`
}

// NewSpineplanesPutRequest instantiates a new SpineplanesPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpineplanesPutRequest() *SpineplanesPutRequest {
	this := SpineplanesPutRequest{}
	return &this
}

// NewSpineplanesPutRequestWithDefaults instantiates a new SpineplanesPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpineplanesPutRequestWithDefaults() *SpineplanesPutRequest {
	this := SpineplanesPutRequest{}
	return &this
}

// GetSpinePlane returns the SpinePlane field value if set, zero value otherwise.
func (o *SpineplanesPutRequest) GetSpinePlane() map[string]SpineplanesPutRequestSpinePlaneValue {
	if o == nil || IsNil(o.SpinePlane) {
		var ret map[string]SpineplanesPutRequestSpinePlaneValue
		return ret
	}
	return *o.SpinePlane
}

// GetSpinePlaneOk returns a tuple with the SpinePlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpineplanesPutRequest) GetSpinePlaneOk() (*map[string]SpineplanesPutRequestSpinePlaneValue, bool) {
	if o == nil || IsNil(o.SpinePlane) {
		return nil, false
	}
	return o.SpinePlane, true
}

// HasSpinePlane returns a boolean if a field has been set.
func (o *SpineplanesPutRequest) HasSpinePlane() bool {
	if o != nil && !IsNil(o.SpinePlane) {
		return true
	}

	return false
}

// SetSpinePlane gets a reference to the given map[string]SpineplanesPutRequestSpinePlaneValue and assigns it to the SpinePlane field.
func (o *SpineplanesPutRequest) SetSpinePlane(v map[string]SpineplanesPutRequestSpinePlaneValue) {
	o.SpinePlane = &v
}

func (o SpineplanesPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpineplanesPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpinePlane) {
		toSerialize["spine_plane"] = o.SpinePlane
	}
	return toSerialize, nil
}

type NullableSpineplanesPutRequest struct {
	value *SpineplanesPutRequest
	isSet bool
}

func (v NullableSpineplanesPutRequest) Get() *SpineplanesPutRequest {
	return v.value
}

func (v *NullableSpineplanesPutRequest) Set(val *SpineplanesPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpineplanesPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpineplanesPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpineplanesPutRequest(val *SpineplanesPutRequest) *NullableSpineplanesPutRequest {
	return &NullableSpineplanesPutRequest{value: val, isSet: true}
}

func (v NullableSpineplanesPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpineplanesPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


