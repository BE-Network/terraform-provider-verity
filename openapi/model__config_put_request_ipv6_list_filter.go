/*
Verity API

This application demonstrates the usage of Verity API. 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigPutRequestIpv6ListFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequestIpv6ListFilter{}

// ConfigPutRequestIpv6ListFilter struct for ConfigPutRequestIpv6ListFilter
type ConfigPutRequestIpv6ListFilter struct {
	Ipv6ListFilterName *ConfigPutRequestIpv6ListFilterIpv6ListFilterName `json:"ipv6_list_filter_name,omitempty"`
}

// NewConfigPutRequestIpv6ListFilter instantiates a new ConfigPutRequestIpv6ListFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequestIpv6ListFilter() *ConfigPutRequestIpv6ListFilter {
	this := ConfigPutRequestIpv6ListFilter{}
	return &this
}

// NewConfigPutRequestIpv6ListFilterWithDefaults instantiates a new ConfigPutRequestIpv6ListFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestIpv6ListFilterWithDefaults() *ConfigPutRequestIpv6ListFilter {
	this := ConfigPutRequestIpv6ListFilter{}
	return &this
}

// GetIpv6ListFilterName returns the Ipv6ListFilterName field value if set, zero value otherwise.
func (o *ConfigPutRequestIpv6ListFilter) GetIpv6ListFilterName() ConfigPutRequestIpv6ListFilterIpv6ListFilterName {
	if o == nil || IsNil(o.Ipv6ListFilterName) {
		var ret ConfigPutRequestIpv6ListFilterIpv6ListFilterName
		return ret
	}
	return *o.Ipv6ListFilterName
}

// GetIpv6ListFilterNameOk returns a tuple with the Ipv6ListFilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequestIpv6ListFilter) GetIpv6ListFilterNameOk() (*ConfigPutRequestIpv6ListFilterIpv6ListFilterName, bool) {
	if o == nil || IsNil(o.Ipv6ListFilterName) {
		return nil, false
	}
	return o.Ipv6ListFilterName, true
}

// HasIpv6ListFilterName returns a boolean if a field has been set.
func (o *ConfigPutRequestIpv6ListFilter) HasIpv6ListFilterName() bool {
	if o != nil && !IsNil(o.Ipv6ListFilterName) {
		return true
	}

	return false
}

// SetIpv6ListFilterName gets a reference to the given ConfigPutRequestIpv6ListFilterIpv6ListFilterName and assigns it to the Ipv6ListFilterName field.
func (o *ConfigPutRequestIpv6ListFilter) SetIpv6ListFilterName(v ConfigPutRequestIpv6ListFilterIpv6ListFilterName) {
	o.Ipv6ListFilterName = &v
}

func (o ConfigPutRequestIpv6ListFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequestIpv6ListFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv6ListFilterName) {
		toSerialize["ipv6_list_filter_name"] = o.Ipv6ListFilterName
	}
	return toSerialize, nil
}

type NullableConfigPutRequestIpv6ListFilter struct {
	value *ConfigPutRequestIpv6ListFilter
	isSet bool
}

func (v NullableConfigPutRequestIpv6ListFilter) Get() *ConfigPutRequestIpv6ListFilter {
	return v.value
}

func (v *NullableConfigPutRequestIpv6ListFilter) Set(val *ConfigPutRequestIpv6ListFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequestIpv6ListFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequestIpv6ListFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequestIpv6ListFilter(val *ConfigPutRequestIpv6ListFilter) *NullableConfigPutRequestIpv6ListFilter {
	return &NullableConfigPutRequestIpv6ListFilter{value: val, isSet: true}
}

func (v NullableConfigPutRequestIpv6ListFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequestIpv6ListFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


